/**
dco/c++/base v4.4.1
    -- Algorithmic Differentiation by Operator Overloading in C++

COPYRIGHT 2024
The Numerical Algorithms Group Limited and
Software and Tools for Computational Engineering @ RWTH Aachen University

This file is part of dco/c++.
**/

namespace dco {
using index_t = index_t_DEFINE;
[[deprecated("Use dco::index_t instead")]] typedef index_t DCO_TAPE_INT;
[[deprecated("Use dco::index_t instead")]] typedef index_t DCO_INTEGRAL_TAPE_INT;
static constexpr bool NAG_dco_9751 = true;
static constexpr bool HAS_TAPE_ACTIVITY_CHECK = true;
static constexpr bool NAG_dco_9752 = true;
static constexpr bool NAG_dco_9753 = false;
static constexpr bool NAG_dco_9754 = true;
template <class NAG_dco_9755, class NAG_dco_9756 = NAG_dco_9755, class NAG_dco_9757 = NAG_dco_9755>
struct types_config_t {
  typedef NAG_dco_9755 value_t;
  typedef NAG_dco_9756 NAG_dco_9758;
  typedef NAG_dco_9757 NAG_dco_9759;
};
} // namespace dco

namespace dco {
template <std::size_t NAG_dco_9760> struct subrange_t {
  static constexpr std::size_t NAG_dco_9761 = NAG_dco_9760;
  subrange_t(std::size_t NAG_dco_9762) : NAG_dco_9763(NAG_dco_9762) {}
  std::size_t NAG_dco_9763;
};
template <std::size_t NAG_dco_9760> struct range_t {
  subrange_t<NAG_dco_9760> const& NAG_dco_9764;
  std::size_t global_index, NAG_dco_9765;
  range_t(subrange_t<NAG_dco_9760> const& NAG_dco_9766)
      : NAG_dco_9764(NAG_dco_9766), global_index(0), NAG_dco_9765(0) {}
  range_t& operator++() {
    global_index += NAG_dco_9764.NAG_dco_9761;
    ++NAG_dco_9765;
    return *this;
  }
  bool operator!=(range_t const& NAG_dco_9767) const {
    if (NAG_dco_9767.NAG_dco_9765 != NAG_dco_9765)
      return true;
    return false;
  }
  range_t& operator*() { return *this; }
  range_t const& operator*() const { return *this; }
  void NAG_dco_9768() {
    global_index = NAG_dco_9764.NAG_dco_9763;
    NAG_dco_9765 = static_cast<std::size_t>(std::ceil(static_cast<double>(NAG_dco_9764.NAG_dco_9763) / NAG_dco_9760));
  }
  bool is_last() const { return global_index + NAG_dco_9760 >= NAG_dco_9764.NAG_dco_9763; }
};
template <std::size_t NAG_dco_9760> struct inner_range_t {
  range_t<NAG_dco_9760> const& NAG_dco_9769;
  std::size_t global_index, sub_index;
  inner_range_t(range_t<NAG_dco_9760> const& NAG_dco_9770)
      : NAG_dco_9769(NAG_dco_9770), global_index(NAG_dco_9770.global_index), sub_index(0) {}
  inner_range_t& operator++() {
    ++sub_index;
    ++global_index;
    return *this;
  }
  void NAG_dco_9768() {
    if ((NAG_dco_9769.NAG_dco_9765 + 1) * NAG_dco_9769.NAG_dco_9764.NAG_dco_9761 >
        NAG_dco_9769.NAG_dco_9764.NAG_dco_9763) {
      sub_index = NAG_dco_9769.NAG_dco_9764.NAG_dco_9763 % NAG_dco_9769.NAG_dco_9764.NAG_dco_9761;
    } else {
      sub_index = NAG_dco_9769.NAG_dco_9764.NAG_dco_9761;
    }
  }
  bool operator!=(inner_range_t const& NAG_dco_9767) const {
    if (NAG_dco_9767.sub_index != sub_index)
      return true;
    return false;
  }
  inner_range_t& operator*() { return *this; }
  inner_range_t const& operator*() const { return *this; }
};
template <std::size_t NAG_dco_9760>
static inner_range_t<NAG_dco_9760> begin(range_t<NAG_dco_9760> const& NAG_dco_9770) {
  return inner_range_t<NAG_dco_9760>(NAG_dco_9770);
}
template <std::size_t NAG_dco_9760> static range_t<NAG_dco_9760> begin(subrange_t<NAG_dco_9760> const& NAG_dco_9766) {
  return range_t<NAG_dco_9760>(NAG_dco_9766);
}
template <std::size_t NAG_dco_9760> static inner_range_t<NAG_dco_9760> end(range_t<NAG_dco_9760> const& NAG_dco_9770) {
  inner_range_t<NAG_dco_9760> NAG_dco_9771(NAG_dco_9770);
  NAG_dco_9771.NAG_dco_9768();
  return NAG_dco_9771;
}
template <std::size_t NAG_dco_9760> static range_t<NAG_dco_9760> end(subrange_t<NAG_dco_9760> const& NAG_dco_9766) {
  range_t<NAG_dco_9760> NAG_dco_9771(NAG_dco_9766);
  NAG_dco_9771.NAG_dco_9768();
  return NAG_dco_9771;
}
template <std::size_t NAG_dco_9760> static subrange_t<NAG_dco_9760> subranges(std::size_t NAG_dco_9762) {
  return subrange_t<NAG_dco_9760>(NAG_dco_9762);
}
} // namespace dco

namespace dco {
typedef unsigned long mem_long_t;
inline std::size_t get_allocation_size(std::size_t NAG_dco_9772);
enum class stream_format_e { human_readable, dot, csv };
struct memory_model {
  enum TYPE {
    NAG_dco_9773,
    BLOB_TAPE,
    BLOB_TAPE_SPLINT,
    CHUNK_TAPE,
    NAG_dco_9774,
    NAG_dco_9775,
    NAG_dco_9776,
    NAG_dco_9777
  };
};
enum class size_of_e {
  stack = 1,
  allocated_stack = 2,
  internal_adjoint_vector = 4,
  allocated_internal_adjoint_vector = 8,
  checkpoints = 16,
  def = stack | internal_adjoint_vector
};
inline bool operator&(size_of_e const& NAG_dco_9778, size_of_e const& NAG_dco_9779) {
  return static_cast<int>(NAG_dco_9778) & static_cast<int>(NAG_dco_9779);
}
inline size_of_e operator|(size_of_e const& NAG_dco_9778, size_of_e const& NAG_dco_9779) {
  return static_cast<size_of_e>(static_cast<int>(NAG_dco_9778) | static_cast<int>(NAG_dco_9779));
}
namespace internal {
template <class NAG_dco_9780, class NAG_dco_9781> struct active_type;
template <class NAG_dco_9780, class DATA_TYPE> struct NAG_dco_9782;
template <class NAG_dco_9780, class NAG_dco_9783, class NAG_dco_9784, typename = void> struct NAG_dco_9785;
template <class NAG_dco_9780, class NAG_dco_9786, class NAG_dco_9787, class NAG_dco_9784, typename = void>
struct NAG_dco_9788;
template <class NAG_dco_9780, class NAG_dco_9786, class NAG_dco_9787, class NAG_dco_9784, typename = void>
struct NAG_dco_9789;
template <class NAG_dco_9780, class NAG_dco_9786, class NAG_dco_9787, class NAG_dco_9784, typename = void>
struct NAG_dco_9790;
template <typename NAG_dco_9791, typename enable_if = void> struct trait_value;
template <typename NAG_dco_9791, typename NAG_dco_9792 = void, typename enable_if = void> struct NAG_dco_9793;
template <typename NAG_dco_9791, typename NAG_dco_9792 = void, typename enable_if = void> struct NAG_dco_9794;
template <typename NAG_dco_9791, typename NAG_dco_9792 = void, typename enable_if = void> struct NAG_dco_9795;
template <typename NAG_dco_9791, typename enable_if = void> struct NAG_dco_9796;
template <typename NAG_dco_9791, typename enable_if = void> struct NAG_dco_9797;
template <typename NAG_dco_9791, typename enable_if = void> struct NAG_dco_9798;
template <enum memory_model::TYPE MEMORY_MODEL, class NAG_dco_9799,
          enum memory_model::TYPE NAG_dco_9800 = memory_model::NAG_dco_9773, typename NAG_dco_9801 = void>
class tape;
template <typename NAG_dco_9801, typename NAG_dco_9802 = void> struct smart_tape_ptr_t;
template <typename NAG_dco_9791> struct NAG_dco_9803 {};
template <memory_model::TYPE MEMORY_MODEL, typename NAG_dco_9799, memory_model::TYPE NAG_dco_9800,
          typename NAG_dco_9801>
struct NAG_dco_9803<tape<MEMORY_MODEL, NAG_dco_9799, NAG_dco_9800, NAG_dco_9801>> {
  typedef typename NAG_dco_9799::NAG_dco_9758 type;
};
template <class NAG_dco_9757, typename NAG_dco_9804> class adjoint_vector_lazy;
template <typename NAG_dco_9805, typename NAG_dco_9804> struct jacobian_preaccumulator_t;
struct NAG_dco_9806 {};
} // namespace internal
template <class NAG_dco_9807, class NAG_dco_9757, int NAG_dco_9808 = -1> struct adjoint_vector;
template <class NAG_dco_9757> struct adjoint_vector_abstract;
template <typename NAG_dco_9791> struct mode;
template <typename NAG_dco_9791> typename internal::NAG_dco_9797<NAG_dco_9791>::NAG_dco_9809 tape(const NAG_dco_9791&);
template <typename NAG_dco_9780> struct NAG_dco_9810 {
  typedef NAG_dco_9780 active_value_t;
  typedef NAG_dco_9780 value_t;
  typedef value_t scalar_value_t;
  typedef NAG_dco_9780 passive_t;
  typedef NAG_dco_9780 scalar_passive_t;
  static constexpr int order = 0;
  static constexpr std::size_t derivative_vector_length = 0;
};
struct NAG_dco_9811 {
  using NAG_dco_9759 = double;
};
namespace vector_ns {
template <typename NAG_dco_9812, std::size_t NAG_dco_9813> struct alignas(alignof(NAG_dco_9812[NAG_dco_9813])) vector_t;
}
namespace folding {
template <typename NAG_dco_9791, typename enable_if = void> struct is_zero_trait;
template <typename NAG_dco_9791> bool is_zero(const NAG_dco_9791& NAG_dco_9778);
} // namespace folding
namespace internal {
enum class NAG_dco_9814 { NAG_dco_9815, NAG_dco_9816, NAG_dco_9817, NAG_dco_9818, NAG_dco_9819, NAG_dco_9820 };
template <typename mode_t, NAG_dco_9814 NAG_dco_9821, typename NAG_dco_9822, typename NAG_dco_9792 = void*>
struct NAG_dco_9823;
} // namespace internal
} // namespace dco

extern "C" {
extern int stce_1000002(int NAG_dco_9824 = false);
extern void* stce_1000001(size_t* NAG_dco_9825, int);
extern void* stce_999999(size_t, int);
extern DCO_INT32 stce_1000003(DCO_INT32* NAG_dco_9826);
extern DCO_INT64 stce_1000004(DCO_INT64* NAG_dco_9826);
extern void stce_1000000(void* NAG_dco_9827);
}
template <typename NAG_dco_9791> inline NAG_dco_9791 NAG_dco_9828(NAG_dco_9791& NAG_dco_9826);
template <> inline DCO_INT32 NAG_dco_9828<DCO_INT32>(DCO_INT32& NAG_dco_9826) { return stce_1000003(&NAG_dco_9826); }
template <> inline DCO_INT64 NAG_dco_9828<DCO_INT64>(DCO_INT64& NAG_dco_9826) { return stce_1000004(&NAG_dco_9826); }

namespace dco {
class exception {
public:
  template <typename NAG_dco_9829>
  static NAG_dco_9829 create(std::string NAG_dco_9830, std::string NAG_dco_9831 = "", int NAG_dco_9832 = 0) {
    std::stringstream NAG_dco_9833;
    NAG_dco_9833 << "--- dco/c++ --- " << NAG_dco_9830;
    if (NAG_dco_9831 != "")
      NAG_dco_9833 << " --- " << NAG_dco_9831 << ":" << NAG_dco_9832 << ".";
    DCO_LOG(dco::logERROR) << "EXCEPTION thrown: " << NAG_dco_9833.str();
    return NAG_dco_9829(NAG_dco_9833.str());
  }
  template <typename NAG_dco_9829>
  static NAG_dco_9829 NAG_dco_9834(std::string NAG_dco_9830, std::string NAG_dco_9831 = "", int NAG_dco_9832 = 0) {
    std::stringstream NAG_dco_9833;
    NAG_dco_9833 << "--- dco/c++ --- " << NAG_dco_9830;
    if (NAG_dco_9831 != "")
      NAG_dco_9833 << " --- " << NAG_dco_9831 << ":" << NAG_dco_9832 << ".";
    DCO_LOG(dco::logERROR) << "EXCEPTION thrown: " << NAG_dco_9833.str();
    return NAG_dco_9829();
  }
};
} // namespace dco
namespace dco {
template <memory_model::TYPE MEMORY_MODEL, class NAG_dco_9799, memory_model::TYPE NAG_dco_9800, typename NAG_dco_9801>
bool is_null(internal::tape<MEMORY_MODEL, NAG_dco_9799, NAG_dco_9800, NAG_dco_9801>* tape) {
  return (tape == NULL);
}
static unsigned int NAG_dco_9835 = 0xABCDE;
static unsigned int NAG_dco_9836(unsigned int* NAG_dco_9837, unsigned int NAG_dco_9838) {
  unsigned int NAG_dco_9839;
  NAG_dco_9839 = *NAG_dco_9837 & 1;
  *NAG_dco_9837 >>= 1;
  if (NAG_dco_9839 == 1)
    *NAG_dco_9837 = NAG_dco_9838;
  return *NAG_dco_9837;
}
static inline double NAG_dco_9840() {
  NAG_dco_9836(&NAG_dco_9835, 0xB4BCD35C);
  unsigned int NAG_dco_9841 = NAG_dco_9836(&NAG_dco_9835, 0xB4BCD35C);
  return double(NAG_dco_9841) / RAND_MAX;
}
template <class NAG_dco_9791> std::string type_name() {
  using NAG_dco_9842 = std::remove_reference_t<NAG_dco_9791>;
  std::unique_ptr<char, void (*)(void*)> NAG_dco_9843(
      abi::__cxa_demangle(typeid(NAG_dco_9842).name(), nullptr, nullptr, nullptr), std::free);
  std::string NAG_dco_9844 = NAG_dco_9843 != nullptr ? NAG_dco_9843.get() : typeid(NAG_dco_9842).name();
  if constexpr (std::is_const_v<NAG_dco_9842>) {
    NAG_dco_9844 += " const";
  }
  if constexpr (std::is_volatile_v<NAG_dco_9842>) {
    NAG_dco_9844 += " volatile";
  }
  if constexpr (std::is_lvalue_reference_v<NAG_dco_9791>) {
    NAG_dco_9844 += "&";
  } else {
    if constexpr (std::is_rvalue_reference_v<NAG_dco_9791>) {
      NAG_dco_9844 += "&&";
    }
  }
  return NAG_dco_9844;
}
namespace helper {
inline bool file_exists(const std::string& str) {
  std::ifstream NAG_dco_9845{str};
  return NAG_dco_9845.is_open();
}
template <typename NAG_dco_9791>
std::string
to_string(NAG_dco_9791 const& NAG_dco_9778,
          const int NAG_dco_9762 = std::numeric_limits<typename mode<NAG_dco_9791>::passive_t>::max_digits10) {
  std::ostringstream out;
  out.precision(NAG_dco_9762);
  out << std::scientific << NAG_dco_9778;
  return out.str();
}
inline std::string NAG_dco_9846(std::string const& str, const std::string& NAG_dco_9847,
                                const std::string& NAG_dco_9848) {
  std::string NAG_dco_9849(str);
  std::string::size_type NAG_dco_9850 = 0;
  while ((NAG_dco_9850 = NAG_dco_9849.find(NAG_dco_9847, NAG_dco_9850)) != std::string::npos) {
    NAG_dco_9849.replace(NAG_dco_9850, NAG_dco_9847.length(), NAG_dco_9848);
    NAG_dco_9850 += NAG_dco_9848.length();
  }
  return NAG_dco_9849;
}
static constexpr bool NAG_dco_9851 = true;
template <typename NAG_dco_9791> struct NAG_dco_9852 : std::true_type {};
template <typename NAG_dco_9791> inline decltype(auto) abs(const NAG_dco_9791& NAG_dco_9778) {
  if constexpr (std::is_integral_v<NAG_dco_9791>) {
    if constexpr (std::is_signed_v<NAG_dco_9791>) {
      return std::abs(NAG_dco_9778);
    } else {
      return NAG_dco_9778;
    }
  } else {
    static_assert(!NAG_dco_9852<NAG_dco_9791>::value, "dco/c++: dco::helper::abs only defined for intergral types.");
  }
}
template <typename NAG_dco_9791, bool NAG_dco_9853 = true> struct NAG_dco_9854 {
  NAG_dco_9791& NAG_dco_9855;
  auto begin() {
    if constexpr (NAG_dco_9853) {
      return std::rbegin(NAG_dco_9855);
    } else {
      return std::begin(NAG_dco_9855);
    }
  }
  auto end() {
    if constexpr (NAG_dco_9853) {
      return std::rend(NAG_dco_9855);
    } else {
      return std::end(NAG_dco_9855);
    }
  }
};
template <bool NAG_dco_9853 = true, typename NAG_dco_9791>
NAG_dco_9854<NAG_dco_9791, NAG_dco_9853> reverse(NAG_dco_9791&& NAG_dco_9855) {
  return {NAG_dco_9855};
}
template <class NAG_dco_9856, const std::size_t NAG_dco_9857 = 1> struct valvec {
  static constexpr std::size_t NAG_dco_9858 = NAG_dco_9857;
  typedef NAG_dco_9856 value_t;
  NAG_dco_9856 NAG_dco_9859[NAG_dco_9857];
  void NAG_dco_9860(const NAG_dco_9856& NAG_dco_9861) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9859[NAG_dco_9862] = NAG_dco_9861;
  }
  template <typename NAG_dco_9791>
  valvec(const NAG_dco_9791& NAG_dco_9778, std::enable_if_t<std::is_fundamental_v<NAG_dco_9791>, int> = 0) noexcept(
      noexcept(static_cast<NAG_dco_9856>(std::declval<NAG_dco_9791>()))) {
    NAG_dco_9860(static_cast<NAG_dco_9856>(NAG_dco_9778));
  }
  template <typename NAG_dco_9791 = NAG_dco_9856>
  valvec(const NAG_dco_9856& NAG_dco_9778, std::enable_if_t<!std::is_fundamental_v<NAG_dco_9791>, int> = 0) noexcept {
    NAG_dco_9860(NAG_dco_9778);
  }
  valvec() noexcept { NAG_dco_9860(0); }
  NAG_dco_9856& operator[](const std::size_t NAG_dco_9826) { return NAG_dco_9859[NAG_dco_9826]; }
  const NAG_dco_9856& operator[](const std::size_t NAG_dco_9826) const { return NAG_dco_9859[NAG_dco_9826]; }
  valvec& operator=(const std::array<NAG_dco_9856, NAG_dco_9857>& v) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9859[NAG_dco_9862] = v[NAG_dco_9862];
    return *this;
  }
  valvec& operator=(const std::vector<NAG_dco_9856>& v) {
    if (v.size() != NAG_dco_9857) {
      throw exception::create<std::runtime_error>("Assignment from std::vector not possible, non-matching sizes.");
    }
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9859[NAG_dco_9862] = v[NAG_dco_9862];
    return *this;
  }
  template <typename NAG_dco_9791>
  std::enable_if_t<std::is_fundamental_v<NAG_dco_9791>, valvec>& operator=(const NAG_dco_9791& v) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9859[NAG_dco_9862] = static_cast<NAG_dco_9856>(v);
    return *this;
  }
  template <typename NAG_dco_9791 = NAG_dco_9856>
  std::enable_if_t<!std::is_fundamental_v<NAG_dco_9791>, valvec>& operator=(const NAG_dco_9856& v) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9859[NAG_dco_9862] = v;
    return *this;
  }
  valvec& operator+=(const valvec& v) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9859[NAG_dco_9862] += v.NAG_dco_9859[NAG_dco_9862];
    return *this;
  }
  valvec& operator+=(const std::array<NAG_dco_9856, NAG_dco_9857>& v) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9859[NAG_dco_9862] += v[NAG_dco_9862];
    return *this;
  }
  valvec& operator+=(const std::vector<NAG_dco_9856>& v) {
    if (v.size() != NAG_dco_9857) {
      throw exception::create<std::runtime_error>("Increment with std::vector not possible, non-matching sizes.");
    }
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9859[NAG_dco_9862] += v[NAG_dco_9862];
    return *this;
  }
  operator std::array<NAG_dco_9856, NAG_dco_9857>() {
    std::array<NAG_dco_9856, NAG_dco_9857> NAG_dco_9849;
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9849[NAG_dco_9862] = NAG_dco_9859[NAG_dco_9862];
    return NAG_dco_9849;
  }
  operator std::vector<NAG_dco_9856>() {
    std::vector<NAG_dco_9856> NAG_dco_9849(NAG_dco_9857);
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
      NAG_dco_9849[NAG_dco_9862] = NAG_dco_9859[NAG_dco_9862];
    return NAG_dco_9849;
  }
  constexpr std::size_t size() const { return NAG_dco_9858; }
};
template <typename NAG_dco_9856, typename NAG_dco_9863, const std::size_t NAG_dco_9857>
bool operator==(valvec<NAG_dco_9856, NAG_dco_9857> const& NAG_dco_9864,
                valvec<NAG_dco_9863, NAG_dco_9857> const& NAG_dco_9770) {
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862) {
    if (NAG_dco_9864[NAG_dco_9862] != NAG_dco_9770[NAG_dco_9862]) {
      return false;
    }
  }
  return true;
}
template <typename NAG_dco_9856, typename NAG_dco_9863, const std::size_t NAG_dco_9857>
bool operator==(valvec<NAG_dco_9856, NAG_dco_9857> const& NAG_dco_9864, NAG_dco_9863 const& NAG_dco_9770) {
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862) {
    if (NAG_dco_9864[NAG_dco_9862] != NAG_dco_9770) {
      return false;
    }
  }
  return true;
}
template <class NAG_dco_9791> struct vecsize_info {
  static constexpr std::size_t vecsize = 1;
  typedef NAG_dco_9791 NAG_dco_9865;
};
template <class NAG_dco_9856, std::size_t NAG_dco_9857> struct vecsize_info<valvec<NAG_dco_9856, NAG_dco_9857>> {
  static constexpr std::size_t vecsize = NAG_dco_9857;
  typedef NAG_dco_9856 NAG_dco_9865;
};
template <class NAG_dco_9856, size_t NAG_dco_9857>
static inline valvec<NAG_dco_9856, NAG_dco_9857> operator+(const valvec<NAG_dco_9856, NAG_dco_9857>& NAG_dco_9866,
                                                           const valvec<NAG_dco_9856, NAG_dco_9857>& NAG_dco_9867) {
  valvec<NAG_dco_9856, NAG_dco_9857> NAG_dco_9849;
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
    NAG_dco_9849.NAG_dco_9859[NAG_dco_9862] =
        NAG_dco_9866.NAG_dco_9859[NAG_dco_9862] + NAG_dco_9867.NAG_dco_9859[NAG_dco_9862];
  return NAG_dco_9849;
}
template <class NAG_dco_9856, std::size_t NAG_dco_9857>
static inline valvec<NAG_dco_9856, NAG_dco_9857> operator*(const valvec<NAG_dco_9856, NAG_dco_9857>& NAG_dco_9866,
                                                           const valvec<NAG_dco_9856, NAG_dco_9857>& NAG_dco_9867) {
  valvec<NAG_dco_9856, NAG_dco_9857> NAG_dco_9849;
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
    NAG_dco_9849.NAG_dco_9859[NAG_dco_9862] =
        NAG_dco_9866.NAG_dco_9859[NAG_dco_9862] * NAG_dco_9867.NAG_dco_9859[NAG_dco_9862];
  return NAG_dco_9849;
}
template <class NAG_dco_9856, class NAG_dco_9863, std::size_t NAG_dco_9857>
static inline valvec<NAG_dco_9856, NAG_dco_9857> operator*(const NAG_dco_9863& NAG_dco_9868,
                                                           const valvec<NAG_dco_9856, NAG_dco_9857>& NAG_dco_9869) {
  valvec<NAG_dco_9856, NAG_dco_9857> NAG_dco_9849;
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
    NAG_dco_9849.NAG_dco_9859[NAG_dco_9862] = NAG_dco_9869.NAG_dco_9859[NAG_dco_9862] * NAG_dco_9868;
  return NAG_dco_9849;
}
template <class NAG_dco_9856, class NAG_dco_9863, std::size_t NAG_dco_9857>
static inline valvec<NAG_dco_9856, NAG_dco_9857> operator*(const valvec<NAG_dco_9856, NAG_dco_9857>& NAG_dco_9866,
                                                           const NAG_dco_9863& NAG_dco_9867) {
  valvec<NAG_dco_9856, NAG_dco_9857> NAG_dco_9849;
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862)
    NAG_dco_9849.NAG_dco_9859[NAG_dco_9862] =
        static_cast<NAG_dco_9856>(NAG_dco_9866.NAG_dco_9859[NAG_dco_9862] * NAG_dco_9867);
  return NAG_dco_9849;
}
template <class NAG_dco_9856, std::size_t NAG_dco_9857>
static inline std::ostream& operator<<(std::ostream& out, const valvec<NAG_dco_9856, NAG_dco_9857>& NAG_dco_9778) {
  out << "(";
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862) {
    out << NAG_dco_9778.NAG_dco_9859[NAG_dco_9862];
    if (NAG_dco_9862 != NAG_dco_9857 - 1) {
      out << ";";
    }
  }
  out << ")";
  return out;
}
} // namespace helper
template <typename TYPE> class NAG_dco_9870 {
  const TYPE& NAG_dco_9791;

public:
  NAG_dco_9870(const TYPE& NAG_dco_9871) : NAG_dco_9791(NAG_dco_9871) {}
  template <typename NAG_dco_9872> NAG_dco_9872* create() const { return new NAG_dco_9872(NAG_dco_9791); }
};
template <> class NAG_dco_9870<void*> {
public:
  NAG_dco_9870(void*) {}
  template <typename NAG_dco_9872> NAG_dco_9872* create() const { return new NAG_dco_9872(); }
};
class NAG_dco_9873 {
  std::ostream& stream;
  std::string NAG_dco_9874;
  std::string NAG_dco_9875;
  std::stringstream NAG_dco_9876;
  std::stringstream NAG_dco_9877;

public:
  NAG_dco_9873(std::ostream& stream) : stream(stream), NAG_dco_9874("digraph {\n"), NAG_dco_9875("\n}\n") {
    NAG_dco_9876.clear();
    NAG_dco_9877.clear();
  }
  void NAG_dco_9878(std::vector<index_t>& NAG_dco_9879, std::vector<index_t>& NAG_dco_9880, index_t NAG_dco_9881) {
    NAG_dco_9876 << NAG_dco_9881 + 1 << "[shape=box,label=\"(" << NAG_dco_9881 + 1
                 << ", ext. function)\",color=\"red\"]\n";
    for (auto& NAG_dco_9882 : std::as_const(NAG_dco_9879)) {
      NAG_dco_9877 << NAG_dco_9882 << " -> " << NAG_dco_9881 << "[label=\"unknown" << "\",color=\"red\"]\n";
    }
    for (auto& NAG_dco_9883 : std::as_const(NAG_dco_9880)) {
      NAG_dco_9877 << NAG_dco_9881 << " -> " << NAG_dco_9883 << "[label=\"unknown" << "\",color=\"red\"]\n";
    }
  }
  void NAG_dco_9884(index_t NAG_dco_9881) {
    if (NAG_dco_9881 != 0) {
      NAG_dco_9876 << NAG_dco_9881 << "[shape=box,label=\"" << NAG_dco_9881 << "\", color=\"green\"]\n";
    }
  }
  template <typename NAG_dco_9885> void NAG_dco_9884(index_t NAG_dco_9881, NAG_dco_9885 adjoint) {
    if (NAG_dco_9881 != 0) {
      NAG_dco_9876 << NAG_dco_9881 << "[shape=box,label=\"(" << NAG_dco_9881 << ", " << adjoint
                   << ")\", color=\"green\"]\n";
    }
  }
  template <typename NAG_dco_9885>
  void NAG_dco_9886(index_t NAG_dco_9847, index_t NAG_dco_9848, NAG_dco_9885 NAG_dco_9887) {
    if (NAG_dco_9847 != 0 && NAG_dco_9848 != 0) {
      NAG_dco_9877 << NAG_dco_9847 << " -> " << NAG_dco_9848 << "[label=\"" << NAG_dco_9887 << "\"]\n";
    }
  }
  ~NAG_dco_9873() {
    stream << NAG_dco_9874;
    stream << NAG_dco_9876.str();
    stream << NAG_dco_9877.str();
    stream << NAG_dco_9875;
  }
};
template <typename NAG_dco_9791> struct type_identity {
  typedef NAG_dco_9791 type;
};
template <typename NAG_dco_9791>
using NAG_dco_9888 = std::remove_cv_t<std::remove_reference_t<std::remove_pointer_t<NAG_dco_9791>>>;
namespace internal {
template <typename NAG_dco_9791> struct NAG_dco_9889 : std::false_type {};
template <typename NAG_dco_9791, typename NAG_dco_9890>
struct NAG_dco_9889<std::vector<NAG_dco_9791, NAG_dco_9890>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_9891 = NAG_dco_9889<std::decay_t<NAG_dco_9791>>::value;
template <typename NAG_dco_9791> struct NAG_dco_9892 : std::false_type {};
template <typename mode_t, NAG_dco_9814 NAG_dco_9821, typename NAG_dco_9893, typename NAG_dco_9894>
struct NAG_dco_9892<NAG_dco_9823<mode_t, NAG_dco_9821, NAG_dco_9893, NAG_dco_9894>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_9895 = NAG_dco_9892<std::decay_t<NAG_dco_9791>>::value;
template <typename NAG_dco_9791> struct NAG_dco_9896 : std::false_type {};
template <typename NAG_dco_9791, std::size_t NAG_dco_9890>
struct NAG_dco_9896<helper::valvec<NAG_dco_9791, NAG_dco_9890>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_9897 = NAG_dco_9896<std::decay_t<NAG_dco_9791>>::value;
template <typename NAG_dco_9791>
constexpr bool NAG_dco_9898 = NAG_dco_9891<NAG_dco_9791> || NAG_dco_9895<NAG_dco_9791> || NAG_dco_9897<NAG_dco_9791>;
template <typename NAG_dco_9791> struct NAG_dco_9899 : std::false_type {};
template <typename NAG_dco_9791> struct NAG_dco_9899<dco::adjoint_vector_abstract<NAG_dco_9791>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_9900 = NAG_dco_9899<std::decay_t<NAG_dco_9791>>::value;
template <typename NAG_dco_9791> struct NAG_dco_9901 : std::false_type {};
template <class NAG_dco_9807, class NAG_dco_9757>
struct NAG_dco_9901<dco::adjoint_vector<NAG_dco_9807, NAG_dco_9757, -1>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_9902 = NAG_dco_9901<std::decay_t<NAG_dco_9791>>::value;
template <typename, typename = void> struct NAG_dco_9903 : std::false_type {};
template <typename NAG_dco_9791>
struct NAG_dco_9903<NAG_dco_9791, std::void_t<decltype(&NAG_dco_9791::NAG_dco_9904)>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool is_codegen_type_v = NAG_dco_9903<std::decay_t<NAG_dco_9791>>::value;
template <typename, typename = void> struct NAG_dco_9905 : std::false_type {};
template <typename NAG_dco_9791>
struct NAG_dco_9905<NAG_dco_9791,
                    std::void_t<decltype(&dco::mode<NAG_dco_9791>::suppress_control_flow_divergence_warning)>>
    : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_9906 = NAG_dco_9905<std::decay_t<NAG_dco_9791>>::value;
template <typename, typename = void> struct NAG_dco_9907 : std::false_type {};
template <typename NAG_dco_9908>
struct NAG_dco_9907<NAG_dco_9908, std::void_t<decltype(NAG_dco_9908::NAG_dco_9909(std::declval<double>()))>>
    : std::true_type {};
template <typename NAG_dco_9908> constexpr bool NAG_dco_9910 = NAG_dco_9907<std::decay_t<NAG_dco_9908>>::value;
template <typename, typename = void> struct NAG_dco_9911 : std::false_type {};
template <typename NAG_dco_9908>
struct NAG_dco_9911<NAG_dco_9908,
                    std::void_t<decltype(NAG_dco_9908::NAG_dco_9909(std::declval<double>(), std::declval<double>()))>>
    : std::true_type {};
template <typename NAG_dco_9908> constexpr bool NAG_dco_9912 = NAG_dco_9911<std::decay_t<NAG_dco_9908>>::value;
template <typename NAG_dco_9908> constexpr bool NAG_dco_9913 = NAG_dco_9910<NAG_dco_9908> || NAG_dco_9912<NAG_dco_9908>;
template <typename, typename = void> struct NAG_dco_9914 : std::false_type {};
template <typename NAG_dco_9791>
struct NAG_dco_9914<NAG_dco_9791, std::void_t<decltype(&NAG_dco_9791::data_t::NAG_dco_9915)>>
    : std::bool_constant<NAG_dco_9791::data_t::NAG_dco_9915> {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_9916 = NAG_dco_9914<std::decay_t<NAG_dco_9791>>::value;
template <typename...> struct NAG_dco_9917;
template <typename NAG_dco_9791> struct NAG_dco_9917<NAG_dco_9791> : std::true_type {};
template <typename NAG_dco_9791, typename NAG_dco_9918>
struct NAG_dco_9917<NAG_dco_9791, NAG_dco_9918> : std::bool_constant<!std::is_same_v<NAG_dco_9791, NAG_dco_9918>> {};
template <typename NAG_dco_9791, typename NAG_dco_9918, typename... NAG_dco_9919>
struct NAG_dco_9917<NAG_dco_9791, NAG_dco_9918, NAG_dco_9919...>
    : std::bool_constant<NAG_dco_9917<NAG_dco_9791, NAG_dco_9918>::value &&
                         NAG_dco_9917<NAG_dco_9791, NAG_dco_9919...>::value &&
                         NAG_dco_9917<NAG_dco_9918, NAG_dco_9919...>::value> {};
template <typename... NAG_dco_9919> static constexpr bool NAG_dco_9920(bool value, NAG_dco_9919&&... NAG_dco_9921) {
  if constexpr (sizeof...(NAG_dco_9919) == 0) {
    return value;
  } else {
    return (value && NAG_dco_9920(NAG_dco_9921...));
  }
}
template <typename... NAG_dco_9919> static constexpr bool NAG_dco_9922(bool value, NAG_dco_9919&&... NAG_dco_9921) {
  if constexpr (sizeof...(NAG_dco_9919) == 0) {
    return value;
  } else {
    return (value || NAG_dco_9922(NAG_dco_9921...));
  }
}
template <typename NAG_dco_9923, typename... NAG_dco_9919>
static constexpr bool NAG_dco_9924(NAG_dco_9923 const& NAG_dco_9925, NAG_dco_9923 const& value,
                                   NAG_dco_9919&&... NAG_dco_9921) {
  if constexpr (sizeof...(NAG_dco_9919) == 0) {
    return NAG_dco_9925 == value;
  } else {
    return (NAG_dco_9925 == value) && NAG_dco_9924(NAG_dco_9925, NAG_dco_9921...);
  }
}
} // namespace internal
template <typename NAG_dco_9926, typename NAG_dco_9927>
struct NAG_dco_9928 : std::bool_constant<(NAG_dco_9926::order < NAG_dco_9927::order)> {};
template <> struct NAG_dco_9928<void, void> : std::false_type {};
static inline void* alloc(std::size_t size, bool NAG_dco_9929 = false) {
  return stce_999999(size, static_cast<int>(NAG_dco_9929));
}
static inline void dealloc(void* NAG_dco_9827) { stce_1000000(NAG_dco_9827); }
namespace folding {
template <class NAG_dco_9856, const std::size_t NAG_dco_9857>
struct is_zero_trait<helper::valvec<NAG_dco_9856, NAG_dco_9857>> {
  static bool get(const helper::valvec<NAG_dco_9856, NAG_dco_9857>& NAG_dco_9778) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9857; ++NAG_dco_9862) {
      if (!is_zero(NAG_dco_9778[NAG_dco_9862])) {
        return false;
      }
    }
    return true;
  }
};
} // namespace folding
} // namespace dco
namespace dco {
template <typename NAG_dco_9791, typename NAG_dco_9930 = void> struct trait_size_of;
template <typename NAG_dco_9791> mem_long_t size_of(const NAG_dco_9791& NAG_dco_9778) {
  return trait_size_of<NAG_dco_9791>::get(NAG_dco_9778);
}
template <typename NAG_dco_9791> mem_long_t size_of(const NAG_dco_9791& NAG_dco_9778, dco::size_of_e NAG_dco_9931) {
  return trait_size_of<NAG_dco_9791>::get(NAG_dco_9778, NAG_dco_9931);
}
template <typename NAG_dco_9791, typename NAG_dco_9930> struct trait_size_of {
  static mem_long_t get(const NAG_dco_9791&) {
    if (helper::NAG_dco_9851) {
      throw dco::exception::create<std::runtime_error>(
          "You're trying to compute the size of the checkpoint, but a type (" + type_name<NAG_dco_9791>() +
          ") you checkpointed does not have a correct specialization:\n\n" +
          "template <typename T> struct trait_size_of {\n" + "   static mem_long_t get(const T&) { ... }\n" + "};\n\n");
    }
    return 0;
  }
};
template <memory_model::TYPE MEMORY_MODEL, class NAG_dco_9799, memory_model::TYPE NAG_dco_9800, typename NAG_dco_9801>
struct trait_size_of<dco::internal::tape<MEMORY_MODEL, NAG_dco_9799, NAG_dco_9800, NAG_dco_9801>*> {
  typedef dco::internal::tape<MEMORY_MODEL, NAG_dco_9799, NAG_dco_9800, NAG_dco_9801> tape_t;
  static mem_long_t get(const tape_t* tape, const dco::size_of_e NAG_dco_9931 = size_of_e::def) {
    return tape->NAG_dco_9932(NAG_dco_9931);
  }
};
template <typename NAG_dco_9801> struct trait_size_of<dco::internal::smart_tape_ptr_t<NAG_dco_9801>> {
  static mem_long_t get(dco::internal::smart_tape_ptr_t<NAG_dco_9801> const& tape,
                        const dco::size_of_e NAG_dco_9931 = size_of_e::def) {
    return tape->NAG_dco_9932(NAG_dco_9931);
  }
};
template <typename NAG_dco_9791> struct trait_size_of<std::vector<NAG_dco_9791>> {
  static mem_long_t get(const std::vector<NAG_dco_9791>& NAG_dco_9778) {
    return NAG_dco_9778.size() * sizeof(NAG_dco_9791) + sizeof(NAG_dco_9778);
  }
};
template <> struct trait_size_of<char> {
  static mem_long_t get(const char&) { return sizeof(char); }
};
template <> struct trait_size_of<wchar_t> {
  static mem_long_t get(const wchar_t&) { return sizeof(wchar_t); }
};
template <> struct trait_size_of<signed char> {
  static mem_long_t get(const signed char&) { return sizeof(signed char); }
};
template <> struct trait_size_of<short> {
  static mem_long_t get(const short&) { return sizeof(short); }
};
template <> struct trait_size_of<int> {
  static mem_long_t get(const int&) { return sizeof(int); }
};
template <> struct trait_size_of<long> {
  static mem_long_t get(const long&) { return sizeof(long); }
};
template <> struct trait_size_of<unsigned char> {
  static mem_long_t get(const unsigned char&) { return sizeof(unsigned char); }
};
template <> struct trait_size_of<unsigned short> {
  static mem_long_t get(const unsigned short&) { return sizeof(unsigned short); }
};
template <> struct trait_size_of<unsigned int> {
  static mem_long_t get(const unsigned int&) { return sizeof(unsigned int); }
};
template <> struct trait_size_of<unsigned long> {
  static mem_long_t get(const unsigned long&) { return sizeof(unsigned long); }
};
template <> struct trait_size_of<long long> {
  static mem_long_t get(const long long&) { return sizeof(long long); }
};
template <> struct trait_size_of<unsigned long long> {
  static mem_long_t get(const unsigned long long&) { return sizeof(unsigned long long); }
};
template <> struct trait_size_of<float> {
  static mem_long_t get(const float&) { return sizeof(float); }
};
template <> struct trait_size_of<double> {
  static mem_long_t get(const double&) { return sizeof(double); }
};
template <> struct trait_size_of<long double> {
  static mem_long_t get(const long double&) { return sizeof(long double); }
};
template <> struct trait_size_of<bool> {
  static mem_long_t get(const bool&) { return sizeof(bool); }
};
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9933> struct NAG_dco_9934 : public dco::mode<typename NAG_dco_9933::binary_t>::data_t {
  typedef NAG_dco_9933 mode_t;
  static constexpr int gbcp_order = mode_t::gbcp_order;
  static constexpr int order = mode_t::order;
  template <class NAG_dco_9935> DCO_ALWAYS_INLINE void NAG_dco_9936(NAG_dco_9935 const&) {}
  void clear() {}
  NAG_dco_9934() noexcept {}
  NAG_dco_9934(NAG_dco_9934 const&) noexcept {}
  NAG_dco_9934(NAG_dco_9934 const&, NAG_dco_9806) noexcept {}
  NAG_dco_9934& operator=(NAG_dco_9934 const&) { return *this; }
  index_t& _tape_index() const { return static_cast<const typename mode_t::type&>(*this).NAG_dco_9937._tape_index(); }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename NAG_dco_9791, typename NAG_dco_9918>
NAG_dco_9791& create_gbcp(NAG_dco_9918& NAG_dco_9938,
                          std::enable_if_t<!std::is_pointer_v<NAG_dco_9791>, NAG_dco_9791>* = 0) {
  return reinterpret_cast<NAG_dco_9791&>(NAG_dco_9938);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
NAG_dco_9791 create_gbcp(NAG_dco_9918& NAG_dco_9938,
                         std::enable_if_t<std::is_pointer_v<NAG_dco_9791>, NAG_dco_9791>* = 0) {
  return reinterpret_cast<NAG_dco_9791>(&NAG_dco_9938);
}
namespace internal {
template <typename NAG_dco_9791, typename enable_if = void> struct NAG_dco_9939 {
  static constexpr bool value = false;
};
template <typename mode_t> struct NAG_dco_9939<NAG_dco_9934<mode_t>> {
  static constexpr bool value = true;
};
template <typename NAG_dco_9791>
struct NAG_dco_9939<NAG_dco_9791, std::enable_if_t<dco::mode<NAG_dco_9791>::is_dco_type>> {
  static constexpr bool value = NAG_dco_9939<typename dco::mode<NAG_dco_9791>::data_t>::value;
};
template <typename NAG_dco_9791> struct is_gbcp_type {
  static constexpr bool value = NAG_dco_9939<dco::NAG_dco_9888<NAG_dco_9791>>::value;
};
template <typename NAG_dco_9791, int NAG_dco_9778> struct NAG_dco_9940;
template <typename NAG_dco_9791> struct NAG_dco_9940<NAG_dco_9791, 1> {
  typedef typename mode<NAG_dco_9791>::active_value_t& NAG_dco_9809;
  typedef const typename mode<NAG_dco_9791>::active_value_t& NAG_dco_9941;
  static NAG_dco_9809 value(NAG_dco_9791& at) { return at._value(); }
  static NAG_dco_9941 value(const NAG_dco_9791& at) { return at._value(); }
};
template <typename NAG_dco_9791, int NAG_dco_9778> struct NAG_dco_9940 {
  typedef
      typename NAG_dco_9940<typename mode<NAG_dco_9791>::active_value_t, NAG_dco_9778 - 1>::NAG_dco_9809 NAG_dco_9809;
  typedef
      typename NAG_dco_9940<typename mode<NAG_dco_9791>::active_value_t, NAG_dco_9778 - 1>::NAG_dco_9941 NAG_dco_9941;
  static NAG_dco_9809 value(NAG_dco_9791& at) {
    return NAG_dco_9940<typename mode<NAG_dco_9791>::active_value_t, NAG_dco_9778 - 1>::value(at._value());
  }
  static NAG_dco_9941 value(const NAG_dco_9791& at) {
    return NAG_dco_9940<typename mode<NAG_dco_9791>::active_value_t, NAG_dco_9778 - 1>::value(at._value());
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename NAG_dco_9791> inline decltype(auto) value(NAG_dco_9791&& NAG_dco_9778) {
  if constexpr (internal::is_gbcp_type<NAG_dco_9791>::value) {
    return dco::value(NAG_dco_9778._value());
  } else if constexpr (dco::mode<NAG_dco_9791>::is_dco_type) {
    return NAG_dco_9778._value();
  } else if constexpr (internal::NAG_dco_9898<NAG_dco_9791>) {
    return internal::NAG_dco_9823<void, internal::NAG_dco_9814::NAG_dco_9816, NAG_dco_9791>{
        std::forward<NAG_dco_9791>(NAG_dco_9778)};
  } else {
    return std::forward<NAG_dco_9791>(NAG_dco_9778);
  }
}
} // namespace dco

namespace dco {
template <typename NAG_dco_9791> inline decltype(auto) passive_value(NAG_dco_9791&& NAG_dco_9778) {
  if constexpr (dco::mode<NAG_dco_9791>::is_dco_type) {
    return dco::passive_value(NAG_dco_9778._value());
  } else if constexpr (internal::NAG_dco_9898<NAG_dco_9791>) {
    return internal::NAG_dco_9823<void, internal::NAG_dco_9814::NAG_dco_9815, NAG_dco_9791>{
        std::forward<NAG_dco_9791>(NAG_dco_9778)};
  } else {
    return std::forward<NAG_dco_9791>(NAG_dco_9778);
  }
}
} // namespace dco

namespace dco {
template <typename mode_t = void, typename NAG_dco_9791> inline decltype(auto) tangent(NAG_dco_9791&& NAG_dco_9778) {
  if constexpr (internal::is_gbcp_type<NAG_dco_9791>::value) {
    if constexpr (dco::mode<NAG_dco_9791>::order > 0) {
      return dco::tangent(NAG_dco_9778._value());
    } else {
      return 0.0;
    }
  } else if constexpr (dco::mode<NAG_dco_9791>::is_tangent_type) {
    if constexpr (std::is_same_v<mode_t, void>) {
      return NAG_dco_9778.NAG_dco_9942();
    } else {
      return static_cast<typename mode_t::data_t const&>(NAG_dco_9778.data()).NAG_dco_9942();
    }
  } else if constexpr (internal::NAG_dco_9898<NAG_dco_9791>) {
    return internal::NAG_dco_9823<mode_t, internal::NAG_dco_9814::NAG_dco_9818, NAG_dco_9791>{
        std::forward<NAG_dco_9791>(NAG_dco_9778)};
  } else {
    return 0.0;
  }
}
} // namespace dco

namespace dco {
template <typename mode_t = void, typename NAG_dco_9791, typename NAG_dco_9792>
inline decltype(auto) adjoint(NAG_dco_9791&& NAG_dco_9778, NAG_dco_9792& adjoints) {
  if constexpr (internal::is_gbcp_type<NAG_dco_9791>::value) {
    if constexpr (dco::mode<NAG_dco_9791>::order > 0) {
      return dco::adjoint(NAG_dco_9778._value(), adjoints);
    } else {
      return 0.0;
    }
  } else if constexpr (dco::mode<NAG_dco_9791>::is_adjoint_type) {
    if constexpr (std::is_same_v<NAG_dco_9792, void*>) {
      if constexpr (std::is_same_v<mode_t, void>) {
        return NAG_dco_9778._adjoint();
      } else {
        return static_cast<typename mode_t::data_t const&>(NAG_dco_9778.data())._adjoint();
      }
    } else {
      if constexpr (internal::NAG_dco_9900<NAG_dco_9792>) {
        return adjoints.NAG_dco_9943(NAG_dco_9778.data()._tape_index());
      } else {
        if constexpr (internal::NAG_dco_9902<NAG_dco_9792>) {
          return adjoints.derivative(NAG_dco_9778.data())[0];
        } else {
          return adjoints.derivative(NAG_dco_9778.data());
        }
      }
    }
  } else if constexpr (internal::NAG_dco_9898<NAG_dco_9791>) {
    return internal::NAG_dco_9823<mode_t, internal::NAG_dco_9814::NAG_dco_9819, NAG_dco_9791, NAG_dco_9792>{
        std::forward<NAG_dco_9791>(NAG_dco_9778), &adjoints};
  } else {
    return 0.0;
  }
}
template <typename mode_t = void, typename NAG_dco_9791>
inline decltype(auto) adjoint(const NAG_dco_9791& NAG_dco_9778) {
  void* adjoints = nullptr;
  return adjoint<mode_t>(NAG_dco_9778, adjoints);
}
} // namespace dco
namespace dco {
template <typename NAG_dco_9801 = void, typename NAG_dco_9791, typename NAG_dco_9792>
inline decltype(auto) derivative(NAG_dco_9791&& NAG_dco_9778, [[maybe_unused]] NAG_dco_9792& adjoints) {
  if constexpr (internal::is_gbcp_type<NAG_dco_9791>::value) {
    if constexpr (dco::mode<NAG_dco_9791>::order > 0) {
      return dco::derivative<NAG_dco_9801>(NAG_dco_9778._value(), adjoints);
    } else {
      return 0.0;
    }
  } else if constexpr (dco::mode<NAG_dco_9791>::is_dco_type) {
    using mode_t = std::conditional_t<std::is_same_v<NAG_dco_9801, void>, dco::mode<NAG_dco_9791>, NAG_dco_9801>;
    static_assert(!(mode_t::is_tangent_type && mode_t::is_adjoint_type),
                  "dco/c++: dco::derivative() error. The call is ambiguous; please pass mode in addition: "
                  "dco::derivative<mode>(...).");
    if constexpr (mode_t::is_tangent_type) {
      return dco::tangent<mode_t>(NAG_dco_9778);
    } else if constexpr (mode_t::is_adjoint_type) {
      return dco::adjoint<mode_t>(NAG_dco_9778, adjoints);
    } else {
      return NAG_dco_9778.NAG_dco_9944();
    }
  } else if constexpr (internal::NAG_dco_9898<NAG_dco_9791>) {
    return internal::NAG_dco_9823<NAG_dco_9801, internal::NAG_dco_9814::NAG_dco_9817, NAG_dco_9791, NAG_dco_9792>{
        std::forward<NAG_dco_9791>(NAG_dco_9778), &adjoints};
  } else {
    return 0.0;
  }
}
template <typename mode_t = void, typename NAG_dco_9791> inline decltype(auto) derivative(NAG_dco_9791&& NAG_dco_9778) {
  void* adjoints = nullptr;
  return derivative<mode_t>(std::forward<NAG_dco_9791>(NAG_dco_9778), adjoints);
}
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9791, typename = void> struct NAG_dco_9945 : std::false_type {};
template <typename NAG_dco_9791>
struct NAG_dco_9945<NAG_dco_9791, std::void_t<decltype(&std::decay_t<NAG_dco_9791>::tape)>> : std::true_type {};
template <typename NAG_dco_9791, typename = void> struct NAG_dco_9946 : std::false_type {};
template <typename NAG_dco_9791>
struct NAG_dco_9946<NAG_dco_9791, std::void_t<decltype(&std::decay_t<NAG_dco_9791>::_tape_index)>> : std::true_type {};
} // namespace internal
template <typename type> constexpr bool NAG_dco_9947() {
  if constexpr (!dco::mode<type>::is_dco_type) {
    return false;
  } else {
    if constexpr (dco::mode<type>::is_adjoint_type && !internal::NAG_dco_9945<type>::value) {
      return true;
    } else {
      return false;
    }
  }
}
template <typename type> constexpr bool NAG_dco_9948() {
  if constexpr (!dco::mode<type>::is_dco_type) {
    return false;
  } else {
    if constexpr (dco::mode<type>::is_adjoint_type && !internal::NAG_dco_9946<type>::value) {
      return true;
    } else {
      return false;
    }
  }
}
template <typename mode_t = void, typename NAG_dco_9791> inline decltype(auto) tape(const NAG_dco_9791& NAG_dco_9778) {
  if constexpr (internal::NAG_dco_9891<NAG_dco_9791>) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9778.size(); NAG_dco_9862++) {
      if (dco::tape(NAG_dco_9778[NAG_dco_9862]) != 0) {
        return dco::tape(NAG_dco_9778[NAG_dco_9862]);
      }
    }
    return static_cast<decltype(dco::tape(NAG_dco_9778[0]))>(nullptr);
  } else if constexpr (!std::is_same_v<mode_t, void>) {
    auto& data = static_cast<typename mode_t::data_t const&>(NAG_dco_9778.data());
    if constexpr (internal::NAG_dco_9945<decltype(data)>::value) {
      return data.tape();
    } else {
      return nullptr;
    }
  } else {
    static_assert(
        !NAG_dco_9947<NAG_dco_9791>(),
        "dco/c++: dco::tape() error. The call is ambiguous; please pass mode in addition: dco::tape<mode>(...).");
    if constexpr (internal::NAG_dco_9945<NAG_dco_9791>::value) {
      return NAG_dco_9778.tape();
    } else {
      return nullptr;
    }
  }
}
template <typename mode_t = void, typename NAG_dco_9791> inline decltype(auto) tape_index(NAG_dco_9791&& NAG_dco_9778) {
  if constexpr (internal::NAG_dco_9898<NAG_dco_9791>) {
    return internal::NAG_dco_9823<mode_t, internal::NAG_dco_9814::NAG_dco_9820, NAG_dco_9791>{
        std::forward<NAG_dco_9791>(NAG_dco_9778)};
  } else if constexpr (!std::is_same_v<mode_t, void>) {
    auto& data = static_cast<typename mode_t::data_t const&>(NAG_dco_9778.data());
    if constexpr (internal::NAG_dco_9946<decltype(data)>::value) {
      return data._tape_index();
    } else {
      return 0;
    }
  } else {
    static_assert(!NAG_dco_9948<NAG_dco_9791>(), "dco/c++: dco::tape_index() error. The call is ambiguous; please pass "
                                                 "mode in addition: dco::tape_index<mode>(...).");
    if constexpr (internal::NAG_dco_9946<NAG_dco_9791>::value) {
      return NAG_dco_9778._tape_index();
    } else {
      return 0;
    }
  }
}
} // namespace dco

namespace dco {
namespace folding {
template <typename NAG_dco_9791, typename enable_if> struct is_zero_trait {
  static bool get(const NAG_dco_9791& NAG_dco_9778) { return NAG_dco_9778 == 0; }
};
template <typename NAG_dco_9791> bool is_zero(const NAG_dco_9791& NAG_dco_9778) {
  return is_zero_trait<NAG_dco_9791>::get(NAG_dco_9778);
}
template <typename NAG_dco_9791>
struct is_zero_trait<NAG_dco_9791, std::enable_if_t<dco::mode<NAG_dco_9791>::is_tangent_type>> {
  static bool get(const NAG_dco_9791& NAG_dco_9778) {
    return is_zero(value(NAG_dco_9778)) && is_zero(derivative(NAG_dco_9778));
  }
};
template <typename NAG_dco_9791>
struct is_zero_trait<NAG_dco_9791, std::enable_if_t<dco::mode<NAG_dco_9791>::is_adjoint_type>> {
  static bool get(const NAG_dco_9791& NAG_dco_9778) {
    return is_zero(value(NAG_dco_9778)) && !tape_index(NAG_dco_9778);
  }
};
} // namespace folding
} // namespace dco

namespace dco {
template <typename NAG_dco_9833, typename... NAG_dco_9949>
int fprintf(NAG_dco_9833& stream, char const* NAG_dco_9950, NAG_dco_9949&&... NAG_dco_9951) {
  return ::fprintf(stream, NAG_dco_9950, dco::passive_value(NAG_dco_9951)...);
}
template <typename... NAG_dco_9949> int printf(char const* const NAG_dco_9950, NAG_dco_9949&&... NAG_dco_9951) {
  return ::printf(NAG_dco_9950, dco::passive_value(NAG_dco_9951)...);
}
template <typename... NAG_dco_9949>
int sprintf(char* stream, char const* NAG_dco_9950, NAG_dco_9949&&... NAG_dco_9951) {
  return ::sprintf(stream, NAG_dco_9950, dco::passive_value(NAG_dco_9951)...);
}
template <typename... NAG_dco_9949>
int snprintf(char* stream, std::size_t NAG_dco_9952, char const* NAG_dco_9950, NAG_dco_9949&&... NAG_dco_9951) {
  return ::snprintf(stream, NAG_dco_9952, NAG_dco_9950, dco::passive_value(NAG_dco_9951)...);
}
namespace NAG_dco_9953 {
inline void init() {}
template <typename NAG_dco_9791, typename... NAG_dco_9949>
std::enable_if_t<!dco::mode<std::remove_pointer_t<NAG_dco_9791>>::is_dco_type> init(NAG_dco_9791&,
                                                                                    NAG_dco_9949&... NAG_dco_9951);
template <typename NAG_dco_9791, typename... NAG_dco_9949>
std::enable_if_t<dco::mode<std::remove_pointer_t<NAG_dco_9791>>::is_dco_type> init(NAG_dco_9791& NAG_dco_9778,
                                                                                   NAG_dco_9949&... NAG_dco_9951) {
  *NAG_dco_9778 = 0;
  init(NAG_dco_9951...);
}
template <typename NAG_dco_9791, typename... NAG_dco_9949>
std::enable_if_t<!dco::mode<std::remove_pointer_t<NAG_dco_9791>>::is_dco_type> init(NAG_dco_9791&,
                                                                                    NAG_dco_9949&... NAG_dco_9951) {
  init(NAG_dco_9951...);
}
} // namespace NAG_dco_9953
template <typename NAG_dco_9833, typename... NAG_dco_9949>
int sscanf(NAG_dco_9833& stream, char const* NAG_dco_9950, NAG_dco_9949&&... NAG_dco_9951) {
  NAG_dco_9953::init(NAG_dco_9951...);
  return ::sscanf(stream, NAG_dco_9950, &dco::passive_value(*NAG_dco_9951)...);
}
template <typename NAG_dco_9833, typename... NAG_dco_9949>
int fscanf(NAG_dco_9833& stream, char const* NAG_dco_9950, NAG_dco_9949&&... NAG_dco_9951) {
  NAG_dco_9953::init(NAG_dco_9951...);
  return ::fscanf(stream, NAG_dco_9950, &dco::passive_value(*NAG_dco_9951)...);
}
} // namespace dco

namespace dco {
template <typename NAG_dco_9791, typename enable_if = void> struct NAG_dco_9954 {
  static constexpr bool value = false;
  static constexpr std::size_t size = 0;
  using type = void;
};
template <typename NAG_dco_9791>
struct NAG_dco_9954<NAG_dco_9791, std::enable_if_t<(mode<NAG_dco_9791>::vector_size > 0)>> {
  static constexpr bool value = true;
  static constexpr std::size_t size = mode<NAG_dco_9791>::vector_size;
  using type = NAG_dco_9791;
};
template <typename NAG_dco_9791>
struct NAG_dco_9954<NAG_dco_9791,
                    std::enable_if_t<mode<NAG_dco_9791>::is_tangent_type || mode<NAG_dco_9791>::is_adjoint_type>> {
  static constexpr bool value = NAG_dco_9954<typename mode<NAG_dco_9791>::value_t>::value;
  static constexpr std::size_t size = NAG_dco_9954<typename mode<NAG_dco_9791>::value_t>::size;
  using type = typename NAG_dco_9954<typename mode<NAG_dco_9791>::value_t>::type;
};
template <typename TYPE, typename = std::enable_if_t<NAG_dco_9954<TYPE>::value>>
DCO_ALWAYS_INLINE typename mode<TYPE>::type vmask(std::bitset<NAG_dco_9954<TYPE>::size> const& NAG_dco_9955,
                                                  TYPE const& v) {
  typename NAG_dco_9954<TYPE>::type NAG_dco_9956;
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9954<TYPE>::size; ++NAG_dco_9862) {
    NAG_dco_9956[NAG_dco_9862] = NAG_dco_9955[NAG_dco_9862];
  }
  return NAG_dco_9956 * v;
}
template <typename TYPE> DCO_ALWAYS_INLINE typename mode<TYPE>::type vmask(bool const& NAG_dco_9955, TYPE const& v) {
  if (NAG_dco_9955 == false)
    return typename mode<TYPE>::type();
  return v;
}
template <typename TYPE, typename = std::enable_if_t<NAG_dco_9954<TYPE>::value>>
DCO_ALWAYS_INLINE typename mode<TYPE>::type vmask(range_t<NAG_dco_9954<TYPE>::size> const& NAG_dco_9957,
                                                  TYPE const& v) {
  if (NAG_dco_9957.is_last()) {
    typename NAG_dco_9954<TYPE>::type NAG_dco_9956;
    for (auto NAG_dco_9862 : NAG_dco_9957) {
      NAG_dco_9956[NAG_dco_9862.sub_index] = 1.0;
    }
    return NAG_dco_9956 * v;
  }
  return v;
}
template <typename NAG_dco_9812, std::size_t NAG_dco_9813>
void vpack(range_t<NAG_dco_9813> const& NAG_dco_9957, NAG_dco_9812 const* NAG_dco_9778,
           vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813>& NAG_dco_9958) {
  for (auto NAG_dco_9862 : NAG_dco_9957)
    NAG_dco_9958[NAG_dco_9862.sub_index] = NAG_dco_9778[NAG_dco_9862.global_index];
}
template <typename NAG_dco_9812, std::size_t NAG_dco_9813>
void vunpack(range_t<NAG_dco_9813> const& NAG_dco_9957,
             vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813> const& NAG_dco_9958, NAG_dco_9812* NAG_dco_9778) {
  for (auto NAG_dco_9862 : NAG_dco_9957)
    NAG_dco_9778[NAG_dco_9862.global_index] = NAG_dco_9958[NAG_dco_9862.sub_index];
}
template <typename NAG_dco_9812, std::size_t NAG_dco_9813, typename NAG_dco_9959, typename NAG_dco_9960>
void vpack(range_t<NAG_dco_9813> const& NAG_dco_9957,
           internal::active_type<NAG_dco_9812, NAG_dco_9959> const* NAG_dco_9778,
           internal::active_type<vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813>, NAG_dco_9960>& NAG_dco_9958) {
  for (auto NAG_dco_9862 : NAG_dco_9957)
    dco::value(NAG_dco_9958)[NAG_dco_9862.sub_index] = dco::value(NAG_dco_9778[NAG_dco_9862.global_index]);
}
template <typename NAG_dco_9812, std::size_t NAG_dco_9813, typename NAG_dco_9959, typename NAG_dco_9960>
void vunpack(range_t<NAG_dco_9813> const& NAG_dco_9957,
             internal::active_type<vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813>, NAG_dco_9960> const& NAG_dco_9958,
             internal::active_type<NAG_dco_9812, NAG_dco_9959>* NAG_dco_9778) {
  for (auto NAG_dco_9862 : NAG_dco_9957)
    dco::value(NAG_dco_9778[NAG_dco_9862.global_index]) = dco::value(NAG_dco_9958)[NAG_dco_9862.sub_index];
}
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9801, NAG_dco_9814 NAG_dco_9821, typename NAG_dco_9822, typename NAG_dco_9792>
struct NAG_dco_9823 {
private:
  NAG_dco_9822 NAG_dco_9961;
  NAG_dco_9792* NAG_dco_9962 = nullptr;
  template <typename NAG_dco_9918>
  static decltype(auto) get(NAG_dco_9918&& NAG_dco_9778, [[maybe_unused]] NAG_dco_9792* adjoints) {
    if constexpr (NAG_dco_9821 == NAG_dco_9814::NAG_dco_9815) {
      return dco::passive_value(NAG_dco_9778);
    } else if constexpr (NAG_dco_9821 == NAG_dco_9814::NAG_dco_9816) {
      return dco::value(NAG_dco_9778);
    } else if constexpr (NAG_dco_9821 == NAG_dco_9814::NAG_dco_9817) {
      if constexpr (std::is_same_v<NAG_dco_9792, void*>) {
        return dco::derivative<NAG_dco_9801>(NAG_dco_9778);
      } else {
        return dco::derivative<NAG_dco_9801>(NAG_dco_9778, *adjoints);
      }
    } else if constexpr (NAG_dco_9821 == NAG_dco_9814::NAG_dco_9818) {
      return dco::tangent<NAG_dco_9801>(NAG_dco_9778);
    } else if constexpr (NAG_dco_9821 == NAG_dco_9814::NAG_dco_9819) {
      if constexpr (std::is_same_v<NAG_dco_9792, void*>) {
        return dco::adjoint<NAG_dco_9801>(NAG_dco_9778);
      } else {
        return dco::adjoint<NAG_dco_9801>(NAG_dco_9778, *adjoints);
      }
    } else if constexpr (NAG_dco_9821 == NAG_dco_9814::NAG_dco_9820) {
      return dco::tape_index<NAG_dco_9801>(NAG_dco_9778);
    }
  }

public:
  NAG_dco_9823(NAG_dco_9822&& NAG_dco_9869) : NAG_dco_9961(std::forward<NAG_dco_9822>(NAG_dco_9869)) {}
  NAG_dco_9823(NAG_dco_9822&& NAG_dco_9869, NAG_dco_9792* adjoints)
      : NAG_dco_9961(std::forward<NAG_dco_9822>(NAG_dco_9869)), NAG_dco_9962(adjoints) {
    static_assert(NAG_dco_9821 == NAG_dco_9814::NAG_dco_9817 || NAG_dco_9821 == NAG_dco_9814::NAG_dco_9819);
  }
  template <typename NAG_dco_9918> NAG_dco_9823 operator=(NAG_dco_9918 const& NAG_dco_9963) const {
    static_assert(std::is_assignable_v<decltype(get(NAG_dco_9961[0], NAG_dco_9962)), NAG_dco_9918 const&>,
                  "dco/c++: Assignment error with vectors. Not assignable.");
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9961.size(); ++NAG_dco_9862) {
      get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962) = NAG_dco_9963;
    }
    return *this;
  }
  template <typename NAG_dco_9918> NAG_dco_9823& operator=(const std::vector<NAG_dco_9918>& NAG_dco_9963) {
    static_assert(std::is_assignable_v<decltype(get(NAG_dco_9961[0], NAG_dco_9962)), NAG_dco_9918 const&>,
                  "dco/c++: Assignment error with vectors. Not assignable.");
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9961.size(); ++NAG_dco_9862) {
      get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962) = NAG_dco_9963[NAG_dco_9862];
    }
    return *this;
  }
  template <typename NAG_dco_9964, NAG_dco_9814 NAG_dco_9965, typename NAG_dco_9966, typename NAG_dco_9967>
  NAG_dco_9823& operator=(const NAG_dco_9823<NAG_dco_9964, NAG_dco_9965, NAG_dco_9966, NAG_dco_9967>& NAG_dco_9963) {
    static_assert(std::is_assignable_v<decltype(get(NAG_dco_9961[0], NAG_dco_9962)), decltype(NAG_dco_9963[0])>,
                  "dco/c++: Assignment error with vectors. Not assignable.");
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9961.size(); ++NAG_dco_9862) {
      get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962) = NAG_dco_9963[NAG_dco_9862];
    }
    return *this;
  }
  template <typename NAG_dco_9918> NAG_dco_9823& operator+=(const NAG_dco_9918& NAG_dco_9963) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9961.size(); ++NAG_dco_9862) {
      get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962) += NAG_dco_9963;
    }
    return *this;
  }
  template <typename NAG_dco_9918> NAG_dco_9823& operator+=(const std::vector<NAG_dco_9918>& NAG_dco_9963) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9961.size(); ++NAG_dco_9862) {
      get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962) += NAG_dco_9963[NAG_dco_9862];
    }
    return *this;
  }
  template <typename NAG_dco_9964, NAG_dco_9814 NAG_dco_9965, typename NAG_dco_9966, typename NAG_dco_9967>
  NAG_dco_9823& operator+=(const NAG_dco_9823<NAG_dco_9964, NAG_dco_9965, NAG_dco_9966, NAG_dco_9967>& NAG_dco_9963) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9961.size(); ++NAG_dco_9862) {
      get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962) += NAG_dco_9963[NAG_dco_9862];
    }
    return *this;
  }
  template <typename NAG_dco_9755> operator std::vector<NAG_dco_9755>() const {
    static_assert(std::is_assignable_v<NAG_dco_9755&, decltype(get(NAG_dco_9961[0], NAG_dco_9962))>,
                  "dco/c++: Cannot transform into required std::vector type.");
    std::vector<NAG_dco_9755> NAG_dco_9849(NAG_dco_9961.size());
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9961.size(); ++NAG_dco_9862) {
      NAG_dco_9849[NAG_dco_9862] = get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962);
    }
    return NAG_dco_9849;
  }
  template <typename NAG_dco_9968> class iterator_t {
  private:
    NAG_dco_9968 NAG_dco_9969;
    NAG_dco_9792* NAG_dco_9962 = nullptr;

  public:
    iterator_t(NAG_dco_9968&& NAG_dco_9970, NAG_dco_9792* adjoints)
        : NAG_dco_9969(std::move(NAG_dco_9970)), NAG_dco_9962(adjoints) {}
    using NAG_dco_9971 = std::ptrdiff_t;
    using NAG_dco_9972 = std::bidirectional_iterator_tag;
    using value_type = std::remove_reference_t<decltype(get(*NAG_dco_9969, NAG_dco_9962))>;
    using NAG_dco_9973 = value_type*;
    using reference = value_type&;
    iterator_t& operator++() {
      NAG_dco_9969++;
      return *this;
    }
    iterator_t operator++(int) {
      iterator_t NAG_dco_9974(*this);
      NAG_dco_9969++;
      return NAG_dco_9974;
    }
    iterator_t& operator--() {
      NAG_dco_9969--;
      return *this;
    }
    iterator_t operator--(int) {
      iterator_t NAG_dco_9974(*this);
      NAG_dco_9969--;
      return NAG_dco_9974;
    }
    bool operator==(iterator_t const& NAG_dco_9975) const { return NAG_dco_9969 == NAG_dco_9975.NAG_dco_9969; }
    bool operator!=(iterator_t const& NAG_dco_9975) const { return !(*this == NAG_dco_9975); }
    reference operator*() { return get(*NAG_dco_9969, NAG_dco_9962); }
    NAG_dco_9973 operator->() { return &get(*NAG_dco_9969, NAG_dco_9962); }
  };
  template <typename NAG_dco_9968> auto NAG_dco_9976(NAG_dco_9968&& NAG_dco_9970, NAG_dco_9792* adjoints) {
    return iterator_t<NAG_dco_9968>(std::move(NAG_dco_9970), adjoints);
  }
  auto begin() { return NAG_dco_9976(NAG_dco_9961.begin(), NAG_dco_9962); }
  auto end() { return NAG_dco_9976(NAG_dco_9961.end(), NAG_dco_9962); }
  auto cbegin() { return NAG_dco_9976(NAG_dco_9961.cbegin(), NAG_dco_9962); }
  auto cend() { return NAG_dco_9976(NAG_dco_9961.cend(), NAG_dco_9962); }
  decltype(auto) operator[](std::size_t NAG_dco_9862) { return get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962); }
  decltype(auto) operator[](std::size_t NAG_dco_9862) const { return get(NAG_dco_9961[NAG_dco_9862], NAG_dco_9962); }
  std::size_t size() const { return NAG_dco_9961.size(); }
};
template <typename NAG_dco_9801, NAG_dco_9814 NAG_dco_9821, typename NAG_dco_9822, typename NAG_dco_9792>
static inline std::ostream&
operator<<(std::ostream& out,
           const NAG_dco_9823<NAG_dco_9801, NAG_dco_9821, NAG_dco_9822, NAG_dco_9792>& NAG_dco_9778) {
  out << "(";
  for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9778.size(); ++NAG_dco_9862) {
    out << NAG_dco_9778[NAG_dco_9862];
    if (NAG_dco_9862 != NAG_dco_9778.size() - 1) {
      out << ";";
    }
  }
  out << ")";
  return out;
}
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
struct interpretation_settings {
  bool reset;
  bool NAG_dco_9977;
  interpretation_settings(bool NAG_dco_9978 = false, bool NAG_dco_9979 = false)
      : reset(NAG_dco_9978), NAG_dco_9977(NAG_dco_9979) {}
};
} // namespace internal
} // namespace dco

namespace dco {
template <class NAG_dco_9757> struct adjoint_vector_abstract;
template <typename NAG_dco_9757> struct NAG_dco_9980 {
  adjoint_vector_abstract<NAG_dco_9757>& adjoints;
  index_t NAG_dco_9826;
  NAG_dco_9980(adjoint_vector_abstract<NAG_dco_9757>& adjoints, index_t NAG_dco_9826)
      : adjoints(adjoints), NAG_dco_9826(NAG_dco_9826) {}
  operator NAG_dco_9757() const { return adjoints._read_adjoint(NAG_dco_9826); }
  template <typename NAG_dco_9791> NAG_dco_9980& operator+=(NAG_dco_9791 const& NAG_dco_9981) {
    adjoints._increment_adjoint(NAG_dco_9826, NAG_dco_9981);
    return *this;
  }
};
template <class NAG_dco_9757> struct adjoint_vector_abstract {
  virtual ~adjoint_vector_abstract() {};
  NAG_dco_9980<NAG_dco_9757> NAG_dco_9943(const index_t NAG_dco_9826) {
    return NAG_dco_9980<NAG_dco_9757>(*this, NAG_dco_9826);
  }
  virtual NAG_dco_9757 _read_adjoint(const index_t NAG_dco_9826) = 0;
  virtual void _increment_adjoint(const index_t NAG_dco_9826, const NAG_dco_9757& NAG_dco_9982) = 0;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9807> class NAG_dco_9983 {
protected:
  NAG_dco_9807& NAG_dco_9984;

public:
  NAG_dco_9983(NAG_dco_9807& NAG_dco_9985) : NAG_dco_9984(NAG_dco_9985) {}
  NAG_dco_9807& NAG_dco_9985() { return NAG_dco_9984; }
};
} // namespace internal
} // namespace dco
namespace dco {
template <class NAG_dco_9807, class NAG_dco_9757, int NAG_dco_9808>
struct adjoint_vector : dco::adjoint_vector_abstract<typename NAG_dco_9807::tape_t::NAG_dco_9759>,
                        public internal::NAG_dco_9983<NAG_dco_9807> {
  static const std::size_t vecsize =
      NAG_dco_9808 < 0 ? static_cast<std::size_t>(-NAG_dco_9808) : static_cast<std::size_t>(NAG_dco_9808);
  typedef internal::NAG_dco_9983<NAG_dco_9807> NAG_dco_9986;

public:
  typedef dco::helper::valvec<NAG_dco_9757, vecsize> value_t;
  typedef NAG_dco_9757 NAG_dco_9987;
  typedef typename NAG_dco_9807::NAG_dco_9759 NAG_dco_9759;

private:
  std::vector<value_t> NAG_dco_9962;
  index_t NAG_dco_9988;

public:
  int NAG_dco_9989;
  void init() {}
  adjoint_vector(NAG_dco_9807* tape) : NAG_dco_9986(*tape), NAG_dco_9988(0), NAG_dco_9989(0) {}
  virtual ~adjoint_vector() {}
  template <class NAG_dco_9805> value_t& derivative(const NAG_dco_9805& NAG_dco_9990) {
    NAG_dco_9991();
    const index_t NAG_dco_9826 = NAG_dco_9990._tape_index();
    return NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)];
  }
  void interpret_adjoint() {
    typename NAG_dco_9807::iterator NAG_dco_9848 = NAG_dco_9986::NAG_dco_9985().start();
    internal::interpretation_settings NAG_dco_9992;
    NAG_dco_9993(NAG_dco_9986::NAG_dco_9985().current(), NAG_dco_9848, NAG_dco_9992);
  }
  void interpret_adjoint_to(const typename NAG_dco_9807::iterator& NAG_dco_9848) {
    internal::interpretation_settings NAG_dco_9992;
    if (NAG_dco_9848 > NAG_dco_9986::NAG_dco_9985().current())
      throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.");
    else
      NAG_dco_9993(NAG_dco_9986::NAG_dco_9985().current(), NAG_dco_9848, NAG_dco_9992);
  }
  void interpret_adjoint_from(const typename NAG_dco_9807::iterator& NAG_dco_9847) {
    typename NAG_dco_9807::iterator NAG_dco_9848 = NAG_dco_9986::NAG_dco_9985().start();
    assert(!(NAG_dco_9847 < NAG_dco_9848));
    typename internal::interpretation_settings NAG_dco_9992;
    NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992);
  }
  void interpret_adjoint_from_to(const typename NAG_dco_9807::iterator& NAG_dco_9847,
                                 const typename NAG_dco_9807::iterator& NAG_dco_9848) {
    typename internal::interpretation_settings NAG_dco_9992;
    if (NAG_dco_9848 > NAG_dco_9847)
      throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.");
    else
      NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992);
  }
  void interpret_adjoint_and_zero_adjoints_to(const typename NAG_dco_9807::iterator& NAG_dco_9848) {
    typename NAG_dco_9807::iterator NAG_dco_9847(NAG_dco_9986::NAG_dco_9985().current());
    typename internal::interpretation_settings NAG_dco_9992;
    NAG_dco_9992.reset = false;
    NAG_dco_9992.NAG_dco_9977 = true;
    NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992);
  }
  void interpret_adjoint_and_zero_adjoints_from_to(const typename NAG_dco_9807::iterator& NAG_dco_9847,
                                                   const typename NAG_dco_9807::iterator& NAG_dco_9848) {
    typename internal::interpretation_settings NAG_dco_9992;
    NAG_dco_9992.reset = false;
    NAG_dco_9992.NAG_dco_9977 = true;
    NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992);
  }
  void zero_adjoints() {
    typename NAG_dco_9807::iterator NAG_dco_9848 = NAG_dco_9986::NAG_dco_9985().start();
    NAG_dco_9994(NAG_dco_9986::NAG_dco_9985().current(), NAG_dco_9848);
  }
  void zero_adjoints_to(const typename NAG_dco_9807::iterator& NAG_dco_9848) {
    NAG_dco_9994(NAG_dco_9986::NAG_dco_9985().current(), NAG_dco_9848);
  }
  void zero_adjoints_from(const typename NAG_dco_9807::iterator& NAG_dco_9847) {
    typename NAG_dco_9807::iterator NAG_dco_9848 = NAG_dco_9986::NAG_dco_9985().start();
    NAG_dco_9994(NAG_dco_9847, NAG_dco_9848);
  }
  void zero_adjoints_from_to(const typename NAG_dco_9807::iterator& NAG_dco_9847,
                             const typename NAG_dco_9807::iterator& NAG_dco_9848) {
    NAG_dco_9994(NAG_dco_9847, NAG_dco_9848);
  }
  value_t& operator[](index_t NAG_dco_9826) { return NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)]; }
  value_t at(index_t NAG_dco_9826) const {
    return (NAG_dco_9826 < NAG_dco_9988) ? NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)] : 0;
  }
  value_t& at(index_t NAG_dco_9826) {
    NAG_dco_9995(NAG_dco_9826);
    return NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)];
  }
  void NAG_dco_9995(index_t NAG_dco_9826) { NAG_dco_9991(NAG_dco_9826 + 1); }
  void NAG_dco_9996(typename NAG_dco_9807::iterator& NAG_dco_9841) {
    (*this)[NAG_dco_9841->arg()] += NAG_dco_9841->pval() * (*this)[NAG_dco_9841.index()];
  }
  value_t& NAG_dco_9997(const index_t NAG_dco_9826) { return NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)]; }
  NAG_dco_9757& NAG_dco_9997(const index_t NAG_dco_9826, int NAG_dco_9998) {
    return NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)][static_cast<std::size_t>(NAG_dco_9998)];
  }
  template <class NAG_dco_9999>
  void _increment_adjoint(const index_t& NAG_dco_9826, const NAG_dco_9999& NAG_dco_10000, const value_t& NAG_dco_9982) {
    NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)] += (NAG_dco_10000 * NAG_dco_9982);
  }
  virtual typename NAG_dco_9807::NAG_dco_9759 _read_adjoint(const index_t NAG_dco_9826) {
    return static_cast<typename NAG_dco_9807::NAG_dco_9759>(
        NAG_dco_9997(NAG_dco_9826)[static_cast<std::size_t>(NAG_dco_9989)]);
  }
  virtual void _increment_adjoint(const index_t NAG_dco_9826, const typename NAG_dco_9807::NAG_dco_9759& NAG_dco_9982) {
    NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)][static_cast<std::size_t>(NAG_dco_9989)] +=
        static_cast<NAG_dco_9987>(NAG_dco_9982);
  }
  void NAG_dco_9994(const typename NAG_dco_9807::iterator& NAG_dco_9847,
                    const typename NAG_dco_9807::iterator& NAG_dco_9848) {
    NAG_dco_10001(NAG_dco_9847.index(), NAG_dco_9848.index());
  }
  void NAG_dco_10001(index_t NAG_dco_9847, index_t NAG_dco_9848) {
    if (NAG_dco_9847 < NAG_dco_9848) {
      std::swap(NAG_dco_9847, NAG_dco_9848);
    }
    if (NAG_dco_9962.size() == 0) {
      return;
    }
    for (index_t NAG_dco_9862 = NAG_dco_9848 + 1; NAG_dco_9862 <= NAG_dco_9847; NAG_dco_9862++) {
      NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9862)] = 0;
    }
  }
  void NAG_dco_9993(const typename NAG_dco_9807::iterator& NAG_dco_9847,
                    const typename NAG_dco_9807::iterator& NAG_dco_9848,
                    typename internal::interpretation_settings NAG_dco_9992) {
    NAG_dco_9991();
    NAG_dco_9986::NAG_dco_9985().NAG_dco_10002(*this, *this, NAG_dco_9847, NAG_dco_9848, NAG_dco_9992,
                                               [](dco::index_t, value_t) noexcept {});
  }
  void NAG_dco_9991(index_t NAG_dco_10003 = -1) {
    index_t NAG_dco_10004;
    if (NAG_dco_10003 != -1)
      NAG_dco_10004 = NAG_dco_10003;
    else
      NAG_dco_10004 = NAG_dco_9986::NAG_dco_9985().current().index() + 1;
    if (static_cast<std::size_t>(NAG_dco_10004) > NAG_dco_9962.size()) {
      NAG_dco_9988 = NAG_dco_10004;
      NAG_dco_9962.resize(static_cast<std::size_t>(NAG_dco_9988));
    }
  }
  decltype(auto) begin() { return NAG_dco_9962.begin(); }
  decltype(auto) end() { return NAG_dco_9962.end(); }
};
} // namespace dco

namespace dco {
namespace internal {
template <memory_model::TYPE memory_model, typename NAG_dco_9804,
          memory_model::TYPE NAG_dco_10005 = memory_model::NAG_dco_9773>
class NAG_dco_10006 {};
} // namespace internal
} // namespace dco

namespace dco {
class tape_options {
private:
  std::size_t NAG_dco_10007 = 128 * 1024 * 1024, NAG_dco_10008 = 0;
  bool NAG_dco_10009 = false;
  std::string NAG_dco_10010 = "dco_tape_data.bin";
  bool NAG_dco_10011 = false;
  bool NAG_dco_10012 = false;

public:
  bool operator==(const tape_options& NAG_dco_9975) {
    return NAG_dco_10007 == NAG_dco_9975.NAG_dco_10007 && NAG_dco_10008 == NAG_dco_9975.NAG_dco_10008 &&
           NAG_dco_10009 == NAG_dco_9975.NAG_dco_10009 && NAG_dco_10011 == NAG_dco_9975.NAG_dco_10011 &&
           NAG_dco_10010 == NAG_dco_9975.NAG_dco_10010 && NAG_dco_10012 == NAG_dco_9975.NAG_dco_10012;
  }
  bool operator!=(const tape_options& NAG_dco_9975) { return !operator==(NAG_dco_9975); }
  [[deprecated("Use chunk_size_in_byte() instead")]] index_t chunk_size() const {
    if (helper::NAG_dco_9851) {
      throw dco::exception::create<std::runtime_error>("chunk_size removed; use chunk_size_in_byte() instead");
    }
    return -1;
  }
  std::size_t chunk_size_in_byte() const { return NAG_dco_10007; }
  std::size_t& chunk_size_in_byte() { return NAG_dco_10007; }
  void set_chunk_size_in_byte(mem_long_t size) {
    if (static_cast<double>(size) / static_cast<double>(std::numeric_limits<std::size_t>::max()) > 1.0) {
      DCO_LOG(logWARNING) << "set_chunk_size: requesting too much memory for your system (std::size_t too small). "
                             "Resetting to std::numeric_limits<std::size_t>::max()";
      NAG_dco_10007 = std::numeric_limits<std::size_t>::max();
    } else {
      NAG_dco_10007 = static_cast<std::size_t>(size);
    }
  }
  void set_chunk_size_in_kbyte(double size) { set_chunk_size_in_byte(1024 * static_cast<mem_long_t>(size)); }
  void set_chunk_size_in_mbyte(double size) { set_chunk_size_in_kbyte(1024. * size); }
  void set_chunk_size_in_gbyte(double size) { set_chunk_size_in_mbyte(1024. * size); }
  std::size_t blob_size_in_byte() const { return NAG_dco_10008; }
  std::size_t& blob_size_in_byte() { return NAG_dco_10008; }
  void set_blob_size_in_byte(mem_long_t size) {
    if (static_cast<double>(size) / static_cast<double>(std::numeric_limits<std::size_t>::max()) > 1.0) {
      DCO_LOG(logWARNING) << "set_blob_size: requesting too much memory for your system (std::size_t too small). "
                             "Resetting to std::numeric_limits<std::size_t>::max()";
      NAG_dco_10008 = std::numeric_limits<std::size_t>::max();
    } else {
      NAG_dco_10008 = static_cast<std::size_t>(size);
    }
  }
  void set_blob_size_in_kbyte(double size) { set_blob_size_in_byte(1024 * static_cast<mem_long_t>(size)); }
  void set_blob_size_in_mbyte(double size) { set_blob_size_in_kbyte(1024. * size); }
  void set_blob_size_in_gbyte(double size) { set_blob_size_in_mbyte(1024. * size); }
  bool& deallocation_on_reset() { return NAG_dco_10009; }
  const bool& deallocation_on_reset() const { return NAG_dco_10009; }
  std::string& filename() { return NAG_dco_10010; }
  const std::string& filename() const { return NAG_dco_10010; }
  bool& write_to_file() { return NAG_dco_10011; }
  bool write_to_file() const { return NAG_dco_10011; }
  bool& alloc_use_huge_pages() { return NAG_dco_10012; }
  bool alloc_use_huge_pages() const { return NAG_dco_10012; }
};
} // namespace dco
namespace dco {
namespace internal {
template <typename NAG_dco_10013 = void, typename NAG_dco_9804 = void>
struct jacobian_preaccumulator_t : adjoint_vector_abstract<typename NAG_dco_9804::NAG_dco_9987> {
  typedef typename NAG_dco_9804::NAG_dco_9987 NAG_dco_9759;
  typedef NAG_dco_9759 NAG_dco_9987;
  using tape_t = NAG_dco_9804;
  typedef typename tape_t::iterator_t NAG_dco_10014;
  typedef typename tape_t::edge_inserter NAG_dco_10015;
  tape_t* const NAG_dco_10016;
  NAG_dco_10014 NAG_dco_10017;
  index_t NAG_dco_10018;
  typedef adjoint_vector_lazy<NAG_dco_9759, tape_t> vector_t;
  vector_t NAG_dco_9962;
  bool NAG_dco_10019;
  bool NAG_dco_10020;
  std::map<index_t, NAG_dco_9759> NAG_dco_10021;
  void init() {}
  typedef NAG_dco_10006<memory_model::BLOB_TAPE, tape_t> NAG_dco_9893;
  typedef typename NAG_dco_9893::edge_inserter NAG_dco_10022;
  typedef typename NAG_dco_9893::iterator NAG_dco_10023;
  NAG_dco_9893* NAG_dco_9984;
  NAG_dco_10022* NAG_dco_10024;
  typedef typename NAG_dco_10013::data_t NAG_dco_10025;
  std::vector<NAG_dco_10025*> NAG_dco_10026;
  index_t NAG_dco_9989;
  bool& merge_edges() { return NAG_dco_10020; }
  jacobian_preaccumulator_t(tape_t* const tape)
      : NAG_dco_10016(tape), NAG_dco_9962(0, *tape, tape->NAG_dco_10027()), NAG_dco_10020(false), NAG_dco_9984(0),
        NAG_dco_10024(0), NAG_dco_9989(0) {
    if (NAG_dco_10016) {
      NAG_dco_10017 = NAG_dco_10016->get_position();
      NAG_dco_10018 = NAG_dco_10017.index();
      NAG_dco_10019 = true;
    } else {
      NAG_dco_10019 = false;
    }
  }
  ~jacobian_preaccumulator_t() {
    if (NAG_dco_10019)
      this->finish();
    if (NAG_dco_9984)
      delete NAG_dco_9984;
  }
  void start() {
    if (NAG_dco_10016) {
      NAG_dco_10017 = NAG_dco_10016->get_position();
      NAG_dco_10018 = NAG_dco_10017.index();
      NAG_dco_10019 = true;
    } else {
      NAG_dco_10019 = false;
    }
  }
  void NAG_dco_10028(NAG_dco_10013& NAG_dco_9778) {
    if (!dco::tape_index(NAG_dco_9778))
      return;
    if (dco::tape_index(NAG_dco_9778) && dco::tape_index(NAG_dco_9778) <= NAG_dco_10018) {
      throw dco::exception::create<std::runtime_error>("jacobian_preaccumulator_t: registering output, which is indeed "
                                                       "an input (was alive already before starting point).");
    }
    NAG_dco_10026.push_back(&static_cast<NAG_dco_10025&>(NAG_dco_9778));
  }
  void register_output(NAG_dco_10013& NAG_dco_9778) {
    if (NAG_dco_10016) {
      NAG_dco_10028(NAG_dco_9778);
    }
  }
  void register_output(std::vector<NAG_dco_10013>& NAG_dco_9778) {
    if (NAG_dco_10016) {
      NAG_dco_10026.reserve(NAG_dco_10026.size() + NAG_dco_9778.size());
      for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9778.size(); ++NAG_dco_9862) {
        NAG_dco_10028(NAG_dco_9778[NAG_dco_9862]);
      }
    }
  }
  void finish() {
    if (!NAG_dco_10019)
      return;
    NAG_dco_10019 = false;
    if (!NAG_dco_10016)
      return;
    if (!NAG_dco_10026.size()) {
      NAG_dco_10016->reset_to(NAG_dco_10017);
      return;
    }
    const NAG_dco_10014 NAG_dco_10029 = NAG_dco_10016->get_position();
    const index_t NAG_dco_10030 = NAG_dco_10029.index() - NAG_dco_10017.index();
    NAG_dco_9962.resize(NAG_dco_10030 + 1);
    const index_t NAG_dco_10031 = NAG_dco_10016->size(NAG_dco_10029, NAG_dco_10017);
    const index_t NAG_dco_10032 = NAG_dco_10031 * (1 + static_cast<index_t>(NAG_dco_10026.size()));
    if (NAG_dco_9984)
      delete NAG_dco_9984;
    tape_options NAG_dco_9767;
    NAG_dco_9767.blob_size_in_byte() = static_cast<std::size_t>(NAG_dco_10032) * NAG_dco_9893::entry::size_of();
    NAG_dco_9984 = new NAG_dco_9893(NAG_dco_9767, *NAG_dco_10016);
    NAG_dco_9984->current_ref().index() = NAG_dco_10029.index();
    NAG_dco_9962.NAG_dco_10033();
    for (auto& NAG_dco_9970 : NAG_dco_10026) {
      NAG_dco_10025& NAG_dco_9841 = *NAG_dco_9970;
      if (NAG_dco_9841._tape_index() == 0)
        continue;
      NAG_dco_9962.NAG_dco_10001(NAG_dco_10030 - 1, 0);
      NAG_dco_9997(NAG_dco_9841._tape_index()) = 1.0;
      NAG_dco_10024 = new NAG_dco_10022(NAG_dco_9984->current_ref());
      if (NAG_dco_10020) {
        NAG_dco_10021.clear();
      }
      NAG_dco_10016->NAG_dco_10002(*this, *this, NAG_dco_10029, NAG_dco_10017, interpretation_settings(false, true),
                                   [](index_t, typename tape_t::NAG_dco_9759) noexcept {});
      if (NAG_dco_10020) {
        for (auto& [NAG_dco_9826, NAG_dco_9982] : std::as_const(NAG_dco_10021)) {
          NAG_dco_10024->insert(NAG_dco_9826, NAG_dco_9982);
        }
      }
      delete NAG_dco_10024;
    }
    NAG_dco_10016->reset_to(NAG_dco_10017);
    NAG_dco_10023 NAG_dco_10034 = NAG_dco_9984->current();
    for (auto NAG_dco_9970 = NAG_dco_10026.rbegin(); NAG_dco_9970 != NAG_dco_10026.rend(); ++NAG_dco_9970) {
      NAG_dco_10015 NAG_dco_10035(NAG_dco_10016->current_ref());
      for (;; --NAG_dco_10034) {
        NAG_dco_10035.insert(NAG_dco_10034->arg(), NAG_dco_10034->pval());
        if (NAG_dco_10034->is_sentinel())
          break;
      }
      --NAG_dco_10034;
      (*NAG_dco_9970)->_tape_index() = NAG_dco_10035.index();
    }
    NAG_dco_10026.clear();
  }
  NAG_dco_9759& NAG_dco_9997(const index_t NAG_dco_9826) { return NAG_dco_9962[NAG_dco_9826 - NAG_dco_10018]; }
  template <class NAG_dco_9999>
  void _increment_adjoint(const index_t& NAG_dco_9826, const NAG_dco_9999& NAG_dco_10000,
                          const NAG_dco_9759& NAG_dco_9982) {
    _increment_adjoint(NAG_dco_9826, NAG_dco_10000 * NAG_dco_9982);
  }
  void NAG_dco_10001(index_t NAG_dco_9847, index_t NAG_dco_9848) {
    NAG_dco_9962.NAG_dco_10001(NAG_dco_9847, NAG_dco_9848);
  }
  void NAG_dco_9995(index_t NAG_dco_9826) { NAG_dco_9962.NAG_dco_9995(NAG_dco_9826 - NAG_dco_10018); }
  NAG_dco_9759& operator[](const index_t NAG_dco_9826) { return NAG_dco_9962[NAG_dco_9826 - NAG_dco_10018]; }
  template <typename iterator_t> void NAG_dco_9996(iterator_t& NAG_dco_9841) {
    _increment_adjoint(NAG_dco_9841->arg(), NAG_dco_9841->pval() * (*this)[NAG_dco_9841.index()]);
  }
  virtual NAG_dco_9759 _read_adjoint(const index_t NAG_dco_9826) { return NAG_dco_9962[NAG_dco_9826 - NAG_dco_10018]; }
  virtual void _increment_adjoint(const index_t NAG_dco_9826, const NAG_dco_9759& NAG_dco_9982) {
    if (NAG_dco_9982 == 0)
      return;
    if (NAG_dco_9826 <= NAG_dco_10018) {
      if (NAG_dco_10020 == false) {
        NAG_dco_10024->insert(NAG_dco_9826, NAG_dco_9982);
      } else {
        NAG_dco_10021[NAG_dco_9826] += NAG_dco_9982;
      }
    } else {
      NAG_dco_9997(NAG_dco_9826) += NAG_dco_9982;
    }
  }
};
template <> struct jacobian_preaccumulator_t<void, void> {
  jacobian_preaccumulator_t(void*) {}
  void start() {}
  template <typename NAG_dco_9791> void register_output(const NAG_dco_9791&) {}
  void finish() {}
};
} // namespace internal
template <typename NAG_dco_9791, memory_model::TYPE MEMORY_MODEL, typename NAG_dco_10036,
          memory_model::TYPE NAG_dco_9800, typename NAG_dco_9801>
auto make_jacobian_preaccumulator(internal::tape<MEMORY_MODEL, NAG_dco_10036, NAG_dco_9800, NAG_dco_9801>* tape) {
  using tape_t = std::remove_pointer_t<decltype(tape)>;
  return internal::jacobian_preaccumulator_t<NAG_dco_9791, tape_t>(tape);
}
template <typename NAG_dco_9791, typename NAG_dco_9801>
auto make_jacobian_preaccumulator(internal::smart_tape_ptr_t<NAG_dco_9801>& tape) {
  return internal::jacobian_preaccumulator_t<NAG_dco_9791, typename NAG_dco_9801::tape_t>(tape);
}
template <typename NAG_dco_9791> auto make_jacobian_preaccumulator(NAG_dco_9811* tape) {
  return internal::jacobian_preaccumulator_t<>(tape);
}
} // namespace dco

namespace dco {
namespace helper {
template <typename, typename NAG_dco_9890> struct NAG_dco_10037 {
  NAG_dco_10037(NAG_dco_9890*) {}
  template <typename NAG_dco_9791> void register_input(const NAG_dco_9791&) {}
  template <typename NAG_dco_9791> void register_output(const NAG_dco_9791&) {}
};
} // namespace helper
} // namespace dco

namespace dco {
namespace helper {
template <typename NAG_dco_10038> class NAG_dco_10039 {
  template <memory_model::TYPE, typename, memory_model::TYPE, typename> friend class internal::tape;
  typedef typename NAG_dco_10038::NAG_dco_9987 NAG_dco_9759;

protected:
  NAG_dco_10038* NAG_dco_10040;

public:
  virtual ~NAG_dco_10039() {}
  dco::adjoint_vector_abstract<NAG_dco_9759>* _adjoint_vector;

public:
  void set_tape(NAG_dco_10038* NAG_dco_10041) {
    if (NAG_dco_10040 != 0) {
      return;
    } else {
      NAG_dco_10040 = NAG_dco_10041;
    }
  }
  void NAG_dco_10042() {}
  inline NAG_dco_10038* get_tape() { return NAG_dco_10040; }
  NAG_dco_10039() : NAG_dco_10040(0) {}
  virtual void NAG_dco_10043(NAG_dco_9873&, index_t) {}
  virtual mem_long_t size_in_byte() { return sizeof(NAG_dco_10038); }
};
} // namespace helper
} // namespace dco

namespace dco {
namespace helper {
template <class NAG_dco_10044, class NAG_dco_10038> class NAG_dco_10045 : public NAG_dco_10039<NAG_dco_10038> {
private:
  class NAG_dco_10046 {
  public:
    virtual ~NAG_dco_10046() {};
    virtual mem_long_t size_in_byte() = 0;
    virtual void NAG_dco_10047(const std::string&, const std::string&) {};
  };
  template <typename NAG_dco_10048> class NAG_dco_10049 : public NAG_dco_10046 {
  public:
    const NAG_dco_10048 _data;
    NAG_dco_10049(const NAG_dco_10048& NAG_dco_10050) : _data(NAG_dco_10050) {}
    const NAG_dco_10048& NAG_dco_10051() const { return _data; }
  };
  template <typename NAG_dco_10048> class NAG_dco_10052 : public NAG_dco_10049<NAG_dco_10048> {
  public:
    NAG_dco_10052(NAG_dco_10048 data) : NAG_dco_10049<NAG_dco_10048>(data) {}
    virtual ~NAG_dco_10052() {}
    virtual mem_long_t size_in_byte() { return size_of(NAG_dco_10049<NAG_dco_10048>::_data); }
    virtual void NAG_dco_10047([[maybe_unused]] const std::string& NAG_dco_10053,
                               [[maybe_unused]] const std::string& NAG_dco_10054) {
      if constexpr (IS_DEBUG) {
        if constexpr (false)
          if (NAG_dco_10054 != NAG_dco_10053) {
            std::stringstream NAG_dco_10055;
            NAG_dco_10055 << "read_data error: tried to read " << NAG_dco_10053 << " instead of " << NAG_dco_10054
                          << "!";
            throw dco::exception::create<std::runtime_error>(NAG_dco_10055.str());
          }
      }
    }
  };
  template <typename NAG_dco_10048> class NAG_dco_10056 : public NAG_dco_10049<NAG_dco_10048*> {
  public:
    const index_t NAG_dco_9763;
    NAG_dco_10056(const NAG_dco_10048* data, index_t NAG_dco_9762)
        : NAG_dco_10049<NAG_dco_10048*>(new NAG_dco_10048[std::size_t(NAG_dco_9762)]), NAG_dco_9763(NAG_dco_9762) {
      for (index_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9762; ++NAG_dco_9862)
        this->_data[NAG_dco_9862] = data[NAG_dco_9862];
    }
    NAG_dco_10056(const NAG_dco_10048* data, const index_t NAG_dco_9981, const index_t NAG_dco_9762)
        : NAG_dco_10049<NAG_dco_10048*>(new NAG_dco_10048[NAG_dco_9762]), NAG_dco_9763(NAG_dco_9762) {
      for (index_t NAG_dco_9862 = 0, NAG_dco_9826 = 0; NAG_dco_9862 < NAG_dco_9762;
           ++NAG_dco_9862, NAG_dco_9826 += NAG_dco_9981)
        this->_data[NAG_dco_9862] = data[NAG_dco_9826];
    }
    virtual ~NAG_dco_10056() { delete[] this->_data; }
    virtual mem_long_t size_in_byte() { return static_cast<mem_long_t>(NAG_dco_9763) * sizeof(NAG_dco_10048); }
    virtual void NAG_dco_10047([[maybe_unused]] const std::string& NAG_dco_10053,
                               [[maybe_unused]] const std::string& NAG_dco_10054) {
      if constexpr (IS_DEBUG) {
        if constexpr (false)
          if (NAG_dco_10054 + "*" != NAG_dco_10053) {
            std::stringstream NAG_dco_10055;
            NAG_dco_10055 << "read_data error: tried to read " << NAG_dco_10053 << " instead of " << NAG_dco_10054
                          << "!";
            throw dco::exception::create<std::runtime_error>(NAG_dco_10055.str());
          }
      }
    }
  };
  index_t NAG_dco_10057;
  std::vector<NAG_dco_10046*> NAG_dco_10058;
  std::vector<std::string> NAG_dco_10059;

protected:
  virtual ~NAG_dco_10045() {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10058.size(); NAG_dco_9862++)
      delete NAG_dco_10058[NAG_dco_9862];
    NAG_dco_10058.clear();
  }

public:
  NAG_dco_10045() : NAG_dco_10039<NAG_dco_10038>(), NAG_dco_10057(0) {}
  virtual mem_long_t size_in_byte() {
    mem_long_t NAG_dco_9833 = NAG_dco_10039<NAG_dco_10038>::size_in_byte();
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10058.size(); NAG_dco_9862++) {
      NAG_dco_9833 += NAG_dco_10058[NAG_dco_9862]->size_in_byte();
    }
    NAG_dco_9833 += NAG_dco_10058.size() * sizeof(NAG_dco_10046*);
    NAG_dco_9833 += NAG_dco_10059.size() * sizeof(std::string);
    return NAG_dco_9833;
  }
  template <typename NAG_dco_10048> void write_data(const NAG_dco_10048& NAG_dco_10060) {
    NAG_dco_10058.push_back(new NAG_dco_10052<NAG_dco_10048>(NAG_dco_10060));
    if constexpr (IS_DEBUG)
      NAG_dco_10059.push_back(type_name<NAG_dco_10048>());
  }
  template <typename NAG_dco_10048>
  void write_data(const NAG_dco_10048* const NAG_dco_10060, const index_t NAG_dco_9762) {
    NAG_dco_10058.push_back(new NAG_dco_10056<NAG_dco_10048>(NAG_dco_10060, NAG_dco_9762));
    if constexpr (IS_DEBUG)
      NAG_dco_10059.push_back(type_name<NAG_dco_10048>());
  }
  template <typename NAG_dco_10048>
  void write_data(const NAG_dco_10048* const& NAG_dco_10060, const index_t NAG_dco_9981, const index_t NAG_dco_9762) {
    NAG_dco_10058.push_back(new NAG_dco_10056<NAG_dco_10048>(NAG_dco_10060, NAG_dco_9981, NAG_dco_9762));
    if constexpr (IS_DEBUG) {
      NAG_dco_10059.push_back(type_name<NAG_dco_10048>());
    }
  }
  template <typename NAG_dco_10048> const NAG_dco_10048& read_data() {
    const NAG_dco_10048& NAG_dco_10060 =
        static_cast<NAG_dco_10049<NAG_dco_10048>*>(NAG_dco_10058[static_cast<std::size_t>(NAG_dco_10057)])
            ->NAG_dco_10051();
    if constexpr (IS_DEBUG)
      NAG_dco_10058[static_cast<std::size_t>(NAG_dco_10057)]->NAG_dco_10047(
          type_name<NAG_dco_10048>(), NAG_dco_10059.at(static_cast<std::size_t>(NAG_dco_10057)));
    ++NAG_dco_10057;
    if (NAG_dco_10057 == static_cast<index_t>(NAG_dco_10058.size()))
      NAG_dco_10057 = 0;
    return NAG_dco_10060;
  }
};
} // namespace helper
} // namespace dco

namespace dco {
namespace helper {
template <class NAG_dco_10044, class NAG_dco_10038>
class NAG_dco_10061 : public NAG_dco_10045<NAG_dco_10044, NAG_dco_10038>,
                      public NAG_dco_10037<NAG_dco_10038, NAG_dco_10061<NAG_dco_10044, NAG_dco_10038>> {
  typedef NAG_dco_10037<NAG_dco_10038, NAG_dco_10061> NAG_dco_10062;
  bool NAG_dco_10063;

protected:
  std::vector<index_t> NAG_dco_9879;
  std::vector<index_t> NAG_dco_9880;
  std::size_t NAG_dco_10064;
  std::size_t NAG_dco_10065;

public:
  NAG_dco_10038*& tape() { return this->NAG_dco_10040; }
  virtual mem_long_t size_in_byte() {
    mem_long_t NAG_dco_9833 = NAG_dco_10045<NAG_dco_10044, NAG_dco_10038>::size_in_byte();
    NAG_dco_9833 += NAG_dco_9879.size() * sizeof(index_t);
    NAG_dco_9833 += NAG_dco_9880.size() * sizeof(index_t);
    NAG_dco_9833 += 2 * sizeof(index_t);
    return NAG_dco_9833;
  }
  std::size_t NAG_dco_10066() { return NAG_dco_9879.size(); }
  std::size_t NAG_dco_10067() { return NAG_dco_9880.size(); }
  void NAG_dco_10042() { NAG_dco_10063 = true; }
  void NAG_dco_10043(NAG_dco_9873& NAG_dco_10068, index_t NAG_dco_9881) {
    NAG_dco_10068.NAG_dco_9878(NAG_dco_9879, NAG_dco_9880,
                               NAG_dco_9881 - static_cast<index_t>(NAG_dco_9880.size()) - 1);
  }

public:
  void NAG_dco_10069(const NAG_dco_10044& NAG_dco_9778) {
    if ((NAG_dco_9778.tape() != 0) && (this->NAG_dco_10040 != NAG_dco_9778.tape()))
      throw dco::exception::create<std::runtime_error>("impossible binding tape - wrong tape in variable!");
    if (this->NAG_dco_10063 == true) {
      throw dco::exception::create<std::runtime_error>(
          "Input registration required, but callback already inserted; please check ordering.");
    }
  }
  void NAG_dco_10070() {
    if (this->NAG_dco_10040 == NULL) {
      throw dco::exception::create<std::runtime_error>("Output registration required, but no tape available.");
    }
    if (this->NAG_dco_10063 == true) {
      throw dco::exception::create<std::runtime_error>(
          "Output registration required, but callback already inserted; please check ordering.");
    }
  }

protected:
  ~NAG_dco_10061() {
    if constexpr (IS_DEBUG) {
      if (NAG_dco_10064 != 0)
        DCO_LOG(dco::logERROR) << "not all input adjoints incremented in external adjoint object.";
      if (NAG_dco_10065 != 0)
        DCO_LOG(dco::logERROR) << "not all output adjoints read in external adjoint object.";
    }
  }

public:
  NAG_dco_10061(const std::pair<std::size_t, std::size_t>& NAG_dco_10071)
      : NAG_dco_10045<NAG_dco_10044, NAG_dco_10038>(), NAG_dco_10062(this), NAG_dco_10063(false), NAG_dco_10064(0),
        NAG_dco_10065(0) {
    NAG_dco_9879.reserve(NAG_dco_10071.first);
    NAG_dco_9880.reserve(NAG_dco_10071.second);
  }
  NAG_dco_10061()
      : NAG_dco_10045<NAG_dco_10044, NAG_dco_10038>(), NAG_dco_10062(this), NAG_dco_10063(false), NAG_dco_10064(0),
        NAG_dco_10065(0) {}
  typename NAG_dco_10044::VALUE_TYPE register_input(const NAG_dco_10044& NAG_dco_9778) {
    NAG_dco_10069(NAG_dco_9778);
    const index_t NAG_dco_9826 = NAG_dco_9778._tape_index();
    NAG_dco_9879.push_back(NAG_dco_9826);
    NAG_dco_10062::register_input(NAG_dco_9778);
    return NAG_dco_9778._value();
  }
  void register_input(const NAG_dco_10044* const NAG_dco_9778, typename NAG_dco_10044::VALUE_TYPE* NAG_dco_9921,
                      const std::size_t NAG_dco_9762) {
    NAG_dco_9879.reserve(NAG_dco_9879.size() + NAG_dco_9762);
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9762; ++NAG_dco_9862) {
      NAG_dco_10069(NAG_dco_9778[NAG_dco_9862]);
      const index_t NAG_dco_9826 = NAG_dco_9778[NAG_dco_9862]._tape_index();
      NAG_dco_9879.push_back(NAG_dco_9826);
      NAG_dco_9921[NAG_dco_9862] = NAG_dco_9778[NAG_dco_9862]._value();
      NAG_dco_10062::register_input(NAG_dco_9778[NAG_dco_9862]);
    }
  }
  void register_input(const std::vector<NAG_dco_10044>& NAG_dco_9778,
                      std::vector<typename NAG_dco_10044::VALUE_TYPE>& NAG_dco_9921) {
    assert(NAG_dco_9778.size() == NAG_dco_9921.size());
    register_input(&(NAG_dco_9778[0]), &(NAG_dco_9921[0]), NAG_dco_9778.size());
  }
  std::vector<typename NAG_dco_10044::VALUE_TYPE> register_input(const std::vector<NAG_dco_10044>& NAG_dco_9778) {
    std::vector<typename NAG_dco_10044::VALUE_TYPE> NAG_dco_9921(NAG_dco_9778.size());
    register_input(NAG_dco_9778, NAG_dco_9921);
    return NAG_dco_9921;
  }
  void register_output(NAG_dco_10044* NAG_dco_10072, const std::size_t NAG_dco_9762) {
    register_output(NULL, NAG_dco_10072, NAG_dco_9762);
  }
  void register_output(const typename NAG_dco_10044::VALUE_TYPE* const NAG_dco_10073, NAG_dco_10044* NAG_dco_10072,
                       const std::size_t NAG_dco_9762) {
    NAG_dco_10070();
    NAG_dco_9880.reserve(NAG_dco_9880.size() + NAG_dco_9762);
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9762; ++NAG_dco_9862) {
      if (NAG_dco_10073) {
        NAG_dco_10072[NAG_dco_9862] = NAG_dco_10073[NAG_dco_9862];
      }
      this->NAG_dco_10040->register_variable(NAG_dco_10072[NAG_dco_9862]);
      NAG_dco_9880.push_back(NAG_dco_10072[NAG_dco_9862]._tape_index());
      NAG_dco_10062::register_output(NAG_dco_10072[NAG_dco_9862]);
    }
  }
  void register_output(const std::vector<typename NAG_dco_10044::VALUE_TYPE>& NAG_dco_10073,
                       std::vector<NAG_dco_10044>& NAG_dco_10072) {
    assert(NAG_dco_10073.size() == NAG_dco_10072.size());
    register_output(&(NAG_dco_10073[0]), &(NAG_dco_10072[0]), NAG_dco_10073.size());
  }
  std::vector<NAG_dco_10044> register_output(const std::vector<typename NAG_dco_10044::VALUE_TYPE>& NAG_dco_10073) {
    std::vector<NAG_dco_10044> NAG_dco_10072(NAG_dco_10073.size());
    register_output(NAG_dco_10073, NAG_dco_10072);
    return NAG_dco_10072;
  }
  void register_output(std::vector<NAG_dco_10044>& NAG_dco_10072) {
    register_output(&(NAG_dco_10072[0]), NAG_dco_10072.size());
  }
  NAG_dco_10044 register_output(const typename NAG_dco_10044::VALUE_TYPE& NAG_dco_10074, NAG_dco_10038* tape = NULL) {
    NAG_dco_10044 NAG_dco_9779;
    if (tape != NULL) {
      if (this->NAG_dco_10040 != NULL && this->NAG_dco_10040 != tape) {
        throw dco::exception::create<std::runtime_error>(
            "impossible binding output in external function (register_output) - tape of inputs and outputs differ!");
      }
      this->NAG_dco_10040 = tape;
    }
    NAG_dco_10070();
    NAG_dco_9779 = NAG_dco_10074;
    this->NAG_dco_10040->register_variable(NAG_dco_9779);
    NAG_dco_9880.push_back(NAG_dco_9779._tape_index());
    NAG_dco_10062::register_output(NAG_dco_9779);
    return NAG_dco_9779;
  }
  inline auto get_output_adjoint() {
    std::size_t NAG_dco_9826 = NAG_dco_10065;
    NAG_dco_10065++;
    if (NAG_dco_10065 == NAG_dco_9880.size())
      NAG_dco_10065 = 0;
    typename NAG_dco_10038::NAG_dco_9987 back = this->_adjoint_vector->_read_adjoint(NAG_dco_9880[NAG_dco_9826]);
    return back;
  }
  void get_output_adjoint(typename NAG_dco_10044::VALUE_TYPE* NAG_dco_9827, const std::size_t NAG_dco_9762) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9762; ++NAG_dco_9862) {
      NAG_dco_9827[NAG_dco_9862] = get_output_adjoint();
    }
  }
  void get_output_adjoint(std::vector<typename NAG_dco_10044::VALUE_TYPE>& NAG_dco_9827) {
    assert(NAG_dco_9827.size());
    get_output_adjoint(&(NAG_dco_9827[0]), NAG_dco_9827.size());
  }
  void increment_input_adjoint(const typename NAG_dco_10044::VALUE_TYPE* const NAG_dco_9982,
                               const std::size_t NAG_dco_9762) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9762; ++NAG_dco_9862) {
      this->_adjoint_vector->_increment_adjoint(NAG_dco_9879[NAG_dco_10064 + NAG_dco_9862], NAG_dco_9982[NAG_dco_9862]);
    }
    NAG_dco_10064 += NAG_dco_9762;
    if (NAG_dco_10064 == NAG_dco_9879.size())
      NAG_dco_10064 = 0;
  }
  void increment_input_adjoint(const std::vector<typename NAG_dco_10044::VALUE_TYPE>& NAG_dco_9982) {
    assert(NAG_dco_9982.size() != 0);
    increment_input_adjoint(&(NAG_dco_9982[0]), NAG_dco_9982.size());
  }
  bool NAG_dco_10075() { return (NAG_dco_10064 == 0); }
  bool NAG_dco_10076() { return (NAG_dco_10065 == 0); }
  void increment_input_adjoint(const typename dco::mode<NAG_dco_10044>::NAG_dco_10077& NAG_dco_9982) {
    std::size_t NAG_dco_9826 = NAG_dco_10064;
    NAG_dco_10064++;
    if (NAG_dco_10064 == NAG_dco_9879.size())
      NAG_dco_10064 = 0;
    this->_adjoint_vector->_increment_adjoint(NAG_dco_9879[NAG_dco_9826], NAG_dco_9982);
  }
};
} // namespace helper
} // namespace dco

namespace dco {
namespace ACM {
template <class NAG_dco_10038, class NAG_dco_10078> struct baseclass : dco::helper::NAG_dco_10039<NAG_dco_10038> {
private:
  std::vector<NAG_dco_10078*> NAG_dco_10079;
  std::vector<NAG_dco_10078*> NAG_dco_10080;
  std::vector<index_t> NAG_dco_10081;
  std::vector<index_t> NAG_dco_10082;
  std::vector<void*> _data;
  int NAG_dco_10083;

public:
  typedef NAG_dco_10078 active_t;
  typedef NAG_dco_10038 tape_t;
  baseclass(tape_t* tape) : NAG_dco_10083(0) { this->set_tape(tape); }
  std::size_t register_input(NAG_dco_10078& NAG_dco_9778) {
    std::size_t NAG_dco_9849 = NAG_dco_10079.size();
    NAG_dco_10079.push_back(&NAG_dco_9778);
    NAG_dco_10082.push_back(NAG_dco_9778._tape_index());
    return NAG_dco_9849;
  }
  std::size_t register_input(std::vector<NAG_dco_10078>& NAG_dco_10084) {
    std::size_t NAG_dco_9849 = NAG_dco_10079.size();
    for (int NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10084.size(); ++NAG_dco_9862) {
      const NAG_dco_10078& NAG_dco_10085 = NAG_dco_10084[NAG_dco_9862];
      this->register_input(NAG_dco_10085);
    }
    return NAG_dco_9849;
  }
  std::size_t register_output(NAG_dco_10078& NAG_dco_9778) {
    if (NAG_dco_9778._tape_index() == 0) {
      this->get_tape()->register_variable(NAG_dco_9778);
    }
    std::size_t NAG_dco_9849 = NAG_dco_10080.size();
    NAG_dco_10080.push_back(&NAG_dco_9778);
    NAG_dco_10081.push_back(NAG_dco_9778._tape_index());
    return NAG_dco_9849;
  }
  int register_output(std::vector<NAG_dco_10078>& NAG_dco_10084) {
    int NAG_dco_9849 = NAG_dco_10080.size();
    for (int NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10084.size(); ++NAG_dco_9862) {
      if (NAG_dco_10084[NAG_dco_9862]._tape_index() == 0) {
        this->get_tape()->register_variable(NAG_dco_10084[NAG_dco_9862]);
      }
      NAG_dco_10081.push_back(NAG_dco_10084[NAG_dco_9862]._tape_index());
      NAG_dco_10080.push_back(&NAG_dco_10084[NAG_dco_9862]);
    }
    return NAG_dco_9849;
  }
  template <typename NAG_dco_9791> int write_data(const NAG_dco_9791& data) {
    NAG_dco_9791* NAG_dco_10086 = new NAG_dco_9791(data);
    int NAG_dco_9849 = _data.size();
    _data.push_back(NAG_dco_10086);
    return NAG_dco_9849;
  }
  template <typename NAG_dco_9791> const NAG_dco_9791& read_data(const int NAG_dco_10087 = -1) {
    int NAG_dco_9826 = 0;
    if (NAG_dco_10087 == -1) {
      NAG_dco_9826 = NAG_dco_10083 % _data.size();
      NAG_dco_10083++;
    }
    void* NAG_dco_10088 = _data[NAG_dco_9826];
    return *static_cast<NAG_dco_9791*>(NAG_dco_10088);
  }
  std::size_t NAG_dco_10089() { return NAG_dco_10079.size(); }
  std::size_t NAG_dco_10090() { return NAG_dco_10079.size(); }
  typename NAG_dco_10078::VALUE_TYPE& input_value(const int NAG_dco_9826) {
    return NAG_dco_10079[static_cast<std::size_t>(NAG_dco_9826)]->_value();
  }
  typename NAG_dco_10078::VALUE_TYPE& output_value(const int NAG_dco_9826) {
    return NAG_dco_10080[static_cast<std::size_t>(NAG_dco_9826)]->_value();
  }
  typename dco::mode<NAG_dco_10078>::NAG_dco_10077& input_adjoint(const int NAG_dco_9826) {
    return this->get_tape()->_adjoint(NAG_dco_10082[static_cast<std::size_t>(NAG_dco_9826)]);
  }
  typename dco::mode<NAG_dco_10078>::NAG_dco_10077& output_adjoint(const int NAG_dco_9826) {
    return this->get_tape()->_adjoint(NAG_dco_10081[static_cast<std::size_t>(NAG_dco_9826)]);
  }
  virtual void evaluate_primal() { std::cout << "WARNING: you need to implement evaluate_primal!!!!\n"; }
  virtual void evaluate_augmented_primal() {
    std::cout << "WARNING: you need to implement evaluate_augmented_primal!!!!\n";
  }
  virtual void evaluate_adjoint() { std::cout << "WARNING: you need to implement evaluate_adjoint!!!!\n"; }
};
template <class NAG_dco_10038, class NAG_dco_10078>
static void NAG_dco_10091(baseclass<NAG_dco_10038, NAG_dco_10078>* NAG_dco_10092) {
  NAG_dco_10092->evaluate_adjoint();
}
} // namespace ACM
} // namespace dco
namespace dco {
namespace NAG_dco_10093 {
template <class NAG_dco_10094> struct NAG_dco_10095 {
  std::vector<NAG_dco_10094*> NAG_dco_10079;
  std::vector<NAG_dco_10094*> NAG_dco_10080;
  std::vector<void*> _data;
  int NAG_dco_10083;
  NAG_dco_10095() : NAG_dco_10083(0) {}
  virtual ~NAG_dco_10095() {}
  template <typename NAG_dco_9791> int write_data(const NAG_dco_9791& data) {
    NAG_dco_9791* NAG_dco_10086 = new NAG_dco_9791(data);
    int NAG_dco_9849 = _data.size();
    _data.push_back(NAG_dco_10086);
    return NAG_dco_9849;
  }
  template <typename NAG_dco_9791> const NAG_dco_9791& read_data(const int NAG_dco_10087 = -1) {
    int NAG_dco_9826 = 0;
    if (NAG_dco_10087 == -1) {
      NAG_dco_9826 = NAG_dco_10083 % _data.size();
      NAG_dco_10083++;
    }
    void* NAG_dco_10088 = _data[NAG_dco_9826];
    return *static_cast<NAG_dco_9791*>(NAG_dco_10088);
  }
  std::size_t NAG_dco_10089() { return NAG_dco_10079.size(); }
  std::size_t NAG_dco_10090() { return NAG_dco_10080.size(); }
  NAG_dco_10094& input_value(const int NAG_dco_9826) { return *NAG_dco_10079[NAG_dco_9826]; }
  NAG_dco_10094& output_value(const int NAG_dco_9826) { return *NAG_dco_10080[NAG_dco_9826]; }
  virtual void evaluate_primal() { std::cout << "WARNING: you need to implement evaluate_primal!!!!\n"; }
};
template <class NAG_dco_10094> struct NAG_dco_10096 : NAG_dco_10095<NAG_dco_10094> {
  int register_input(NAG_dco_10094& NAG_dco_9778) {
    int NAG_dco_9849 = this->NAG_dco_10079.size();
    this->NAG_dco_10079.push_back(&NAG_dco_9778);
    return NAG_dco_9849;
  }
  int register_input(std::vector<NAG_dco_10094>& NAG_dco_10084) {
    int NAG_dco_9849 = this->NAG_dco_10079.size();
    for (int NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10084.size(); ++NAG_dco_9862) {
      const NAG_dco_10094& NAG_dco_10085 = NAG_dco_10084[NAG_dco_9862];
      this->register_input(NAG_dco_10085);
    }
    return NAG_dco_9849;
  }
  int register_output(NAG_dco_10094& NAG_dco_9778) {
    int NAG_dco_9849 = this->NAG_dco_10080.size();
    this->NAG_dco_10080.push_back(&NAG_dco_9778);
    return NAG_dco_9849;
  }
  int register_output(std::vector<NAG_dco_10094>& NAG_dco_10084) {
    int NAG_dco_9849 = this->NAG_dco_10080.size();
    for (int NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10084.size(); ++NAG_dco_9862) {
      register_output(NAG_dco_10084[NAG_dco_9862]);
    }
    return NAG_dco_9849;
  }
};
template <class NAG_dco_10038, class NAG_dco_10078>
struct NAG_dco_10097 : public dco::helper::NAG_dco_10039<NAG_dco_10038>, public NAG_dco_10095<NAG_dco_10078> {
private:
  std::vector<index_t> NAG_dco_10081;
  std::vector<index_t> NAG_dco_10082;

public:
  typedef NAG_dco_10078 active_t;
  typedef NAG_dco_10038 tape_t;
  NAG_dco_10097(tape_t* tape) { this->set_tape(tape); }
  NAG_dco_10078& NAG_dco_9882(const int NAG_dco_9826) { return *(this->NAG_dco_10079[NAG_dco_9826]); }
  NAG_dco_10078& NAG_dco_9883(const int NAG_dco_9826) { return *(this->NAG_dco_10080[NAG_dco_9826]); }
  typename NAG_dco_10078::VALUE_TYPE& input_value(const int NAG_dco_9826) {
    return this->NAG_dco_10079[NAG_dco_9826]->_value();
  }
  typename NAG_dco_10078::VALUE_TYPE& output_value(const int NAG_dco_9826) {
    return this->NAG_dco_10080[NAG_dco_9826]->_value();
  }
  typename dco::mode<NAG_dco_10078>::NAG_dco_10077& input_adjoint(const int NAG_dco_9826) {
    return this->get_tape()->_adjoint(NAG_dco_10082[NAG_dco_9826]);
  }
  typename dco::mode<NAG_dco_10078>::NAG_dco_10077& output_adjoint(const int NAG_dco_9826) {
    return this->get_tape()->_adjoint(NAG_dco_10081[NAG_dco_9826]);
  }
  int register_input(NAG_dco_10078& NAG_dco_9778) {
    int NAG_dco_9849 = this->NAG_dco_10079.size();
    this->NAG_dco_10079.push_back(&NAG_dco_9778);
    this->NAG_dco_10082.push_back(NAG_dco_9778._tape_index());
    return NAG_dco_9849;
  }
  int register_input(std::vector<NAG_dco_10078>& NAG_dco_10084) {
    int NAG_dco_9849 = this->NAG_dco_10079.size();
    for (int NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10084.size(); ++NAG_dco_9862) {
      const NAG_dco_10078& NAG_dco_10085 = NAG_dco_10084[NAG_dco_9862];
      this->register_input(NAG_dco_10085);
    }
    return NAG_dco_9849;
  }
  int register_output(NAG_dco_10078& NAG_dco_9778) {
    if (NAG_dco_9778._tape_index() == 0) {
      this->get_tape()->register_variable(NAG_dco_9778);
    }
    int NAG_dco_9849 = this->NAG_dco_10080.size();
    this->NAG_dco_10080.push_back(&NAG_dco_9778);
    this->NAG_dco_10081.push_back(NAG_dco_9778._tape_index());
    return NAG_dco_9849;
  }
  int register_output(std::vector<NAG_dco_10078>& NAG_dco_10084) {
    int NAG_dco_9849 = this->NAG_dco_10080.size();
    for (int NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10084.size(); ++NAG_dco_9862) {
      if (NAG_dco_10084[NAG_dco_9862]._tape_index() == 0) {
        this->get_tape()->register_variable(NAG_dco_10084[NAG_dco_9862]);
      }
      this->NAG_dco_10081.push_back(NAG_dco_10084[NAG_dco_9862]._tape_index());
      this->NAG_dco_10080.push_back(&NAG_dco_10084[NAG_dco_9862]);
    }
    return NAG_dco_9849;
  }
  virtual void evaluate_augmented_primal() {
    std::cout << "WARNING: you need to implement evaluate_augmented_primal!!!!\n";
  }
  virtual void evaluate_adjoint() { std::cout << "WARNING: you need to implement evaluate_adjoint!!!!\n"; }
};
template <class NAG_dco_10038, class NAG_dco_10078>
static void NAG_dco_10091(NAG_dco_10097<NAG_dco_10038, NAG_dco_10078>* NAG_dco_10092) {
  NAG_dco_10092->evaluate_adjoint();
}
} // namespace NAG_dco_10093
} // namespace dco

namespace dco {
namespace internal {
template <class TYPE, typename NAG_dco_9804> class NAG_dco_10098 {
private:
  using type = TYPE;
  using tape_t = NAG_dco_9804;
  using mode_t = typename tape_t::mode_t;
  using NAG_dco_9758 = typename tape_t::NAG_dco_9758;
  using NAG_dco_10099 = typename tape_t::edge_inserter;
  type& NAG_dco_10100;
  NAG_dco_10099 NAG_dco_10024;
  NAG_dco_10098(const NAG_dco_10098&);

public:
  NAG_dco_10098(type& NAG_dco_10101)
      : NAG_dco_10100(NAG_dco_10101), NAG_dco_10024(NAG_dco_10101.tape()->current_ref()) {}
  NAG_dco_10098(type& NAG_dco_10101, tape_t* tape) : NAG_dco_10100(NAG_dco_10101), NAG_dco_10024(tape->current_ref()) {
    static_cast<typename mode_t::data_t&>(NAG_dco_10100).set_tape(tape);
  }
  void put(index_t NAG_dco_10102, const NAG_dco_9758& NAG_dco_10000) {
    if (!HAS_TAPE_ACTIVITY_CHECK || NAG_dco_10102 != 0) {
      bool NAG_dco_10103 = (NAG_dco_10024.index() == 0);
      NAG_dco_10024.insert(NAG_dco_10102, NAG_dco_10000);
      dco::tape_index<mode_t>(NAG_dco_10100) = NAG_dco_10024.index();
      if (NAG_dco_10103)
        static_cast<typename mode_t::data_t&>(NAG_dco_10100).NAG_dco_10104(NAG_dco_10100._value(), NAG_dco_9840());
    }
  }
  void put(const type& NAG_dco_9778, const NAG_dco_9758& NAG_dco_10000) {
    index_t NAG_dco_10102 = dco::tape_index<mode_t>(NAG_dco_9778);
    put(NAG_dco_10102, NAG_dco_10000);
  }
};
} // namespace internal
template <typename TYPE, typename NAG_dco_9801>
auto make_local_gradient(TYPE& NAG_dco_9779, internal::smart_tape_ptr_t<NAG_dco_9801>& tape) {
  using tape_t = typename NAG_dco_9801::tape_t;
  return internal::NAG_dco_10098<TYPE, tape_t>(NAG_dco_9779, tape);
}
template <typename TYPE, memory_model::TYPE MEMORY_MODEL, typename NAG_dco_10036, memory_model::TYPE NAG_dco_9800,
          typename NAG_dco_9801>
auto make_local_gradient(TYPE& NAG_dco_9779,
                         internal::tape<MEMORY_MODEL, NAG_dco_10036, NAG_dco_9800, NAG_dco_9801>* tape) {
  using tape_t = std::remove_pointer_t<decltype(tape)>;
  return internal::NAG_dco_10098<TYPE, tape_t>(NAG_dco_9779, tape);
}
} // namespace dco

namespace dco {
namespace internal {
template <class NAG_dco_9801> struct NAG_dco_10105 {
  typedef typename NAG_dco_9801::tape_t::NAG_dco_9759 derivative_t;

protected:
  mutable index_t NAG_dco_10106;

public:
  NAG_dco_10105() : NAG_dco_10106(0) {}
  DCO_STRONG_INLINE NAG_dco_10105(const NAG_dco_10105& NAG_dco_10107) : NAG_dco_10106(NAG_dco_10107.NAG_dco_10106) {}
  DCO_STRONG_INLINE NAG_dco_10105& operator=(const NAG_dco_10105& NAG_dco_9778) {
    NAG_dco_10106 = NAG_dco_9778.NAG_dco_10106;
    return *this;
  }
  void clear() { NAG_dco_10106 = 0; }
  derivative_t& NAG_dco_9944() const { return _adjoint(); }
  derivative_t& _adjoint() const {
    if constexpr (IS_DEBUG) {
      if (!NAG_dco_9801::global_tape)
        throw dco::exception::create<std::runtime_error>("Tape not created yet. Please use tape_t::create() before "
                                                         "accessing derivative components of adjoint types.");
    }
    return NAG_dco_9801::global_tape->_adjoint(NAG_dco_10106);
  }
  void NAG_dco_10108(const derivative_t& v) const {
    if constexpr (IS_DEBUG) {
      if (!NAG_dco_9801::global_tape)
        throw dco::exception::create<std::runtime_error>("Tape not created yet. Please use tape_t::create() before "
                                                         "accessing derivative components of adjoint types.");
    }
    NAG_dco_9801::global_tape->_adjoint(NAG_dco_10106) = v;
  }
  bool _is_registered() const { return NAG_dco_10106 == 0 ? false : true; }
  index_t& _tape_index() const { return NAG_dco_10106; }
  template <class NAG_dco_10094> DCO_STRONG_INLINE void NAG_dco_10104(const NAG_dco_10094&, const double&) {}
  template <typename NAG_dco_10109>
  static DCO_STRONG_INLINE void register_variable(NAG_dco_10109& NAG_dco_9778, index_t index,
                                                  typename NAG_dco_9801::tape_t*) {
    if constexpr (IS_DEBUG) {
      if (!NAG_dco_9801::global_tape)
        throw dco::exception::create<std::runtime_error>("Global tape not yet created (is NULL).");
    }
    static_cast<NAG_dco_10105 const&>(NAG_dco_9778).NAG_dco_10106 = index;
  }
  static typename NAG_dco_9801::tape_t* tape() { return NAG_dco_9801::global_tape; }
  void set_tape(typename NAG_dco_9801::tape_t*) {}
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9791 = void> void NAG_dco_10110(bool NAG_dco_10111) {
  if (NAG_dco_10111) {
    throw dco::exception::create<std::runtime_error>("Control flow divergence detected.");
  }
}
struct NAG_dco_10112 {
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10115(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() ==
                                                                            NAG_dco_10117._value()) {
    return NAG_dco_10116._value() == NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10118(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() == NAG_dco_10117) {
    return NAG_dco_10116._value() == NAG_dco_10117;
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10119(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116 == NAG_dco_10117._value()) {
    return NAG_dco_10116 == NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10120(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() !=
                                                                            NAG_dco_10117._value()) {
    return NAG_dco_10116._value() != NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10121(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() != NAG_dco_10117) {
    return NAG_dco_10116._value() != NAG_dco_10117;
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10122(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116 != NAG_dco_10117._value()) {
    return NAG_dco_10116 != NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10123(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() <
                                                                            NAG_dco_10117._value()) {
    return NAG_dco_10116._value() < NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10124(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() < NAG_dco_10117) {
    return NAG_dco_10116._value() < NAG_dco_10117;
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10125(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116 < NAG_dco_10117._value()) {
    return NAG_dco_10116 < NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10126(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() <=
                                                                            NAG_dco_10117._value()) {
    return NAG_dco_10116._value() <= NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10127(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() <= NAG_dco_10117) {
    return NAG_dco_10116._value() <= NAG_dco_10117;
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10128(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116 <= NAG_dco_10117._value()) {
    return NAG_dco_10116 <= NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10129(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() >
                                                                            NAG_dco_10117._value()) {
    return NAG_dco_10116._value() > NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10130(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() > NAG_dco_10117) {
    return NAG_dco_10116._value() > NAG_dco_10117;
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10131(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116 > NAG_dco_10117._value()) {
    return NAG_dco_10116 > NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10132(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() >=
                                                                            NAG_dco_10117._value()) {
    return NAG_dco_10116._value() >= NAG_dco_10117._value();
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10133(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116._value() >= NAG_dco_10117) {
    return NAG_dco_10116._value() >= NAG_dco_10117;
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static auto NAG_dco_10134(const NAG_dco_10113& NAG_dco_10116,
                            const NAG_dco_10114& NAG_dco_10117) -> decltype(NAG_dco_10116 >= NAG_dco_10117._value()) {
    return NAG_dco_10116 >= NAG_dco_10117._value();
  }
};
struct NAG_dco_10135 {
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10115(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 == NAG_dco_10107; },
        "==", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10118(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 == NAG_dco_10107; },
        "==", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10119(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 == NAG_dco_10107; },
        "==", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10120(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 != NAG_dco_10107; },
        "!=", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10121(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 != NAG_dco_10107; },
        "!=", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10122(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 != NAG_dco_10107; },
        "!=", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10123(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 < NAG_dco_10107; }, "<",
        NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10124(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 < NAG_dco_10107; }, "<",
        NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10125(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 < NAG_dco_10107; }, "<",
        NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10126(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 <= NAG_dco_10107; },
        "<=", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10127(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 <= NAG_dco_10107; },
        "<=", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10128(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 <= NAG_dco_10107; },
        "<=", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10129(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 > NAG_dco_10107; }, ">",
        NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10130(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 > NAG_dco_10107; }, ">",
        NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10131(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 > NAG_dco_10107; }, ">",
        NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10132(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 >= NAG_dco_10107; },
        ">=", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10133(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 >= NAG_dco_10107; },
        ">=", NAG_dco_10116, NAG_dco_10117);
  }
  template <class NAG_dco_10113, class NAG_dco_10114>
  static bool NAG_dco_10134(const NAG_dco_10113& NAG_dco_10116, const NAG_dco_10114& NAG_dco_10117) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return NAG_dco_10071 >= NAG_dco_10107; },
        ">=", NAG_dco_10116, NAG_dco_10117);
  }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace folding {
template <typename NAG_dco_9801> class NAG_dco_10137 {
public:
  typedef typename NAG_dco_9801::tape_t::NAG_dco_9759 NAG_dco_9759;
  typedef typename NAG_dco_9801::tape_t::NAG_dco_9758 NAG_dco_9758;
  typedef typename NAG_dco_9801::tape_t::edge_inserter NAG_dco_10138;
  NAG_dco_10137(typename NAG_dco_9801::tape_t* tape) : NAG_dco_10139(1), NAG_dco_10024(tape->current_ref()) {}
  template <class NAG_dco_10140, typename NAG_dco_9756>
  DCO_ALWAYS_INLINE NAG_dco_10140& NAG_dco_10141(NAG_dco_9756 const& pval) {
    NAG_dco_10139 *= static_cast<NAG_dco_9758>(pval);
    return static_cast<NAG_dco_10140&>(*this);
  }
  DCO_ALWAYS_INLINE NAG_dco_9758& pval() { return NAG_dco_10139; }
  DCO_ALWAYS_INLINE index_t index() const { return NAG_dco_10024.index(); }
  template <class NAG_dco_10109> DCO_ALWAYS_INLINE void insert(NAG_dco_10109 const& NAG_dco_9778) {
    const index_t NAG_dco_10142 = static_cast<typename NAG_dco_9801::data_t const&>(NAG_dco_9778)._tape_index();
    if (!HAS_TAPE_ACTIVITY_CHECK || NAG_dco_10142 != 0) {
      if (!NAG_dco_9752 || !is_zero(NAG_dco_10139)) {
        NAG_dco_10024.insert(NAG_dco_10142, NAG_dco_10139);
      }
    }
  }

protected:
  NAG_dco_9758 NAG_dco_10139;

private:
  NAG_dco_10137();
  NAG_dco_10137(NAG_dco_10137& NAG_dco_9975);
  NAG_dco_10138 NAG_dco_10024;
};
template <class NAG_dco_10143> class NAG_dco_10144 : public NAG_dco_10137<NAG_dco_10143> {
  typedef typename NAG_dco_10143::NAG_dco_9759 NAG_dco_9759;
  typedef typename NAG_dco_10143::edge_inserter NAG_dco_10138;

public:
  NAG_dco_10144(NAG_dco_10143* tape) : NAG_dco_10137<NAG_dco_10143>(tape), NAG_dco_10145(0) {}
  template <class NAG_dco_10109> DCO_ALWAYS_INLINE void insert(NAG_dco_10109 NAG_dco_9778) {
    NAG_dco_10137<NAG_dco_10143>::insert(NAG_dco_9778);
    NAG_dco_10145 += this->NAG_dco_10139 * NAG_dco_9778.NAG_dco_9942;
  }
  NAG_dco_9759 tangent() const { return NAG_dco_10145; }

private:
  NAG_dco_10144();
  NAG_dco_10144(NAG_dco_10144& NAG_dco_9975);
  NAG_dco_9759 NAG_dco_10145;
};
template <class NAG_dco_10146, class NAG_dco_9755, class NAG_dco_10147>
DCO_ALWAYS_INLINE void interpret(const dco::internal::active_type<NAG_dco_9755, NAG_dco_10147>& NAG_dco_9778,
                                 NAG_dco_10146& NAG_dco_10148) {
  NAG_dco_10148.insert(NAG_dco_9778);
}
template <class NAG_dco_10146, class NAG_dco_9755, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::NAG_dco_9788<NAG_dco_9755, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          NAG_dco_10146& NAG_dco_10148) {
  typename NAG_dco_10146::NAG_dco_9758 NAG_dco_10152 = NAG_dco_10148.pval();
  interpret<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10153(),
                           NAG_dco_10148.template NAG_dco_10141<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10154()));
  NAG_dco_10148.pval() = NAG_dco_10152;
  interpret<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10155(),
                           NAG_dco_10148.template NAG_dco_10141<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10156()));
}
template <class NAG_dco_10146, class NAG_dco_9755, class NAG_dco_10157, class NAG_dco_10151>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::NAG_dco_9785<NAG_dco_9755, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
          NAG_dco_10146& NAG_dco_10148) {
  interpret<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10158(),
                           NAG_dco_10148.template NAG_dco_10141<NAG_dco_10146>(NAG_dco_9778.pval()));
}
template <class NAG_dco_10146, class NAG_dco_9755, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::NAG_dco_9789<NAG_dco_9755, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          NAG_dco_10146& NAG_dco_10148) {
  interpret<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10153(),
                           NAG_dco_10148.template NAG_dco_10141<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10154()));
}
template <class NAG_dco_10146, class NAG_dco_9755, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::NAG_dco_9790<NAG_dco_9755, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          NAG_dco_10146& NAG_dco_10148) {
  interpret<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10155(),
                           NAG_dco_10148.template NAG_dco_10141<NAG_dco_10146>(NAG_dco_9778.NAG_dco_10156()));
}
template <class NAG_dco_10143> class NAG_dco_10159 {
public:
  NAG_dco_10159() : NAG_dco_10016(0) {}
  template <class NAG_dco_10109> DCO_ALWAYS_INLINE void insert(NAG_dco_10109 NAG_dco_9778) {
    if (NAG_dco_9778.tape())
      NAG_dco_10016 = NAG_dco_9778.tape();
  }
  NAG_dco_10143* tape() const { return NAG_dco_10016; }

private:
  NAG_dco_10159(NAG_dco_10159& NAG_dco_9975);
  NAG_dco_10143* NAG_dco_10016;
};
template <class NAG_dco_9755, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10143>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::NAG_dco_9788<NAG_dco_9755, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          NAG_dco_10159<NAG_dco_10143>& NAG_dco_10148) {
  interpret(NAG_dco_9778.NAG_dco_10153(), NAG_dco_10148);
  if (NAG_dco_10148.tape()) {
    if constexpr (IS_DEBUG) {
      NAG_dco_10143* tape = NAG_dco_10148.tape();
      interpret(NAG_dco_9778.NAG_dco_10155(), NAG_dco_10148);
      if (tape != NAG_dco_10148.tape()) {
        throw dco::exception::create<std::runtime_error>(
            "multiple tape error: different tapes on right-hand side of statement");
      }
    }
    return;
  }
  interpret(NAG_dco_9778.NAG_dco_10155(), NAG_dco_10148);
}
template <class NAG_dco_9755, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10143>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::NAG_dco_9785<NAG_dco_9755, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
          NAG_dco_10159<NAG_dco_10143>& NAG_dco_10148) {
  interpret(NAG_dco_9778.NAG_dco_10158(), NAG_dco_10148);
}
template <class NAG_dco_9755, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10143>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::NAG_dco_9789<NAG_dco_9755, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          NAG_dco_10159<NAG_dco_10143>& NAG_dco_10148) {
  interpret(NAG_dco_9778.NAG_dco_10153(), NAG_dco_10148);
}
template <class NAG_dco_9755, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10143>
DCO_ALWAYS_INLINE void
interpret(const dco::internal::NAG_dco_9790<NAG_dco_9755, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          NAG_dco_10159<NAG_dco_10143>& NAG_dco_10148) {
  interpret(NAG_dco_9778.NAG_dco_10155(), NAG_dco_10148);
}
} // namespace folding
} // namespace dco
namespace dco {
namespace internal {
template <typename NAG_dco_9801> class NAG_dco_10160 : public NAG_dco_10105<NAG_dco_9801> {
  typedef NAG_dco_10105<NAG_dco_9801> NAG_dco_10161;

public:
  typedef NAG_dco_9801 mode_t;
  typedef NAG_dco_10112 NAG_dco_10162;
  typedef typename mode_t::tape_t tape_t;
  typedef typename tape_t::NAG_dco_9759 derivative_t;
  NAG_dco_10160() noexcept {}
  DCO_STRONG_INLINE NAG_dco_10160(const NAG_dco_10160& NAG_dco_10107) : NAG_dco_10161(NAG_dco_10107) {}
  DCO_STRONG_INLINE NAG_dco_10160(const NAG_dco_10160& NAG_dco_10107, NAG_dco_9806) : NAG_dco_10160(NAG_dco_10107) {}
  DCO_STRONG_INLINE NAG_dco_10160& operator=(const NAG_dco_10160& NAG_dco_9778) {
    NAG_dco_10161::operator=(static_cast<const NAG_dco_10161&>(NAG_dco_9778));
    return *this;
  }
  template <class NAG_dco_10163>
  DCO_ALWAYS_INLINE void NAG_dco_9936([[maybe_unused]] const NAG_dco_10163& NAG_dco_10164) {
    if constexpr (std::is_base_of_v<NAG_dco_9801, dco::mode<NAG_dco_10163>>) {
      if (!mode_t::global_tape || !mode_t::global_tape->is_active()) {
        this->clear();
        return;
      }
      using namespace folding;
      NAG_dco_10137<mode_t> NAG_dco_10165(mode_t::global_tape);
      interpret(NAG_dco_10164, NAG_dco_10165);
      this->NAG_dco_10106 = NAG_dco_10165.index();
    }
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename NAG_dco_9791, typename NAG_dco_9756 = NAG_dco_9791, typename NAG_dco_9757 = NAG_dco_9756,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1s {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, NAG_dco_9757> NAG_dco_10166;

public:
  static constexpr memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef ga1s mode_t;
  typedef dco::internal::NAG_dco_10160<ga1s> data_t;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef derivative_t NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, NAG_dco_10166, memory_model::NAG_dco_9773, ga1s> tape_t;
  inline static DCOi_THREAD_LOCAL tape_t* global_tape = nullptr;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco
namespace dco {
typedef ga1s<double> a1w;
typedef double w_rtype;
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9801> class NAG_dco_10168 {
public:
  typedef typename NAG_dco_9801::tape_t tape_t;

private:
  mutable index_t NAG_dco_10106;
  mutable tape_t* NAG_dco_10169;

public:
  typedef NAG_dco_9801 mode_t;
  typedef NAG_dco_10112 NAG_dco_10162;
  typedef typename tape_t::NAG_dco_9759 derivative_t;
  NAG_dco_10168() noexcept : NAG_dco_10106(0), NAG_dco_10169(0) {}
  DCO_STRONG_INLINE NAG_dco_10168& operator=(const NAG_dco_10168& NAG_dco_9778) {
    NAG_dco_10106 = NAG_dco_9778.NAG_dco_10106;
    NAG_dco_10169 = NAG_dco_9778.NAG_dco_10169;
    return *this;
  }
  DCO_STRONG_INLINE NAG_dco_10168(const NAG_dco_10168& NAG_dco_10107)
      : NAG_dco_10106(NAG_dco_10107.NAG_dco_10106), NAG_dco_10169(NAG_dco_10107.NAG_dco_10169) {}
  DCO_STRONG_INLINE NAG_dco_10168(const NAG_dco_10168& NAG_dco_10107, NAG_dco_9806) : NAG_dco_10168(NAG_dco_10107) {}
  void clear() {
    NAG_dco_10106 = 0;
    NAG_dco_10169 = 0;
  }
  derivative_t& NAG_dco_9944() const { return _adjoint(); }
  derivative_t& _adjoint() const {
    static derivative_t NAG_dco_10170 = static_cast<derivative_t>(0);
    if (NAG_dco_10169 == 0) {
      NAG_dco_10170 = 0;
      return NAG_dco_10170;
    } else {
      return NAG_dco_10169->_adjoint(NAG_dco_10106);
    }
  }
  void NAG_dco_10108(const derivative_t& v) const {
    if (NAG_dco_10169 != 0)
      NAG_dco_10169->_adjoint(NAG_dco_10106) = v;
  }
  bool _is_registered() const { return NAG_dco_10106 == 0 ? false : true; }
  index_t& _tape_index() const { return NAG_dco_10106; }
  template <typename NAG_dco_10094> DCO_STRONG_INLINE void NAG_dco_10104(const NAG_dco_10094&, const double&) {}
  template <typename NAG_dco_10109>
  static DCO_STRONG_INLINE void register_variable(NAG_dco_10109& NAG_dco_9778, index_t index, tape_t* tape) {
    NAG_dco_9778.NAG_dco_10169 = tape;
    NAG_dco_9778.NAG_dco_10106 = index;
  }
  tape_t* tape() const { return NAG_dco_10169; }
  void set_tape(tape_t* NAG_dco_9791) { NAG_dco_10169 = NAG_dco_9791; }
  template <class NAG_dco_9935>
  DCO_ALWAYS_INLINE void NAG_dco_9936([[maybe_unused]] const NAG_dco_9935& NAG_dco_10164) {
    if constexpr (std::is_base_of_v<NAG_dco_9801, dco::mode<NAG_dco_9935>>) {
      using namespace folding;
      NAG_dco_10159<tape_t> NAG_dco_10159;
      interpret(NAG_dco_10164, NAG_dco_10159);
      tape_t* NAG_dco_10171 = NAG_dco_10159.tape();
      if (!NAG_dco_10171 || !NAG_dco_10171->is_active()) {
        clear();
        return;
      }
      NAG_dco_10137<dco::mode<NAG_dco_9935>> NAG_dco_10165(NAG_dco_10171);
      interpret(NAG_dco_10164, NAG_dco_10165);
      NAG_dco_10106 = NAG_dco_10165.index();
      NAG_dco_10169 = NAG_dco_10171;
    }
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <class NAG_dco_9791, class NAG_dco_9756 = NAG_dco_9791, class NAG_dco_9757 = NAG_dco_9756,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1sm {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, NAG_dco_9757> NAG_dco_10166;

public:
  static constexpr memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef ga1sm mode_t;
  typedef dco::internal::NAG_dco_10168<ga1sm> data_t;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef derivative_t NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, NAG_dco_10166, memory_model::NAG_dco_9773, ga1sm> tape_t;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9801> struct data_g {
  typedef NAG_dco_9801 mode_t;
  typedef NAG_dco_10112 NAG_dco_10162;
  typedef typename mode_t::derivative_t derivative_t;
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename NAG_dco_9791> class gvalue {
public:
  typedef gvalue mode_t;
  typedef internal::data_g<gvalue> data_t;
  typedef std::decay_t<NAG_dco_9791> type;
  typedef type active_value_t;
  typedef type active_t;
  typedef type value_t;
  typedef value_t scalar_value_t;
  typedef type passive_t;
  typedef type scalar_passive_t;
  typedef void derivative_t;
  typedef void NAG_dco_10077;
  typedef NAG_dco_9811 tape_t;
  typedef void local_gradient_t;
  typedef void local_gradient_with_activity_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<> jacobian_preaccumulator_t;
  static constexpr bool is_dco_type = false;
  static constexpr bool is_adjoint_type = false;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = false;
  static constexpr int order = 0;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
  inline static tape_t* global_tape = nullptr;
};
} // namespace dco
namespace dco {
template <typename NAG_dco_9791> struct mode : public dco::gvalue<NAG_dco_9791> {
  static constexpr bool is_intermediate_type = false;
};
template <typename NAG_dco_9780, typename NAG_dco_9781>
struct mode<internal::active_type<NAG_dco_9780, NAG_dco_9781>> : public NAG_dco_9781::mode_t {
  static constexpr bool is_intermediate_type = false;
};
template <typename NAG_dco_9780, typename NAG_dco_9781>
struct mode<internal::active_type<NAG_dco_9780, NAG_dco_9781> const> : public NAG_dco_9781::mode_t {
  static constexpr bool is_intermediate_type = false;
};
template <typename NAG_dco_9780, typename NAG_dco_9781>
struct mode<internal::active_type<NAG_dco_9780, NAG_dco_9781>&> : public NAG_dco_9781::mode_t {
  static constexpr bool is_intermediate_type = false;
};
template <typename NAG_dco_9780, typename NAG_dco_9781>
struct mode<internal::active_type<NAG_dco_9780, NAG_dco_9781> const&> : public NAG_dco_9781::mode_t {
  static constexpr bool is_intermediate_type = false;
};
template <typename NAG_dco_9780, typename NAG_dco_9781>
struct mode<internal::active_type<NAG_dco_9780, NAG_dco_9781>&&> : public NAG_dco_9781::mode_t {
  static constexpr bool is_intermediate_type = false;
};
template <typename NAG_dco_9791, typename NAG_dco_9890, typename NAG_dco_10172>
struct mode<internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172>>
    : public internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <typename NAG_dco_9791, typename NAG_dco_9890, typename NAG_dco_10172>
struct mode<internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172> const>
    : public internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <typename NAG_dco_9791, typename NAG_dco_9890, typename NAG_dco_10172>
struct mode<internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172>&>
    : public internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <typename NAG_dco_9791, typename NAG_dco_9890, typename NAG_dco_10172>
struct mode<internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172> const&>
    : public internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <typename NAG_dco_9791, typename NAG_dco_9890, typename NAG_dco_10172>
struct mode<internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172>&&>
    : public internal::NAG_dco_9785<NAG_dco_9791, NAG_dco_9890, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_10173, class NAG_dco_10174, class NAG_dco_10172>
struct mode<internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>>
    : public internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_10173, class NAG_dco_10174, class NAG_dco_10172>
struct mode<internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172> const>
    : public internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_10173, class NAG_dco_10174, class NAG_dco_10172>
struct mode<internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>&>
    : public internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_10173, class NAG_dco_10174, class NAG_dco_10172>
struct mode<internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172> const&>
    : public internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_10173, class NAG_dco_10174, class NAG_dco_10172>
struct mode<internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>&&>
    : public internal::NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>>
    : public internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172> const>
    : public internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>&>
    : public internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172> const&>
    : public internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>&&>
    : public internal::NAG_dco_9789<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>>
    : public internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172> const>
    : public internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>&>
    : public internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172> const&>
    : public internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9791, class NAG_dco_9890, class NAG_dco_10175, class NAG_dco_10172>
struct mode<internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>&&>
    : public internal::NAG_dco_9790<NAG_dco_9791, NAG_dco_9890, NAG_dco_10175, NAG_dco_10172>::data_t::mode_t {
  static constexpr bool is_intermediate_type = true;
};
template <class NAG_dco_9780, class DATA_TYPE>
struct mode<internal::NAG_dco_9782<NAG_dco_9780, DATA_TYPE>> : public DATA_TYPE::mode_t {
  static constexpr bool is_intermediate_type = true;
};
} // namespace dco

namespace std {
template <typename NAG_dco_9791, typename NAG_dco_10176, typename NAG_dco_10177, typename NAG_dco_10178,
          typename NAG_dco_10179>
struct common_type<NAG_dco_9791,
                   dco::internal::NAG_dco_9788<NAG_dco_10176, NAG_dco_10177, NAG_dco_10178, NAG_dco_10179>> {
  using type = std::common_type_t<typename dco::mode<NAG_dco_9791>::type, typename dco::mode<NAG_dco_10177>::type>;
};
template <typename NAG_dco_9791, typename NAG_dco_10176, typename NAG_dco_10173, typename NAG_dco_10179>
struct common_type<NAG_dco_9791, dco::internal::NAG_dco_9785<NAG_dco_10176, NAG_dco_10173, NAG_dco_10179>> {
  using type = std::common_type_t<typename dco::mode<NAG_dco_9791>::type, typename dco::mode<NAG_dco_10173>::type>;
};
template <typename NAG_dco_9791, typename NAG_dco_10176, typename NAG_dco_10173, typename NAG_dco_10174,
          typename NAG_dco_10179>
struct common_type<NAG_dco_9791,
                   dco::internal::NAG_dco_9789<NAG_dco_10176, NAG_dco_10173, NAG_dco_10174, NAG_dco_10179>> {
  using type = std::common_type_t<typename dco::mode<NAG_dco_9791>::type, typename dco::mode<NAG_dco_10173>::type>;
};
template <typename NAG_dco_9791, typename NAG_dco_10176, typename NAG_dco_10173, typename NAG_dco_10174,
          typename NAG_dco_10179>
struct common_type<NAG_dco_9791,
                   dco::internal::NAG_dco_9790<NAG_dco_10176, NAG_dco_10173, NAG_dco_10174, NAG_dco_10179>> {
  using type = std::common_type_t<typename dco::mode<NAG_dco_9791>::type, typename dco::mode<NAG_dco_10174>::type>;
};
template <typename NAG_dco_9791, typename NAG_dco_10176, typename NAG_dco_10177, typename NAG_dco_10178,
          typename NAG_dco_10179>
struct common_type<dco::internal::NAG_dco_9788<NAG_dco_10176, NAG_dco_10177, NAG_dco_10178, NAG_dco_10179,
                                               std::enable_if_t<!dco::mode<NAG_dco_9791>::is_dco_type>>,
                   NAG_dco_9791> {
  using type = std::common_type_t<NAG_dco_9791, typename dco::mode<NAG_dco_10177>::type>;
};
template <typename NAG_dco_9791, typename NAG_dco_10176, typename NAG_dco_10173, typename NAG_dco_10179>
struct common_type<dco::internal::NAG_dco_9785<NAG_dco_10176, NAG_dco_10173, NAG_dco_10179,
                                               std::enable_if_t<!dco::mode<NAG_dco_9791>::is_dco_type>>,
                   NAG_dco_9791> {
  using type = std::common_type_t<NAG_dco_9791, typename dco::mode<NAG_dco_10173>::type>;
};
template <typename NAG_dco_9791, typename NAG_dco_10176, typename NAG_dco_10173, typename NAG_dco_10174,
          typename NAG_dco_10179>
struct common_type<dco::internal::NAG_dco_9789<NAG_dco_10176, NAG_dco_10173, NAG_dco_10174, NAG_dco_10179,
                                               std::enable_if_t<!dco::mode<NAG_dco_9791>::is_dco_type>>,
                   NAG_dco_9791> {
  using type = std::common_type_t<NAG_dco_9791, typename dco::mode<NAG_dco_10173>::type>;
};
template <typename NAG_dco_9791, typename NAG_dco_10176, typename NAG_dco_10173, typename NAG_dco_10174,
          typename NAG_dco_10179>
struct common_type<dco::internal::NAG_dco_9790<NAG_dco_10176, NAG_dco_10173, NAG_dco_10174, NAG_dco_10179,
                                               std::enable_if_t<!dco::mode<NAG_dco_9791>::is_dco_type>>,
                   NAG_dco_9791> {
  using type = std::common_type_t<NAG_dco_9791, typename dco::mode<NAG_dco_10174>::type>;
};
} // namespace std
namespace dco {
template <typename NAG_dco_9791, typename NAG_dco_10180 = NAG_dco_9791> struct dco_type_constructable_from {};
template <typename NAG_dco_9791> struct dco_explicit_type_cast_to : std::false_type {};
namespace internal {
template <typename NAG_dco_9791> struct NAG_dco_10181 : std::false_type {};
template <typename NAG_dco_9791, typename NAG_dco_10173, typename NAG_dco_10172>
struct NAG_dco_10181<NAG_dco_9785<NAG_dco_9791, NAG_dco_10173, NAG_dco_10172>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_10182 = NAG_dco_10181<std::decay_t<NAG_dco_9791>>::value;
template <typename NAG_dco_9791> struct NAG_dco_10183 : std::false_type {};
template <typename NAG_dco_9791, typename NAG_dco_10173, typename NAG_dco_10174, typename NAG_dco_10172>
struct NAG_dco_10183<NAG_dco_9788<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>> : std::true_type {};
template <typename NAG_dco_9791, typename NAG_dco_10173, typename NAG_dco_10174, typename NAG_dco_10172>
struct NAG_dco_10183<NAG_dco_9790<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>> : std::true_type {};
template <typename NAG_dco_9791, typename NAG_dco_10173, typename NAG_dco_10174, typename NAG_dco_10172>
struct NAG_dco_10183<NAG_dco_9789<NAG_dco_9791, NAG_dco_10173, NAG_dco_10174, NAG_dco_10172>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_10184 = NAG_dco_10183<std::decay_t<NAG_dco_9791>>::value;
template <typename NAG_dco_9791> struct NAG_dco_10185 : std::false_type {};
template <typename NAG_dco_9791, typename NAG_dco_10186>
struct NAG_dco_10185<active_type<NAG_dco_9791, NAG_dco_10186>> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_10187 = NAG_dco_10185<std::decay_t<NAG_dco_9791>>::value;
template <typename NAG_dco_9791, typename = void> struct NAG_dco_10188 : std::false_type {};
template <typename NAG_dco_9791>
struct NAG_dco_10188<NAG_dco_9791, decltype((void)dco::mode<NAG_dco_9791>::global_tape, void())> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_10189 = NAG_dco_10188<std::decay_t<NAG_dco_9791>>::value;
template <typename NAG_dco_9791, typename = void> struct NAG_dco_10190 : std::false_type {};
template <typename NAG_dco_9791>
struct NAG_dco_10190<NAG_dco_9791, decltype(std::declval<NAG_dco_9791>()._tape_index(), void())> : std::true_type {};
template <typename NAG_dco_9791> constexpr bool NAG_dco_10191 = NAG_dco_10190<std::decay_t<NAG_dco_9791>>::value;
} // namespace internal
enum class NAG_dco_10192 { global_tape };
using NAG_dco_10193 = NAG_dco_10192;
namespace internal {
template <typename NAG_dco_9791, NAG_dco_10193... NAG_dco_10194> struct NAG_dco_10195;
template <typename NAG_dco_9791> struct NAG_dco_10195<NAG_dco_9791, NAG_dco_10193::global_tape> {
  using mode_t = typename dco::mode<NAG_dco_9791>::mode_t;
  using data_t = typename dco::mode<NAG_dco_9791>::data_t;
  static constexpr bool value() {
    if constexpr (mode_t::is_adjoint_type) {
      return std::is_base_of_v<internal::NAG_dco_10160<mode_t>, data_t>;
    }
    return false;
  }
};
} // namespace internal
template <typename NAG_dco_9791> constexpr bool is_dco_type_v = dco::mode<NAG_dco_9791>::is_dco_type;
template <typename NAG_dco_9791> constexpr bool is_adjoint_type_v = dco::mode<NAG_dco_9791>::is_adjoint_type;
template <typename NAG_dco_9791> constexpr bool is_tangent_type_v = dco::mode<NAG_dco_9791>::is_tangent_type;
template <typename NAG_dco_9791> constexpr bool NAG_dco_10196 = dco::mode<NAG_dco_9791>::NAG_dco_10167;
template <typename NAG_dco_9791, NAG_dco_10193... NAG_dco_10194>
constexpr bool NAG_dco_10197 = internal::NAG_dco_10195<NAG_dco_9791, NAG_dco_10194...>::value();
template <typename NAG_dco_9791, NAG_dco_10193... NAG_dco_10194>
constexpr bool NAG_dco_10198 = NAG_dco_10197<NAG_dco_9791, NAG_dco_10194...>;
} // namespace dco
namespace dco {
namespace internal {
template <class NAG_dco_9780> struct NAG_dco_10199 {
  const NAG_dco_9780 NAG_dco_9937;
  NAG_dco_10199(NAG_dco_9780 const& value) : NAG_dco_9937(value) {}
  inline const NAG_dco_9780& _value() const { return NAG_dco_9937; }
  template <typename TYPE, typename NAG_dco_10200 = std::enable_if_t<dco_explicit_type_cast_to<TYPE>::value>>
  explicit operator TYPE() {
    return static_cast<TYPE>(_value());
  }
};
template <class NAG_dco_9780, class DATA_TYPE> struct NAG_dco_9782 : public NAG_dco_10199<NAG_dco_9780> {
  NAG_dco_9782(const NAG_dco_9780& value) : NAG_dco_10199<NAG_dco_9780>(value) {}
  template <typename NAG_dco_9791 = DATA_TYPE>
  DCO_STRONG_INLINE
  operator std::enable_if_t<is_gbcp_type<NAG_dco_9791>::value,
                            typename NAG_dco_9940<NAG_dco_9782, NAG_dco_9791::gbcp_order>::NAG_dco_9941>() const {
    return NAG_dco_9940<NAG_dco_9782, NAG_dco_9791::gbcp_order>::value(*this);
  }
};
template <class NAG_dco_9780, class NAG_dco_9783, class NAG_dco_9784, typename>
struct NAG_dco_9785 : public NAG_dco_9782<NAG_dco_9780, typename NAG_dco_9783::data_t> {
  using NAG_dco_10201 = std::conditional_t<HAS_AUTO_SUPPORT, NAG_dco_9783, NAG_dco_9783 const&>;
  NAG_dco_10201 NAG_dco_10202;
  typedef typename NAG_dco_9783::data_t data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t NAG_dco_10203;
  using NAG_dco_10204 = NAG_dco_9784;
  template <bool NAG_dco_10205 = HAS_AUTO_SUPPORT>
  explicit NAG_dco_9785(const NAG_dco_9783& arg,
                        std::enable_if_t<(NAG_dco_10205 && !HAS_AUTO_SUPPORT_LEGACY) &&
                                         !(NAG_dco_9913<NAG_dco_9784> && NAG_dco_9906<NAG_dco_9783>)>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_10206(arg._value())),
        NAG_dco_10202(arg, NAG_dco_9806()) {}
  template <bool NAG_dco_10205 = HAS_AUTO_SUPPORT>
  explicit NAG_dco_9785(const NAG_dco_9783& arg,
                        std::enable_if_t<(!NAG_dco_10205 || HAS_AUTO_SUPPORT_LEGACY) &&
                                         !(NAG_dco_9913<NAG_dco_9784> && NAG_dco_9906<NAG_dco_9783>)>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_10206(arg._value())), NAG_dco_10202(arg) {}
  template <typename NAG_dco_9908 = NAG_dco_9784>
  explicit NAG_dco_9785(const NAG_dco_9783& arg,
                        std::enable_if_t<NAG_dco_9913<NAG_dco_9908> && NAG_dco_9906<NAG_dco_9783>>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_9909(arg)), NAG_dco_10202(arg) {}
  explicit NAG_dco_9785(NAG_dco_9785 const& NAG_dco_9778, NAG_dco_9806) : NAG_dco_9785(NAG_dco_9778) {}
  inline const NAG_dco_9780 NAG_dco_10207(const int NAG_dco_9826) const {
    return NAG_dco_9784::NAG_dco_10206(NAG_dco_10202.NAG_dco_10207(NAG_dco_9826));
  }
  inline const NAG_dco_9780 pval() const { return NAG_dco_9784::NAG_dco_10208(this->_value(), NAG_dco_10202._value()); }
  auto& NAG_dco_10158() const { return NAG_dco_10202; }
};
template <class NAG_dco_9780, class NAG_dco_9786, class NAG_dco_9787, class NAG_dco_9784, typename>
struct NAG_dco_9788 : public NAG_dco_9782<NAG_dco_9780, typename NAG_dco_9786::data_t> {
  using NAG_dco_10209 = std::conditional_t<HAS_AUTO_SUPPORT, NAG_dco_9786, NAG_dco_9786 const&>;
  using NAG_dco_10210 = std::conditional_t<HAS_AUTO_SUPPORT, NAG_dco_9787, NAG_dco_9787 const&>;
  NAG_dco_10209 NAG_dco_10211;
  NAG_dco_10210 NAG_dco_10212;
  typedef typename NAG_dco_9786::data_t data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t NAG_dco_10203;
  using NAG_dco_10204 = NAG_dco_9784;
  template <bool NAG_dco_10205 = HAS_AUTO_SUPPORT>
  explicit NAG_dco_9788(
      const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
      std::enable_if_t<(NAG_dco_10205 && !HAS_AUTO_SUPPORT_LEGACY) &&
                       !(NAG_dco_9913<NAG_dco_9784> && NAG_dco_9906<NAG_dco_9786> && NAG_dco_9906<NAG_dco_9787>)>* =
          nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_10206(NAG_dco_10213._value(), NAG_dco_10214._value())),
        NAG_dco_10211(NAG_dco_10213, NAG_dco_9806()), NAG_dco_10212(NAG_dco_10214, NAG_dco_9806()) {}
  template <bool NAG_dco_10205 = HAS_AUTO_SUPPORT>
  explicit NAG_dco_9788(
      const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
      std::enable_if_t<(!NAG_dco_10205 || HAS_AUTO_SUPPORT_LEGACY) &&
                       !(NAG_dco_9913<NAG_dco_9784> && NAG_dco_9906<NAG_dco_9786> && NAG_dco_9906<NAG_dco_9787>)>* =
          nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_10206(NAG_dco_10213._value(), NAG_dco_10214._value())),
        NAG_dco_10211(NAG_dco_10213), NAG_dco_10212(NAG_dco_10214) {}
  template <typename NAG_dco_9908 = NAG_dco_9784>
  explicit NAG_dco_9788(
      const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
      std::enable_if_t<(NAG_dco_9913<NAG_dco_9908> && NAG_dco_9906<NAG_dco_9786> && NAG_dco_9906<NAG_dco_9787>)>* =
          nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_9909(NAG_dco_10213, NAG_dco_10214)),
        NAG_dco_10211(NAG_dco_10213), NAG_dco_10212(NAG_dco_10214) {}
  explicit NAG_dco_9788(NAG_dco_9788 const& NAG_dco_9778, NAG_dco_9806) : NAG_dco_9788(NAG_dco_9778) {}
  inline const NAG_dco_9780 NAG_dco_10154() const {
    return NAG_dco_9784::NAG_dco_10215(this->_value(), NAG_dco_10211._value(), NAG_dco_10212._value());
  }
  inline const NAG_dco_9780 NAG_dco_10156() const {
    return NAG_dco_9784::NAG_dco_10216(this->_value(), NAG_dco_10211._value(), NAG_dco_10212._value());
  }
  inline const NAG_dco_9780 NAG_dco_10207(const int NAG_dco_9826) const {
    return NAG_dco_9784::NAG_dco_10206(NAG_dco_10211.NAG_dco_10207(NAG_dco_9826),
                                       NAG_dco_10212.NAG_dco_10207(NAG_dco_9826));
  }
  auto& NAG_dco_10153() const { return NAG_dco_10211; }
  auto& NAG_dco_10155() const { return NAG_dco_10212; }
};
template <class NAG_dco_9780, class NAG_dco_9786, class NAG_dco_9787, class NAG_dco_9784, typename>
struct NAG_dco_9789 : public NAG_dco_9782<NAG_dco_9780, typename NAG_dco_9786::data_t> {
  using NAG_dco_10209 = std::conditional_t<HAS_AUTO_SUPPORT, NAG_dco_9786, NAG_dco_9786 const&>;
  NAG_dco_10209 NAG_dco_10211;
  const NAG_dco_9787 NAG_dco_10212;
  typedef typename NAG_dco_9786::data_t data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t NAG_dco_10203;
  using NAG_dco_10204 = NAG_dco_9784;
  template <bool NAG_dco_10205 = HAS_AUTO_SUPPORT>
  explicit NAG_dco_9789(const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
                        std::enable_if_t<(NAG_dco_10205 && !HAS_AUTO_SUPPORT_LEGACY) &&
                                         !(NAG_dco_9913<NAG_dco_9784> && NAG_dco_9906<NAG_dco_9786>)>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_10206(NAG_dco_10213._value(), NAG_dco_10214)),
        NAG_dco_10211(NAG_dco_10213, NAG_dco_9806()), NAG_dco_10212(NAG_dco_10214) {}
  template <bool NAG_dco_10205 = HAS_AUTO_SUPPORT>
  explicit NAG_dco_9789(const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
                        std::enable_if_t<(!NAG_dco_10205 || HAS_AUTO_SUPPORT_LEGACY) &&
                                         !(NAG_dco_9913<NAG_dco_9784> && NAG_dco_9906<NAG_dco_9786>)>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_10206(NAG_dco_10213._value(), NAG_dco_10214)),
        NAG_dco_10211(NAG_dco_10213), NAG_dco_10212(NAG_dco_10214) {}
  template <class NAG_dco_9908 = NAG_dco_9784>
  explicit NAG_dco_9789(const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
                        std::enable_if_t<NAG_dco_9913<NAG_dco_9908> && NAG_dco_9906<NAG_dco_9786>>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_9909(NAG_dco_10213, NAG_dco_10214)),
        NAG_dco_10211(NAG_dco_10213), NAG_dco_10212(NAG_dco_10214) {}
  explicit NAG_dco_9789(NAG_dco_9789 const& NAG_dco_9778, NAG_dco_9806) : NAG_dco_9789(NAG_dco_9778) {}
  inline const NAG_dco_9780 NAG_dco_10207(const int NAG_dco_9826) const {
    return NAG_dco_9784::NAG_dco_10206(NAG_dco_10211.NAG_dco_10207(NAG_dco_9826), NAG_dco_10212);
  }
  inline const NAG_dco_9780 NAG_dco_10154() const {
    return NAG_dco_9784::NAG_dco_10215(this->NAG_dco_9937, NAG_dco_10211._value(), NAG_dco_10212);
  }
  auto& NAG_dco_10153() const { return NAG_dco_10211; }
  auto& NAG_dco_10155() const { return NAG_dco_10212; }
};
template <class NAG_dco_9780, class NAG_dco_9786, class NAG_dco_9787, class NAG_dco_9784, typename>
struct NAG_dco_9790 : public NAG_dco_9782<NAG_dco_9780, typename NAG_dco_9787::data_t> {
  using NAG_dco_10210 = std::conditional_t<HAS_AUTO_SUPPORT, NAG_dco_9787, NAG_dco_9787 const&>;
  const NAG_dco_9786 NAG_dco_10211;
  NAG_dco_10210 NAG_dco_10212;
  typedef typename NAG_dco_9787::data_t data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t NAG_dco_10203;
  using NAG_dco_10204 = NAG_dco_9784;
  template <bool NAG_dco_10205 = HAS_AUTO_SUPPORT>
  explicit NAG_dco_9790(const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
                        std::enable_if_t<(NAG_dco_10205 && !HAS_AUTO_SUPPORT_LEGACY) &&
                                         !(NAG_dco_9913<NAG_dco_9784> && NAG_dco_9906<NAG_dco_9787>)>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_10206(NAG_dco_10213, NAG_dco_10214._value())),
        NAG_dco_10211(NAG_dco_10213), NAG_dco_10212(NAG_dco_10214, NAG_dco_9806()) {}
  template <bool NAG_dco_10205 = HAS_AUTO_SUPPORT>
  explicit NAG_dco_9790(const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
                        std::enable_if_t<(!NAG_dco_10205 || HAS_AUTO_SUPPORT_LEGACY) &&
                                         !(NAG_dco_9913<NAG_dco_9784> && NAG_dco_9906<NAG_dco_9787>)>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_10206(NAG_dco_10213, NAG_dco_10214._value())),
        NAG_dco_10211(NAG_dco_10213), NAG_dco_10212(NAG_dco_10214) {}
  template <class NAG_dco_9908 = NAG_dco_9784>
  explicit NAG_dco_9790(const NAG_dco_9786& NAG_dco_10213, const NAG_dco_9787& NAG_dco_10214,
                        std::enable_if_t<(NAG_dco_9913<NAG_dco_9908> && NAG_dco_9906<NAG_dco_9787>)>* = nullptr)
      : NAG_dco_9782<NAG_dco_9780, data_t>(NAG_dco_9784::NAG_dco_9909(NAG_dco_10213, NAG_dco_10214)),
        NAG_dco_10211(NAG_dco_10213), NAG_dco_10212(NAG_dco_10214) {}
  explicit NAG_dco_9790(NAG_dco_9790 const& NAG_dco_9778, NAG_dco_9806) : NAG_dco_9790(NAG_dco_9778) {}
  inline const NAG_dco_9780 NAG_dco_10207(const int NAG_dco_9826) const {
    return NAG_dco_9784::NAG_dco_10206(NAG_dco_10211, NAG_dco_10212.NAG_dco_10207(NAG_dco_9826));
  }
  inline const NAG_dco_9780 NAG_dco_10156() const {
    return NAG_dco_9784::NAG_dco_10216(this->NAG_dco_9937, NAG_dco_10211, NAG_dco_10212._value());
  }
  auto& NAG_dco_10153() const { return NAG_dco_10211; }
  auto& NAG_dco_10155() const { return NAG_dco_10212; }
};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <typename NAG_dco_9791> struct passive_value_type_of {
  typedef NAG_dco_9791 TYPE;
};
template <typename NAG_dco_9791> class NAG_dco_10217 {
protected:
  NAG_dco_9791 NAG_dco_9937 = 0.0;

public:
  NAG_dco_10217() noexcept = default;
  template <typename NAG_dco_9918>
  NAG_dco_10217(const NAG_dco_9918& NAG_dco_9778) noexcept : NAG_dco_9937(NAG_dco_9778) {}
};
template <class NAG_dco_9780, class NAG_dco_9781>
struct active_type : private NAG_dco_10217<NAG_dco_9780>, public NAG_dco_9781 {
  typedef NAG_dco_10217<NAG_dco_9780> NAG_dco_10218;
  using NAG_dco_10218::NAG_dco_9937;

public:
  typedef NAG_dco_9781 data_t;
  typedef typename data_t::mode_t::value_t VALUE_TYPE;
  typedef typename data_t::mode_t::passive_t NAG_dco_10203;
  typedef typename data_t::mode_t::scalar_passive_t NAG_dco_10219;

private:
  typedef typename data_t::mode_t::scalar_value_t NAG_dco_10220;

public:
  DCO_STRONG_INLINE const NAG_dco_9780& _value() const { return NAG_dco_9937; }
  NAG_dco_9781 const& data() const { return *static_cast<NAG_dco_9781 const*>(this); }
  NAG_dco_9781& data() { return *static_cast<NAG_dco_9781*>(this); }
  DCO_STRONG_INLINE NAG_dco_9780& _value() { return NAG_dco_9937; }
  DCO_STRONG_INLINE active_type() = default;
  DCO_STRONG_INLINE active_type(const active_type& NAG_dco_10107)
      : NAG_dco_10218(NAG_dco_10107.NAG_dco_9937), NAG_dco_9781(NAG_dco_10107) {}
  DCO_STRONG_INLINE active_type(const NAG_dco_9781& NAG_dco_10050) : NAG_dco_10218(), NAG_dco_9781(NAG_dco_10050) {}
  DCO_STRONG_INLINE active_type(active_type const& NAG_dco_9778, NAG_dco_9806)
      : NAG_dco_10218(NAG_dco_9778.NAG_dco_9937), NAG_dco_9781(NAG_dco_9778, NAG_dco_9806()) {}
  template <typename NAG_dco_9791 = NAG_dco_9781>
  DCO_STRONG_INLINE
  operator std::enable_if_t<is_gbcp_type<NAG_dco_9791>::value,
                            typename NAG_dco_9940<active_type, NAG_dco_9791::gbcp_order>::NAG_dco_9941>() const {
    return NAG_dco_9940<active_type, NAG_dco_9791::gbcp_order>::value(*this);
  }
  template <typename NAG_dco_9791 = NAG_dco_9781>
  DCO_STRONG_INLINE
  operator std::enable_if_t<is_gbcp_type<NAG_dco_9791>::value,
                            typename NAG_dco_9940<active_type, NAG_dco_9791::gbcp_order>::NAG_dco_9809>() {
    return NAG_dco_9940<active_type, NAG_dco_9791::gbcp_order>::value(*this);
  }
  template <typename NAG_dco_9918, typename NAG_dco_9791 = NAG_dco_9781>
  DCO_STRONG_INLINE std::enable_if_t<
      (dco::mode<NAG_dco_9918>::order > 0 && dco::internal::is_gbcp_type<NAG_dco_9791>::value &&
       std::is_same_v<typename NAG_dco_9791::mode_t::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
      active_type>&
  operator=(const NAG_dco_9918& NAG_dco_10164) {
    NAG_dco_9937 = NAG_dco_10164;
    return *this;
  }
  template <typename NAG_dco_9918, typename NAG_dco_9791 = NAG_dco_9781>
  DCO_STRONG_INLINE
  active_type(const NAG_dco_9918& NAG_dco_10221,
              std::enable_if_t<
                  (dco::mode<NAG_dco_9918>::order > 0 && dco::internal::is_gbcp_type<NAG_dco_9791>::value &&
                   std::is_same_v<typename NAG_dco_9791::mode_t::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
                  void*> = NULL) noexcept
      : NAG_dco_10218(NAG_dco_10221) {}
  template <typename TYPE>
  DCO_STRONG_INLINE active_type(const TYPE& NAG_dco_10221, typename dco_type_constructable_from<TYPE>::type* = 0)
      : NAG_dco_10218(NAG_dco_10221) {}
  template <typename TYPE, typename NAG_dco_9791 = NAG_dco_9781,
            typename NAG_dco_10222 = std::enable_if_t<!is_gbcp_type<NAG_dco_9791>::value>,
            typename NAG_dco_10200 = std::enable_if_t<dco_explicit_type_cast_to<TYPE>::value>>
  explicit operator TYPE() const {
    return static_cast<TYPE>(_value());
  }
  template <typename TYPE>
  DCO_STRONG_INLINE
  active_type(const TYPE& NAG_dco_10221,
              std::enable_if_t<NAG_dco_9928<typename TYPE::data_t::mode_t, typename data_t::mode_t>::value, void*> =
                  NULL) noexcept
      : NAG_dco_10218(NAG_dco_10221) {}
  DCO_STRONG_INLINE active_type(const NAG_dco_10203& NAG_dco_10221) noexcept : NAG_dco_10218(NAG_dco_10221) {}
  template <typename scalar_passive_t>
  DCO_STRONG_INLINE active_type(const scalar_passive_t& NAG_dco_10221,
                                std::enable_if_t<!std::is_same_v<NAG_dco_10203, scalar_passive_t> &&
                                                     std::is_same_v<NAG_dco_10219, scalar_passive_t>,
                                                 void*> = NULL)
      : NAG_dco_10218(NAG_dco_10221) {}
  DCO_STRONG_INLINE active_type& operator=(const active_type& NAG_dco_9778) {
    NAG_dco_9781::operator=(NAG_dco_9778);
    NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator=(const NAG_dco_10203& NAG_dco_10164) {
    this->NAG_dco_9936(NAG_dco_10164);
    this->NAG_dco_9937 = NAG_dco_10164;
    this->clear();
    return *this;
  }
  template <typename scalar_passive_t>
  DCO_STRONG_INLINE std::enable_if_t<
      !std::is_same_v<NAG_dco_10203, scalar_passive_t> && std::is_same_v<NAG_dco_10219, scalar_passive_t>, active_type>&
  operator=(const scalar_passive_t& NAG_dco_10164) {
    this->NAG_dco_9936(NAG_dco_10164);
    this->NAG_dco_9937 = NAG_dco_10164;
    this->clear();
    return *this;
  }
  template <class NAG_dco_10223, class NAG_dco_10224>
  DCO_STRONG_INLINE
      std::enable_if_t<NAG_dco_9928<typename NAG_dco_10224::mode_t, typename data_t::mode_t>::value, active_type>&
      operator=(const active_type<NAG_dco_10223, NAG_dco_10224>& NAG_dco_10164) {
    this->NAG_dco_9936(NAG_dco_10164);
    NAG_dco_9937 = NAG_dco_10164;
    this->clear();
    return *this;
  }
  template <typename TYPE>
  DCO_STRONG_INLINE typename dco_type_constructable_from<TYPE, active_type>::type&
  operator=(const TYPE& NAG_dco_10221) {
    this->NAG_dco_9936(NAG_dco_10221);
    NAG_dco_9937 = NAG_dco_10221;
    this->clear();
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    this->NAG_dco_9936(NAG_dco_9778);
    this->NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator=(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    this->NAG_dco_9936(NAG_dco_9778);
    this->NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    this->NAG_dco_9936(NAG_dco_9778);
    this->NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator=(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    this->NAG_dco_9936(NAG_dco_9778);
    this->NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    this->NAG_dco_9936(NAG_dco_9778);
    this->NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator=(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    this->NAG_dco_9936(NAG_dco_9778);
    this->NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
    return *this;
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  DCO_ALWAYS_INLINE
  active_type(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
    this->NAG_dco_9936(NAG_dco_9778);
    this->NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type&
  operator=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
    this->NAG_dco_9936(NAG_dco_9778);
    this->NAG_dco_9937 = NAG_dco_9778.NAG_dco_9937;
    return *this;
  }
  template <typename NAG_dco_9918, typename NAG_dco_9791 = NAG_dco_9781>
  DCO_ALWAYS_INLINE std::enable_if_t<
      (dco::mode<NAG_dco_9918>::order > 0 && dco::internal::is_gbcp_type<NAG_dco_9791>::value &&
       std::is_same_v<typename NAG_dco_9791::mode_t::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
      active_type>&
  operator+=(const NAG_dco_9918& NAG_dco_9778) {
    *this = *this + NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10224>
  DCO_ALWAYS_INLINE active_type& operator+=(const active_type<NAG_dco_9780, NAG_dco_10224>& NAG_dco_9778) {
    *this = *this + NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator+=(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this + NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator+=(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this + NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator+=(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this + NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type&
  operator+=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this + NAG_dco_9778;
    return *this;
  }
  DCO_ALWAYS_INLINE active_type& operator+=(const VALUE_TYPE& NAG_dco_9778) {
    if constexpr (dco::internal::NAG_dco_9916<active_type<NAG_dco_9780, NAG_dco_9781>>)
      *this = *this + NAG_dco_9778;
    else
      this->_value() += NAG_dco_9778;
    return *this;
  }
  template <typename NAG_dco_9918, typename NAG_dco_9791 = NAG_dco_9781>
  DCO_ALWAYS_INLINE std::enable_if_t<
      (dco::mode<NAG_dco_9918>::order > 0 && dco::internal::is_gbcp_type<NAG_dco_9791>::value &&
       std::is_same_v<typename NAG_dco_9791::mode_t::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
      active_type>&
  operator-=(const NAG_dco_9918& NAG_dco_9778) {
    *this = *this - NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10224>
  DCO_ALWAYS_INLINE active_type& operator-=(const active_type<NAG_dco_9780, NAG_dco_10224>& NAG_dco_9778) {
    *this = *this - NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator-=(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this - NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator-=(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this - NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator-=(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this - NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type&
  operator-=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this - NAG_dco_9778;
    return *this;
  }
  DCO_ALWAYS_INLINE active_type& operator-=(const VALUE_TYPE& NAG_dco_9778) {
    if constexpr (dco::internal::NAG_dco_9916<active_type<NAG_dco_9780, NAG_dco_9781>>)
      *this = *this - NAG_dco_9778;
    else
      this->_value() -= NAG_dco_9778;
    return *this;
  }
  template <typename NAG_dco_9918, typename NAG_dco_9791 = NAG_dco_9781>
  DCO_ALWAYS_INLINE std::enable_if_t<
      (dco::mode<NAG_dco_9918>::order > 0 && dco::internal::is_gbcp_type<NAG_dco_9791>::value &&
       std::is_same_v<typename NAG_dco_9791::mode_t::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
      active_type>&
  operator*=(const NAG_dco_9918& NAG_dco_9778) {
    *this = *this * NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10224>
  DCO_ALWAYS_INLINE active_type& operator*=(const active_type<NAG_dco_9780, NAG_dco_10224>& NAG_dco_9778) {
    *this = *this * NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator*=(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this * NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator*=(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this * NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator*=(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this * NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type&
  operator*=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this * NAG_dco_9778;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator*=(const VALUE_TYPE& NAG_dco_9778) {
    *this = *this * NAG_dco_9778;
    return *this;
  }
  template <typename NAG_dco_9918, typename NAG_dco_9791 = NAG_dco_9781>
  DCO_ALWAYS_INLINE std::enable_if_t<
      (dco::mode<NAG_dco_9918>::order > 0 && dco::internal::is_gbcp_type<NAG_dco_9791>::value &&
       std::is_same_v<typename NAG_dco_9791::mode_t::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
      active_type>&
  operator/=(const NAG_dco_9918& NAG_dco_9778) {
    *this = *this / NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10224>
  DCO_ALWAYS_INLINE active_type& operator/=(const active_type<NAG_dco_9780, NAG_dco_10224>& NAG_dco_9778) {
    *this = *this / NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator/=(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this / NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator/=(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this / NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type& operator/=(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this / NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  DCO_ALWAYS_INLINE active_type&
  operator/=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
    *this = *this / NAG_dco_9778;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator/=(const VALUE_TYPE& NAG_dco_9778) {
    *this = *this / NAG_dco_9778;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator++() {
    ++this->NAG_dco_9937;
    return *this;
  }
  DCO_STRONG_INLINE active_type& operator--() {
    --this->NAG_dco_9937;
    return *this;
  }
  DCO_STRONG_INLINE active_type operator++(int) {
    active_type NAG_dco_9849(*this);
    ++this->NAG_dco_9937;
    return NAG_dco_9849;
  }
  DCO_STRONG_INLINE active_type operator--(int) {
    active_type NAG_dco_9849(*this);
    --this->NAG_dco_9937;
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780, class NAG_dco_9781>
struct passive_value_type_of<active_type<NAG_dco_9780, NAG_dco_9781>> {
  typedef typename passive_value_type_of<NAG_dco_9780>::TYPE TYPE;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_10225, typename NAG_dco_10226>
void assign_from_interop(NAG_dco_10225& NAG_dco_9848, NAG_dco_10226 const& NAG_dco_9847) {
  if constexpr (sizeof(NAG_dco_10225) > sizeof(NAG_dco_10226)) {
    throw dco::exception::create<std::runtime_error>("Internal: Using iterator interop type, which is too small.");
  }
  std::memcpy(reinterpret_cast<void*>(&NAG_dco_9848), &NAG_dco_9847, sizeof(NAG_dco_10225));
}
template <typename NAG_dco_10225, typename NAG_dco_10226>
static void assign_to_interop(NAG_dco_10225 const& NAG_dco_9847, NAG_dco_10226& NAG_dco_9848) {
  if constexpr (sizeof(NAG_dco_10225) > sizeof(NAG_dco_10226)) {
    throw dco::exception::create<std::runtime_error>("Internal: Using iterator interop type, which is too small.");
  }
  std::memcpy(&NAG_dco_9848, reinterpret_cast<void const*>(&NAG_dco_9847), sizeof(NAG_dco_10225));
}
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <class NAG_dco_9804, memory_model::TYPE NAG_dco_10227>
class NAG_dco_10006<memory_model::BLOB_TAPE_SPLINT, NAG_dco_9804, NAG_dco_10227> : public NAG_dco_9983<NAG_dco_9804>,
                                                                                   object_logger {
  typedef NAG_dco_9983<NAG_dco_9804> NAG_dco_9986;

public:
  typedef typename NAG_dco_9803<NAG_dco_9804>::type NAG_dco_10228;
  enum NAG_dco_10229 { NAG_dco_10230, NAG_dco_10231 };
  struct entry {
    NAG_dco_10228* NAG_dco_10232;
    index_t* NAG_dco_10233;
    DCO_ALWAYS_INLINE entry(NAG_dco_10228* NAG_dco_10234, index_t* NAG_dco_10235)
        : NAG_dco_10232(NAG_dco_10234), NAG_dco_10233(NAG_dco_10235) {};
    DCO_ALWAYS_INLINE index_t arg() { return (*NAG_dco_10233 < 0) ? std::abs(*NAG_dco_10233) - 1 : *NAG_dco_10233; }
    DCO_ALWAYS_INLINE NAG_dco_10228& pval() { return *NAG_dco_10232; }
    DCO_ALWAYS_INLINE NAG_dco_10228 pval() const { return *NAG_dco_10232; }
    DCO_ALWAYS_INLINE bool is_sentinel() { return *NAG_dco_10233 < 0; }
    DCO_ALWAYS_INLINE static bool is_sentinel(index_t* NAG_dco_9850) { return *NAG_dco_9850 < 0; }
    DCO_ALWAYS_INLINE static index_t NAG_dco_10236(index_t NAG_dco_10102) { return -NAG_dco_10102 - 1; }
    static std::size_t size_of() { return sizeof(NAG_dco_10228) + sizeof(index_t); }
    bool operator>=(entry const& NAG_dco_9975) const { return NAG_dco_10232 >= NAG_dco_9975.NAG_dco_10232; }
  };
  class iterator {
  public:
    index_t NAG_dco_9765;
    entry NAG_dco_10237;
    template <typename NAG_dco_10226> void assign_from_interop(NAG_dco_10226 const& NAG_dco_9847) {
      internal::assign_from_interop(*this, NAG_dco_9847);
    }
    template <typename NAG_dco_10226> void assign_to_interop(NAG_dco_10226& NAG_dco_9848) const {
      internal::assign_to_interop(*this, NAG_dco_9848);
    }
    DCO_ALWAYS_INLINE const entry* operator->() const { return &NAG_dco_10237; }
    DCO_ALWAYS_INLINE entry* operator->() { return &NAG_dco_10237; }
    DCO_ALWAYS_INLINE const entry& operator*() const { return NAG_dco_10237; }
    DCO_ALWAYS_INLINE entry& operator*() { return NAG_dco_10237; }
    DCO_ALWAYS_INLINE void NAG_dco_10238() {
      NAG_dco_10237.NAG_dco_10232++;
      NAG_dco_10237.NAG_dco_10233--;
      if constexpr (NAG_dco_9751) {
        if (static_cast<void*>(NAG_dco_10237.NAG_dco_10232) >= static_cast<void*>(NAG_dco_10237.NAG_dco_10233))
          throw dco::exception::create<std::runtime_error>(
              "Blob tape (splint) container overflow. Allocate bigger blob or use chunk tape container instead.");
      }
    }
    DCO_ALWAYS_INLINE index_t NAG_dco_10239() {
      if constexpr (IS_DEBUG && std::is_same_v<index_t, int>) {
        if (NAG_dco_9765 == std::numeric_limits<index_t>::max()) {
          throw dco::exception::create<std::runtime_error>(
              "Tape index overflow. Define DCO_TAPE_USE_INT64 to use 64-bit integers.");
        }
      }
      return ++NAG_dco_9765;
    }
    DCO_ALWAYS_INLINE explicit iterator() : NAG_dco_9765(-1), NAG_dco_10237(NULL, NULL) {}
    DCO_ALWAYS_INLINE explicit iterator(NAG_dco_10228* NAG_dco_10234, index_t* NAG_dco_10235,
                                        index_t index = index_t(-1))
        : NAG_dco_9765(index), NAG_dco_10237(NAG_dco_10234, NAG_dco_10235) {}
    DCO_ALWAYS_INLINE index_t index() const { return NAG_dco_9765; }
    DCO_ALWAYS_INLINE index_t& index() { return NAG_dco_9765; }
    bool is_sentinel() const { return entry::is_sentinel(NAG_dco_10237.NAG_dco_10233); }
    DCO_ALWAYS_INLINE void operator--() {
      if (entry::is_sentinel(NAG_dco_10237.NAG_dco_10233))
        NAG_dco_9765--;
      NAG_dco_10237.NAG_dco_10232--;
      NAG_dco_10237.NAG_dco_10233++;
    }
    DCO_ALWAYS_INLINE iterator operator--(int) {
      iterator NAG_dco_10055(*this);
      operator--();
      return NAG_dco_10055;
    }
    DCO_ALWAYS_INLINE bool operator==(const iterator& NAG_dco_9975) const {
      return NAG_dco_10237.NAG_dco_10232 == NAG_dco_9975.NAG_dco_10237.NAG_dco_10232;
    }
    DCO_ALWAYS_INLINE bool operator!=(const iterator& NAG_dco_9975) const { return !operator==(NAG_dco_9975); }
    DCO_ALWAYS_INLINE bool operator<(const iterator& NAG_dco_9975) const {
      return NAG_dco_10237.NAG_dco_10232 < NAG_dco_9975.NAG_dco_10237.NAG_dco_10232;
    }
    DCO_ALWAYS_INLINE bool operator>=(const iterator& NAG_dco_9975) const { return !operator<(NAG_dco_9975); }
    DCO_ALWAYS_INLINE bool operator>(const iterator& NAG_dco_9975) const {
      return NAG_dco_10237.NAG_dco_10232 > NAG_dco_9975.NAG_dco_10237.NAG_dco_10232;
    }
    DCO_ALWAYS_INLINE bool operator<=(const iterator& NAG_dco_9975) const { return !operator>(NAG_dco_9975); }
  };
  class edge_inserter {
    iterator& _current;
    index_t NAG_dco_9765;

  public:
    edge_inserter(iterator& current) : _current(current), NAG_dco_9765(0) {}
    iterator& current() { return _current; }
    edge_inserter& operator=(edge_inserter NAG_dco_9975) {
      swap(NAG_dco_9975);
      return *this;
    }
    index_t index() const { return NAG_dco_9765; }
    void swap(edge_inserter& NAG_dco_9975) {
      std::swap(_current, NAG_dco_9975._current);
      std::swap(NAG_dco_9765, NAG_dco_9975.NAG_dco_9765);
    }
    DCO_ALWAYS_INLINE_IF_AGRESSIVE void insert(const index_t& NAG_dco_10102, const NAG_dco_10228& pval) {
      if constexpr (IS_DEBUG) {
        if (_current.index() < NAG_dco_10102)
          throw dco::exception::create<std::runtime_error>(
              "DCO_DEBUG: tape index of read variable bigger than current progvarcounter.");
      }
      if (NAG_dco_9765 == 0) {
        _current.NAG_dco_10238();
        new (_current.NAG_dco_10237.NAG_dco_10232) NAG_dco_10228(pval);
        new (_current.NAG_dco_10237.NAG_dco_10233) index_t(entry::NAG_dco_10236(NAG_dco_10102));
        NAG_dco_9765 = _current.NAG_dco_10239();
        DCO_LOG(logDEBUG2) << "inserting first entry, index now = " << NAG_dco_9765 << "; pval = " << pval
                           << ", target = " << NAG_dco_10102;
        return;
      }
      if constexpr (NAG_dco_9753) {
        if (NAG_dco_10102 == *(_current.NAG_dco_10237.NAG_dco_10233)) {
          *(_current.NAG_dco_10237.NAG_dco_10232) += pval;
          return;
        }
      }
      _current.NAG_dco_10238();
      new (_current.NAG_dco_10237.NAG_dco_10232) NAG_dco_10228(pval);
      new (_current.NAG_dco_10237.NAG_dco_10233) index_t(NAG_dco_10102);
    }

  private:
    edge_inserter(const edge_inserter& NAG_dco_9975);
  };

protected:
  void init(tape_options const& NAG_dco_10027, index_t NAG_dco_10240 = 0) {
    NAG_dco_10241 = NAG_dco_10027;
    std::size_t NAG_dco_10242;
    if (NAG_dco_10027.write_to_file())
      NAG_dco_10242 = NAG_dco_10027.blob_size_in_byte();
    else
      NAG_dco_10242 = get_allocation_size(NAG_dco_10027.blob_size_in_byte());
    std::size_t NAG_dco_10243 = NAG_dco_10242 / entry::size_of();
    DCO_LOG(logDEBUG1) << "BLOB SPLINT container: user requested allocation size = " << NAG_dco_10242
                       << "; size of element = " << entry::size_of() << "; max elements in memory = " << NAG_dco_10243;
    if (static_cast<double>(NAG_dco_10243) / static_cast<double>(std::numeric_limits<index_t>::max()) > 1.0) {
      NAG_dco_10243 = std::numeric_limits<index_t>::max();
      DCO_LOG(logDEBUG1)
          << "BLOB SPLINT container: too many elements requested for currently used index_t. Setting to: "
          << NAG_dco_10243 * 1.e-6 << "M elements";
    }
    index_t NAG_dco_10244 = static_cast<index_t>(NAG_dco_10243);
    std::size_t NAG_dco_10245 = static_cast<std::size_t>(NAG_dco_10244) * entry::size_of();
    DCO_LOG(logDEBUG) << "BLOB SPLINT container: trying allocation for = " << NAG_dco_10245 / 1024 << "K ~=~ "
                      << NAG_dco_10244 * 1.e-6 << "M elements";
    NAG_dco_9984 = stce_1000001(&NAG_dco_10245, NAG_dco_10027.alloc_use_huge_pages());
    if (!NAG_dco_9984) {
      std::string NAG_dco_10246 = "";
      if (NAG_dco_10027.alloc_use_huge_pages()) {
        NAG_dco_10246 =
            " You are using huge pages; have you prepared your system correspondingly (see documentation as well)?";
      }
      throw dco::exception::create<std::runtime_error>("Could not allocate memory. Use environment variables "
                                                       "(DCO_MEM_RATIO, DCO_MAX_ALLOCATION) and see documentation." +
                                                       NAG_dco_10246);
    }
    NAG_dco_10244 = static_cast<index_t>(NAG_dco_10245 / entry::size_of());
    DCO_LOG(logINFO) << "BLOB SPLINT container: actually allocated size = " << NAG_dco_10245 / 1024 << "K ~=~ "
                     << NAG_dco_10244 * 1.e-6 << "M elements";
    NAG_dco_10247 = static_cast<NAG_dco_10228*>(NAG_dco_9984);
    NAG_dco_10248 = static_cast<index_t*>(NAG_dco_9984) + NAG_dco_10245 / sizeof(index_t) - 1;
    _current = iterator(NAG_dco_10247, NAG_dco_10248, NAG_dco_10240);
    NAG_dco_10249 = iterator(NAG_dco_10247, NAG_dco_10248, NAG_dco_10240);
    NAG_dco_10250 = iterator(NAG_dco_10247 + NAG_dco_10244 - 1, NAG_dco_10248 - NAG_dco_10244 + 1,
                             std::numeric_limits<index_t>::max());
    if (static_cast<std::size_t>(reinterpret_cast<char*>(NAG_dco_10248 + 1) - reinterpret_cast<char*>(NAG_dco_10247)) <
        entry::size_of()) {
      dco::dealloc(NAG_dco_9984);
      throw dco::exception::create<std::runtime_error>(
          "Blob/chunk size too small. Use bigger blob/chunk size (at least " + std::to_string(entry::size_of()) +
          " bytes).");
    }
    new (_current.NAG_dco_10237.NAG_dco_10232) NAG_dco_10228(static_cast<NAG_dco_10228>(0.0));
    new (_current.NAG_dco_10237.NAG_dco_10233) index_t(entry::NAG_dco_10236(0));
  }

public:
  DCO_ALWAYS_INLINE explicit NAG_dco_10006(tape_options const& NAG_dco_10027, NAG_dco_9804& tape)
      : NAG_dco_9986(tape), object_logger("BLOB SPLINT container"), NAG_dco_9984(0), NAG_dco_10247(0), NAG_dco_10248(0),
        _current(), NAG_dco_10249(), NAG_dco_10250(), NAG_dco_10251(NAG_dco_10231) {
    assert(NAG_dco_10227 != memory_model::NAG_dco_9777);
    init(NAG_dco_10027);
  }
  DCO_ALWAYS_INLINE explicit NAG_dco_10006(iterator& NAG_dco_9841, NAG_dco_9804& tape)
      : NAG_dco_9986(tape), object_logger("BLOB SPLINT container"), NAG_dco_9984(0), NAG_dco_10247(0), NAG_dco_10248(0),
        _current(NAG_dco_9841), NAG_dco_10249(), NAG_dco_10250(), NAG_dco_10251(NAG_dco_10231) {
    assert(NAG_dco_10227 == memory_model::NAG_dco_9777);
  }
  DCO_ALWAYS_INLINE explicit NAG_dco_10006(NAG_dco_10006& NAG_dco_9847, NAG_dco_10229 NAG_dco_10252)
      : NAG_dco_9986(NAG_dco_9847), object_logger("BLOB SPLINT container"), NAG_dco_9984(0), NAG_dco_10247(0),
        NAG_dco_10248(0), _current(), NAG_dco_10249(), NAG_dco_10250(), NAG_dco_10251(NAG_dco_10252) {
    if (NAG_dco_10252 == NAG_dco_10230) {
      NAG_dco_9984 = NAG_dco_9847.NAG_dco_9984;
      NAG_dco_10247 = NAG_dco_9847.NAG_dco_10247;
      NAG_dco_10248 = NAG_dco_9847.NAG_dco_10248;
      _current = iterator(NAG_dco_9847.NAG_dco_10247, NAG_dco_9847.NAG_dco_10248, NAG_dco_9847.current().index());
      NAG_dco_10249 = _current;
      NAG_dco_10250 = NAG_dco_9847.NAG_dco_10250;
    } else {
      init(NAG_dco_9847.NAG_dco_10027());
    }
  }
  DCO_ALWAYS_INLINE ~NAG_dco_10006() {
    if (NAG_dco_10251 == NAG_dco_10231) {
      dco::dealloc(NAG_dco_9984);
    }
  }
  iterator start() { return NAG_dco_10249; }
  iterator start() const { return NAG_dco_10249; }
  iterator end() { return NAG_dco_10250; }
  iterator end() const { return NAG_dco_10250; }
  iterator rend() { return start(); }
  iterator current() const { return _current; }
  iterator current() { return _current; }
  iterator& current_ref() { return _current; }
  iterator& insert_ref() { return _current; }
  iterator rbegin() const { return current(); }
  bool empty() const { return _current == start(); }
  index_t size(iterator NAG_dco_9847, iterator NAG_dco_9848) const {
    if (NAG_dco_9847 < NAG_dco_9848)
      std::swap(NAG_dco_9847, NAG_dco_9848);
    return static_cast<index_t>(NAG_dco_9847->NAG_dco_10232 - NAG_dco_9848->NAG_dco_10232);
  }
  index_t size(iterator NAG_dco_9847) const { return size(NAG_dco_9847, start()); }
  index_t size() const { return size(current(), start()); }
  index_t NAG_dco_10253() const { return size(NAG_dco_10250, start()); }
  std::size_t size_in_byte() const { return static_cast<std::size_t>(size(current(), start())) * entry::size_of(); }
  std::size_t NAG_dco_10254() const {
    return static_cast<std::size_t>(size(NAG_dco_10250, start()) + 1) * entry::size_of();
  }
  void erase(const iterator& NAG_dco_9850) {
    assert(NAG_dco_10247);
    assert(NAG_dco_10248);
    assert(NAG_dco_9850 <= NAG_dco_10250);
    if (NAG_dco_9850 > _current)
      throw dco::exception::create<std::runtime_error>(
          "Blob splint container: Erasing to a position behind current position.");
    _current = NAG_dco_9850;
  }
  void erase() {
    assert(NAG_dco_10247);
    assert(NAG_dco_10248);
    _current = NAG_dco_10249;
  }
  void NAG_dco_10255(const iterator&) {}
  void NAG_dco_10256() {}
  index_t NAG_dco_10257() const { return _current.index() + 1; }
  template <typename NAG_dco_10258> void NAG_dco_10259(NAG_dco_10258 const* const NAG_dco_9975) {
    current_ref().index() = NAG_dco_9975->current().index();
  }
  void NAG_dco_10260(iterator const& NAG_dco_9850) { current_ref().index() = NAG_dco_9850.index(); }
  tape_options NAG_dco_10027() const { return NAG_dco_10241; }
  char* NAG_dco_10261() { return reinterpret_cast<char*>(NAG_dco_9984); }
  std::size_t NAG_dco_10262() {
    return static_cast<std::size_t>(
        std::abs(reinterpret_cast<char*>(NAG_dco_10247) - reinterpret_cast<char*>(NAG_dco_10248)));
  }

private:
  NAG_dco_10006(const NAG_dco_10006& NAG_dco_9975);
  void* NAG_dco_9984;
  NAG_dco_10228* NAG_dco_10247;
  index_t* NAG_dco_10248;

protected:
  std::conditional_t<NAG_dco_10227 == memory_model::NAG_dco_9777, iterator&, iterator> _current;
  iterator NAG_dco_10249;
  iterator NAG_dco_10250;
  tape_options NAG_dco_10241;
  NAG_dco_10229 NAG_dco_10251;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9804, memory_model::TYPE NAG_dco_10227>
class NAG_dco_10006<memory_model::BLOB_TAPE, NAG_dco_9804, NAG_dco_10227> : public NAG_dco_9983<NAG_dco_9804>,
                                                                            public object_logger {
  typedef NAG_dco_9983<NAG_dco_9804> NAG_dco_9986;
  typedef NAG_dco_9804 tape_t;

public:
  typedef typename NAG_dco_9803<NAG_dco_9804>::type NAG_dco_10228;
  enum NAG_dco_10229 { NAG_dco_10230, NAG_dco_10231 };
  struct entry {
    index_t NAG_dco_10158;
    NAG_dco_10228 NAG_dco_10139;

  public:
    static std::size_t size_of() { return sizeof(entry); }
    entry(index_t arg = 0, NAG_dco_10228 const& pval = NAG_dco_10228(0.)) : NAG_dco_10158(arg), NAG_dco_10139(pval) {}
    DCO_STRONG_INLINE index_t arg() const { return (NAG_dco_10158 < 0) ? std::abs(NAG_dco_10158) - 1 : NAG_dco_10158; }
    DCO_STRONG_INLINE static index_t NAG_dco_10236(const index_t& arg) { return -arg - 1; }
    DCO_STRONG_INLINE bool is_sentinel() const { return NAG_dco_10158 < 0; }
    DCO_STRONG_INLINE void NAG_dco_10263(const NAG_dco_10228& NAG_dco_9981) { NAG_dco_10139 += NAG_dco_9981; }
    DCO_STRONG_INLINE NAG_dco_10228 pval() const { return NAG_dco_10139; }
  };
  class iterator {
    entry* NAG_dco_10264;
    index_t NAG_dco_9765;
    entry const* NAG_dco_10265;

  public:
    template <class NAG_dco_10266> void assign_to_interop(NAG_dco_10266& NAG_dco_9970) const {
      assert(sizeof(iterator) <= sizeof(NAG_dco_10266));
      std::memcpy(&NAG_dco_9970, this, sizeof(iterator));
    }
    template <class NAG_dco_10266> void assign_from_interop(const NAG_dco_10266& NAG_dco_9970) {
      assert(sizeof(iterator) <= sizeof(NAG_dco_10266));
      std::memcpy(static_cast<void*>(this), &NAG_dco_9970, sizeof(iterator));
    }
    void NAG_dco_10267(index_t NAG_dco_9826) { NAG_dco_9765 = NAG_dco_9826; }
    void NAG_dco_10238() {
      NAG_dco_10264++;
      if (NAG_dco_10264 > NAG_dco_10265) {
        throw dco::exception::create<std::runtime_error>(
            "Blob tape container overflow. Allocate bigger blob or use chunk tape container instead.");
      }
    }
    index_t index() const { return NAG_dco_9765; }
    index_t& index() { return NAG_dco_9765; }
    index_t NAG_dco_10239() {
      if constexpr (IS_DEBUG && std::is_same_v<index_t, int>) {
        if (NAG_dco_9765 == std::numeric_limits<index_t>::max()) {
          throw dco::exception::create<std::runtime_error>(
              "Tape index overflow. Define DCO_TAPE_USE_INT64 to use 64-bit integers.");
        }
      }
      return ++NAG_dco_9765;
    }
    void NAG_dco_9768(entry const* end) { NAG_dco_10265 = end; }
    explicit iterator(entry* NAG_dco_9850 = 0, index_t index = index_t(-1))
        : NAG_dco_10264(NAG_dco_9850), NAG_dco_9765(index) {}
    void operator--() {
      if (NAG_dco_10264->is_sentinel())
        NAG_dco_9765--;
      NAG_dco_10264--;
    }
    bool is_sentinel() const { return NAG_dco_10264->is_sentinel(); }
    iterator operator--(int) {
      iterator NAG_dco_10055(*this);
      operator--();
      return NAG_dco_10055;
    }
    entry* operator*() { return NAG_dco_10264; }
    entry* operator->() { return NAG_dco_10264; }
    entry* operator*() const { return NAG_dco_10264; }
    entry* operator->() const { return NAG_dco_10264; }
    bool operator==(const iterator& NAG_dco_9975) const { return NAG_dco_10264 == NAG_dco_9975.NAG_dco_10264; }
    bool operator!=(const iterator& NAG_dco_9975) const { return !operator==(NAG_dco_9975); }
    bool operator<(const iterator& NAG_dco_9975) const { return NAG_dco_10264 < NAG_dco_9975.NAG_dco_10264; }
    bool operator>=(const iterator& NAG_dco_9975) const { return !operator<(NAG_dco_9975); }
    bool operator>(const iterator& NAG_dco_9975) const { return NAG_dco_10264 > NAG_dco_9975.NAG_dco_10264; }
    bool operator<=(const iterator& NAG_dco_9975) const { return !operator>(NAG_dco_9975); }
    friend std::ostream& operator<<(std::ostream& NAG_dco_10268, const iterator& NAG_dco_9970) {
      NAG_dco_10268 << "(" << NAG_dco_9970.NAG_dco_10264 << ":" << NAG_dco_9970.NAG_dco_9765 << ")";
      return NAG_dco_10268;
    }
  };
  class edge_inserter {
    iterator& _current;
    index_t NAG_dco_9765;

  public:
    edge_inserter(iterator& current) : _current(current), NAG_dco_9765(0) {}
    iterator& current() { return _current; }
    edge_inserter& operator=(edge_inserter NAG_dco_9975) {
      swap(NAG_dco_9975);
      return *this;
    }
    index_t index() const { return NAG_dco_9765; }
    void swap(edge_inserter& NAG_dco_9975) {
      std::swap(_current, NAG_dco_9975._current);
      std::swap(NAG_dco_9765, NAG_dco_9975.NAG_dco_9765);
    }
    DCO_ALWAYS_INLINE_IF_AGRESSIVE void insert(const index_t& NAG_dco_10102, const NAG_dco_10228& pval) {
      if constexpr (IS_DEBUG) {
        if (_current.index() < NAG_dco_10102)
          throw dco::exception::create<std::runtime_error>(
              "DCO_DEBUG: tape index of read variable bigger than current progvarcounter.");
      }
      if (NAG_dco_9765 == 0) {
        _current.NAG_dco_10238();
        new (*_current) entry(entry::NAG_dco_10236(NAG_dco_10102), pval);
        NAG_dco_9765 = _current.NAG_dco_10239();
        return;
      }
      if constexpr (NAG_dco_9753) {
        if (NAG_dco_10102 == _current->arg()) {
          _current->NAG_dco_10263(pval);
          return;
        }
      }
      _current.NAG_dco_10238();
      new (*_current) entry(NAG_dco_10102, pval);
    }

  private:
    edge_inserter(const edge_inserter& NAG_dco_9975);
  };
  explicit NAG_dco_10006(NAG_dco_10006& NAG_dco_9847, NAG_dco_10229 NAG_dco_10252)
      : NAG_dco_9986(NAG_dco_9847), object_logger("BLOB container"), NAG_dco_9984(0), _current(), NAG_dco_10249(),
        NAG_dco_10250(), NAG_dco_10251(NAG_dco_10252), NAG_dco_10241(NAG_dco_9847.NAG_dco_10241) {
    if (NAG_dco_10252 == NAG_dco_10230) {
      NAG_dco_9984 = NAG_dco_9847.NAG_dco_9984;
      _current = iterator(NAG_dco_9984, NAG_dco_9847.current().index());
      NAG_dco_10249 = _current;
      NAG_dco_10250 = NAG_dco_9847.NAG_dco_10250;
      _current.NAG_dco_9768(*NAG_dco_10250);
    } else if (NAG_dco_10252 == NAG_dco_10231) {
      index_t NAG_dco_10243 = allocate(NAG_dco_10241);
      _current = iterator(NAG_dco_9984, (NAG_dco_9847.current().index()));
      NAG_dco_10249 = iterator(NAG_dco_9984, (NAG_dco_9847.current().index()));
      NAG_dco_10250 = iterator(NAG_dco_9984 + NAG_dco_10243 - 1, std::numeric_limits<index_t>::max());
      _current.NAG_dco_9768(*NAG_dco_10250);
      if (*NAG_dco_10250 - *NAG_dco_10249 < 1) {
        std::stringstream NAG_dco_10269;
        NAG_dco_10269 << 2 * sizeof(entry);
        dco::dealloc(NAG_dco_9984);
        throw dco::exception::create<std::runtime_error>(
            "Blob/chunk size too small. Use bigger blob/chunk size [at least " + NAG_dco_10269.str() + " bytes].");
      }
      new (*_current) entry(entry::NAG_dco_10236(0));
    }
  }
  index_t allocate(const tape_options& NAG_dco_10027) {
    std::size_t NAG_dco_10245 = get_allocation_size(NAG_dco_10027.blob_size_in_byte());
    NAG_dco_9984 = static_cast<entry*>(stce_1000001(&NAG_dco_10245, NAG_dco_10027.alloc_use_huge_pages()));
    if (!NAG_dco_9984) {
      throw dco::exception::NAG_dco_9834<std::bad_alloc>("Could not allocate memory. Use environment variables "
                                                         "(DCO_MEM_RATIO, DCO_MAX_ALLOCATION) and see documentation.");
    }
    std::size_t NAG_dco_10270 = NAG_dco_10245 / entry::size_of();
    if (static_cast<double>(NAG_dco_10270) / static_cast<double>(std::numeric_limits<index_t>::max()) > 1.0) {
      NAG_dco_10270 = std::numeric_limits<index_t>::max();
    }
    index_t NAG_dco_10243 = static_cast<index_t>(NAG_dco_10270);
    DCO_LOG(logINFO) << "BLOB container; size = " << NAG_dco_10027.blob_size_in_byte() << "b ~=~ "
                     << NAG_dco_10027.blob_size_in_byte() / entry::size_of() << "elements";
    DCO_LOG(logINFO) << "BLOB container; tried allocation size = " << NAG_dco_10245 << "b ~=~ "
                     << NAG_dco_10245 / entry::size_of() << "elements";
    DCO_LOG(logDEBUG) << "sizeof(entry) = " << sizeof(entry) << " == " << entry::size_of();
    return NAG_dco_10243;
  }
  void init(tape_options const& NAG_dco_10027) {
    index_t NAG_dco_10243 = allocate(NAG_dco_10027);
    _current = iterator(NAG_dco_9984, 0);
    NAG_dco_10249 = iterator(NAG_dco_9984, 0);
    NAG_dco_10250 = iterator(NAG_dco_9984 + NAG_dco_10243 - 1, std::numeric_limits<index_t>::max());
    _current.NAG_dco_9768(*NAG_dco_10250);
    if (*NAG_dco_10250 + 1 - *NAG_dco_10249 < 1) {
      std::stringstream NAG_dco_10269;
      NAG_dco_10269 << 2 * sizeof(entry);
      dco::dealloc(NAG_dco_9984);
      throw dco::exception::create<std::runtime_error>(
          "Blob/chunk size too small. Use bigger blob/chunk size (at least " + NAG_dco_10269.str() + " bytes).");
    }
    new (*_current) entry(entry::NAG_dco_10236(0));
  }
  DCO_ALWAYS_INLINE explicit NAG_dco_10006(tape_options const& NAG_dco_10027, tape_t& tape)
      : NAG_dco_9986(tape), object_logger("BLOB container"), NAG_dco_9984(0), _current(), NAG_dco_10249(),
        NAG_dco_10250(), NAG_dco_10251(NAG_dco_10231), NAG_dco_10241(NAG_dco_10027) {
    assert(NAG_dco_10227 != memory_model::NAG_dco_9777);
    init(NAG_dco_10027);
  }
  DCO_ALWAYS_INLINE explicit NAG_dco_10006(iterator& NAG_dco_9841, tape_t& tape)
      : NAG_dco_9986(tape), object_logger("BLOB container"), NAG_dco_9984(0), _current(NAG_dco_9841), NAG_dco_10249(),
        NAG_dco_10250(), NAG_dco_10251(NAG_dco_10231), NAG_dco_10241(tape.NAG_dco_10027()) {
    assert(NAG_dco_10227 == memory_model::NAG_dco_9777);
  }
  DCO_ALWAYS_INLINE ~NAG_dco_10006() {
    if (NAG_dco_10251 == NAG_dco_10231)
      dco::dealloc(NAG_dco_9984);
  }
  char* NAG_dco_10261() { return reinterpret_cast<char*>(NAG_dco_9984); }
  std::size_t NAG_dco_10262() { return size() * sizeof(entry); }
  iterator current() const { return _current; }
  iterator current() { return _current; }
  iterator& insert_ref() { return _current; }
  iterator& current_ref() { return _current; }
  iterator start() { return NAG_dco_10249; }
  iterator start() const { return NAG_dco_10249; }
  iterator end() { return NAG_dco_10250; }
  iterator end() const { return NAG_dco_10250; }
  iterator rend() { return start(); }
  iterator rbegin() const { return current(); }
  bool empty() const { return _current == start(); }
  index_t size(iterator NAG_dco_9847, iterator NAG_dco_9848) const {
    if (NAG_dco_9847 < NAG_dco_9848)
      std::swap(NAG_dco_9847, NAG_dco_9848);
    return static_cast<index_t>(*NAG_dco_9847 - *NAG_dco_9848);
  }
  tape_options NAG_dco_10027() const { return NAG_dco_10241; }
  index_t size(iterator NAG_dco_9847) const { return size(NAG_dco_9847, start()); }
  index_t size() const { return size(current(), start()); }
  index_t NAG_dco_10253() const { return size(NAG_dco_10250, start()); }
  std::size_t size_in_byte() const { return static_cast<std::size_t>(size(current(), start())) * sizeof(entry); }
  std::size_t NAG_dco_10254() const {
    return static_cast<std::size_t>(size(NAG_dco_10250, start()) + 1) * sizeof(entry);
  }
  void erase(const iterator& NAG_dco_9850) {
    assert(NAG_dco_9984);
    assert(NAG_dco_9850 <= NAG_dco_10250);
    if (NAG_dco_9850 > _current)
      throw dco::exception::create<std::runtime_error>(
          "Blob container: Erasing to a position behind current position.");
    _current = NAG_dco_9850;
    _current.NAG_dco_9768(*NAG_dco_10250);
  }
  void erase() {
    assert(NAG_dco_9984);
    _current = NAG_dco_10249;
    _current.NAG_dco_9768(*NAG_dco_10250);
  }
  void NAG_dco_10255(const iterator&) {}
  void NAG_dco_10256() {}
  index_t NAG_dco_10257() { return _current.index() + 1; }

private:
  NAG_dco_10006(const NAG_dco_10006& NAG_dco_9975);
  entry* NAG_dco_9984;
  std::conditional_t<NAG_dco_10227 == memory_model::NAG_dco_9777, iterator&, iterator> _current;
  iterator NAG_dco_10249;
  iterator NAG_dco_10250;
  NAG_dco_10229 NAG_dco_10251;
  tape_options NAG_dco_10241;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9804, typename NAG_dco_10271> class NAG_dco_10272 : public NAG_dco_10271 {
  using NAG_dco_10273 = NAG_dco_10271;
  using tape_t = NAG_dco_9804;

public:
  using iterator_t = typename NAG_dco_10273::iterator;
  using NAG_dco_10099 = typename NAG_dco_10273::edge_inserter;
  using NAG_dco_10274 = typename NAG_dco_10273::entry;

private:
  index_t NAG_dco_10275;
  tape_options NAG_dco_10241;
  bool NAG_dco_10276;
  NAG_dco_10272 *NAG_dco_10277, *NAG_dco_10278;
  index_t NAG_dco_10279;
  static void NAG_dco_10280(const std::string& NAG_dco_10281, char* data, std::size_t size) {
    DCO_LOG(logDEBUG1) << "save_data_to_file: bytes to write = " << size << ", fname = " << NAG_dco_10281;
    std::ofstream out(NAG_dco_10281.c_str(), std::ios_base::out | std::ios_base::trunc | std::ios_base::binary);
    if (!out.is_open())
      throw dco::exception::create<std::runtime_error>("Could not open file, perhaps index corruption?");
    if (!out.good())
      throw dco::exception::create<std::runtime_error>("File could be opened, but got corrupted afterwards.");
    out.write(data, static_cast<std::streamsize>(size));
    if (!out.good())
      throw dco::exception::create<std::runtime_error>("Reading the chunk failed, container corrupted.");
    out.close();
  }
  static index_t NAG_dco_10282(const std::string& NAG_dco_10281, char* data) {
    struct stat NAG_dco_10283;
    if (stat(NAG_dco_10281.c_str(), &NAG_dco_10283) == -1)
      throw dco::exception::create<std::runtime_error>("Could not check file size, perhaps index corruption?");
    index_t size = static_cast<index_t>(NAG_dco_10283.st_size);
    std::ifstream in(NAG_dco_10281.c_str(), std::ios_base::in | std::ios_base::binary);
    if (!in.is_open())
      throw dco::exception::create<std::runtime_error>("Could not open file, perhaps index corruption?");
    if (!in.good())
      throw dco::exception::create<std::runtime_error>("File could be opened, but got corrupted afterwards.");
    in.read(data, size);
    if (!in.good())
      throw dco::exception::create<std::runtime_error>("Reading the chunk failed, container corrupted.");
    in.close();
    return size;
  }

public:
  std::string NAG_dco_10284() {
    std::stringstream NAG_dco_10281;
    NAG_dco_10281 << NAG_dco_10241.filename() << '.' << NAG_dco_10275;
    return NAG_dco_10281.str();
  }
  DCO_ALWAYS_INLINE NAG_dco_10272(NAG_dco_10272* NAG_dco_10285, typename NAG_dco_10273::NAG_dco_10229 NAG_dco_10286)
      : NAG_dco_10273(*NAG_dco_10285, NAG_dco_10286), NAG_dco_10275(NAG_dco_10285->NAG_dco_10275 + 1),
        NAG_dco_10241(NAG_dco_10285->NAG_dco_10027()), NAG_dco_10276(true), NAG_dco_10277(NAG_dco_10285),
        NAG_dco_10278(0), NAG_dco_10279(-1) {}
  DCO_ALWAYS_INLINE NAG_dco_10272(tape_options NAG_dco_10027, tape_t& tape)
      : NAG_dco_10273(NAG_dco_10027, tape), NAG_dco_10275(0), NAG_dco_10241(NAG_dco_10027), NAG_dco_10276(true),
        NAG_dco_10277(0), NAG_dco_10278(0), NAG_dco_10279(-1) {}
  void NAG_dco_10287() {
    if (NAG_dco_10241.write_to_file()) {
      DCO_LOG(logDEBUG1) << "wake_up: Waking up chunk " << NAG_dco_10275 << " | " << &this->NAG_dco_9985()
                         << " from sleep (reading from file).";
      NAG_dco_10282(NAG_dco_10284(), this->NAG_dco_10261());
      DCO_LOG(logDEBUG3) << "wake_up: current partial = " << this->current()->pval();
      NAG_dco_10288(true);
    } else {
      DCO_LOG(logDEBUG1) << "wake_up: waking already awake chunk " << NAG_dco_10275 << " | " << &this->NAG_dco_9985();
    }
  }
  void sleep() {
    DCO_LOG(logDEBUG1) << "sleep: chunk " << NAG_dco_10275 << " | " << this->NAG_dco_10261()
                       << " dirty = " << NAG_dco_10289();
    if (NAG_dco_10241.write_to_file() && NAG_dco_10289()) {
      if (!NAG_dco_10290()) {
        throw dco::exception::create<std::runtime_error>("Internal error: Writing chunk, which is not awake.");
      }
      const std::size_t NAG_dco_10291 = this->NAG_dco_10262();
      char* data = this->NAG_dco_10261();
      DCO_LOG(logDEBUG1) << "sleep: writing chunk " << NAG_dco_10275 << " | " << data << " | " << NAG_dco_10291;
      DCO_LOG(logDEBUG3) << "sleep: current partial = " << this->current()->pval();
      NAG_dco_10280(NAG_dco_10284(), data, NAG_dco_10291);
      NAG_dco_10292();
    } else {
      if (!NAG_dco_10289()) {
        DCO_LOG(logDEBUG1) << "sleep: not writing data for chunk: " << NAG_dco_10275;
      }
    }
    NAG_dco_10288(false);
  }
  void NAG_dco_10293(NAG_dco_10272* NAG_dco_10294) {
    if (!NAG_dco_10290()) {
      DCO_LOG(logDEBUG1) << "activate: chunk " << NAG_dco_10275 << " not awake yet.";
      NAG_dco_10272* NAG_dco_10295 = NAG_dco_10294;
      while (NAG_dco_10295 && !NAG_dco_10295->NAG_dco_10290()) {
        NAG_dco_10295 = NAG_dco_10295->NAG_dco_10285();
      }
      if (!NAG_dco_10295) {
        NAG_dco_10295 = NAG_dco_10294;
      }
      while (NAG_dco_10295 && !NAG_dco_10295->NAG_dco_10290()) {
        NAG_dco_10295 = NAG_dco_10295->NAG_dco_10296();
      }
      if (NAG_dco_10295) {
        DCO_LOG(logDEBUG1) << "activate: currently awake " << NAG_dco_10295->NAG_dco_10275;
        NAG_dco_10295->sleep();
      }
      NAG_dco_10287();
    }
  }
  DCO_ALWAYS_INLINE ~NAG_dco_10272() {
    if (NAG_dco_10027().write_to_file())
      std::remove(NAG_dco_10284().c_str());
  }
  index_t size(const iterator_t& NAG_dco_9847, const iterator_t& NAG_dco_9848) const {
    return NAG_dco_10273::size(NAG_dco_9847, NAG_dco_9848);
  }
  index_t size(iterator_t NAG_dco_9847) const { return NAG_dco_10273::size(NAG_dco_9847, this->start()); }
  index_t size() const { return NAG_dco_10273::size(this->current(), this->start()); }
  index_t NAG_dco_10253() const {
    if (!NAG_dco_10290())
      return 0;
    return NAG_dco_10273::NAG_dco_10253();
  }
  std::size_t size_in_byte() const {
    return NAG_dco_10273::size(this->current(), this->start()) * NAG_dco_10274::size_of();
  }
  std::size_t NAG_dco_10254() const {
    if (!NAG_dco_10290()) {
      return 0;
    }
    return static_cast<std::size_t>(NAG_dco_10273::NAG_dco_10253()) * NAG_dco_10274::size_of();
  }
  tape_options NAG_dco_10027() const { return NAG_dco_10241; }
  bool NAG_dco_10290() const { return NAG_dco_10276; }
  void NAG_dco_10288(bool NAG_dco_10297) { NAG_dco_10276 = NAG_dco_10297; }
  void NAG_dco_10292() { NAG_dco_10279 = size(); }
  void NAG_dco_10298() { NAG_dco_10279 = -1; }
  bool NAG_dco_10289() { return NAG_dco_10279 != size(); }
  index_t id() const { return NAG_dco_10275; }
  NAG_dco_10272*& NAG_dco_10285() { return NAG_dco_10277; }
  NAG_dco_10272*& NAG_dco_10296() { return NAG_dco_10278; }
  NAG_dco_10272 const* NAG_dco_10285() const { return NAG_dco_10277; }
  NAG_dco_10272 const* NAG_dco_10296() const { return NAG_dco_10278; }
};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <typename NAG_dco_9804, memory_model::TYPE NAG_dco_10227>
class NAG_dco_10006<memory_model::CHUNK_TAPE, NAG_dco_9804, NAG_dco_10227> : public NAG_dco_9983<NAG_dco_9804>,
                                                                             object_logger {
  using tape_t = NAG_dco_9804;
  using NAG_dco_10299 = NAG_dco_9983<tape_t>;
  using NAG_dco_10300 = NAG_dco_10006<memory_model::BLOB_TAPE_SPLINT, tape_t>;
  using NAG_dco_10272 = typename internal::NAG_dco_10272<tape_t, NAG_dco_10300>;
  using NAG_dco_10301 = typename NAG_dco_10272::iterator_t;

public:
  using NAG_dco_10228 = typename NAG_dco_9803<tape_t>::type;
  using entry = typename NAG_dco_10300::entry;

public:
  class iterator : private NAG_dco_10301 {
    NAG_dco_10272* NAG_dco_10302;

  public:
    using NAG_dco_10301::operator->;
    using NAG_dco_10301::index;
    using NAG_dco_10301::is_sentinel;
    using NAG_dco_10301::NAG_dco_10239;
    NAG_dco_10272* NAG_dco_10303() const { return NAG_dco_10302; }
    NAG_dco_10272*& NAG_dco_10303() { return NAG_dco_10302; }
    NAG_dco_10301& NAG_dco_10304() { return *this; }
    NAG_dco_10301 const& NAG_dco_10304() const { return *this; }
    template <typename NAG_dco_10226> void assign_from_interop(NAG_dco_10226 const& NAG_dco_9847) {
      internal::assign_from_interop(*this, NAG_dco_9847);
    }
    template <typename NAG_dco_10226> void assign_to_interop(NAG_dco_10226& NAG_dco_9848) const {
      internal::assign_to_interop(*this, NAG_dco_9848);
    }
    explicit iterator() : NAG_dco_10301(), NAG_dco_10302() {}
    explicit iterator(NAG_dco_10301 const& NAG_dco_9970, NAG_dco_10272* NAG_dco_10303)
        : NAG_dco_10301(NAG_dco_9970), NAG_dco_10302(NAG_dco_10303) {}
    explicit iterator(NAG_dco_10272* NAG_dco_10303)
        : NAG_dco_10301(NAG_dco_10303->current()), NAG_dco_10302(NAG_dco_10303) {}
    iterator(const iterator& NAG_dco_9975) : NAG_dco_10301(NAG_dco_9975), NAG_dco_10302(NAG_dco_9975.NAG_dco_10302) {}
    iterator& operator=(const iterator& NAG_dco_10107) {
      NAG_dco_10301::operator=(NAG_dco_10107);
      NAG_dco_10302 = NAG_dco_10107.NAG_dco_10302;
      return *this;
    }
    void operator--() {
      NAG_dco_10301::operator--();
      if (NAG_dco_10302->start() == *this && NAG_dco_10302->id() > 0) {
        NAG_dco_10302 = NAG_dco_10302->NAG_dco_10285();
        NAG_dco_10302->NAG_dco_10293(NAG_dco_10302->NAG_dco_10296());
        NAG_dco_10301::operator=(NAG_dco_10302->current());
      }
    }
    iterator operator--(int) {
      iterator NAG_dco_10055(*this);
      operator--();
      return NAG_dco_10055;
    }
    bool operator==(iterator const& NAG_dco_9975) const {
      return NAG_dco_10301::operator==(NAG_dco_9975) && NAG_dco_10302 == NAG_dco_9975.NAG_dco_10302;
    }
    bool operator!=(iterator const& NAG_dco_9975) const { return !operator==(NAG_dco_9975); }
    bool operator<(iterator const& NAG_dco_9975) const {
      return NAG_dco_10302 == NAG_dco_9975.NAG_dco_10302 ? this->NAG_dco_10304() < NAG_dco_9975.NAG_dco_10304()
                                                         : this->index() < NAG_dco_9975.index();
    }
    bool operator>=(iterator const& NAG_dco_9975) const { return !operator<(NAG_dco_9975); }
    bool operator>(iterator const& NAG_dco_9975) const {
      return NAG_dco_10302 == NAG_dco_9975.NAG_dco_10302 ? this->NAG_dco_10304() > NAG_dco_9975.NAG_dco_10304()
                                                         : this->index() > NAG_dco_9975.index();
    }
    bool operator<=(iterator const& NAG_dco_9975) const { return !operator>(NAG_dco_9975); }
  };
  class edge_inserter : public NAG_dco_10272::NAG_dco_10099 {
    NAG_dco_10272*& NAG_dco_10305;
    NAG_dco_10301 NAG_dco_10250;

  public:
    DCO_ALWAYS_INLINE edge_inserter(iterator& NAG_dco_9841)
        : NAG_dco_10272::NAG_dco_10099(NAG_dco_9841.NAG_dco_10304()), NAG_dco_10305(NAG_dco_9841.NAG_dco_10303()),
          NAG_dco_10250(NAG_dco_10305->end()) {}
    DCO_ALWAYS_INLINE_IF_AGRESSIVE void insert(const index_t& NAG_dco_10102, const NAG_dco_10228& pval) {
      if (*this->current() >= *NAG_dco_10250) {
        DCO_LOG(logDEBUG1) << "insert: chunk full, updating current and getting next.";
        NAG_dco_10305->current_ref() = this->current();
        NAG_dco_10306(NAG_dco_10305);
        index_t index = this->current().index();
        this->current() = NAG_dco_10305->current();
        this->current().index() = index;
        NAG_dco_10250 = NAG_dco_10305->end();
      }
      NAG_dco_10272::NAG_dco_10099::insert(NAG_dco_10102, pval);
    }

  private:
    edge_inserter(const edge_inserter& NAG_dco_9975);
  };
  void init(tape_options const& NAG_dco_10027) {
    tape_options NAG_dco_10307 = NAG_dco_10027;
    NAG_dco_10307.blob_size_in_byte() = NAG_dco_10027.chunk_size_in_byte();
    NAG_dco_10308 = new NAG_dco_10272(NAG_dco_10307, NAG_dco_10299::NAG_dco_9985());
    _current = iterator(NAG_dco_10308);
  }
  explicit NAG_dco_10006(tape_options const& NAG_dco_10027, tape_t& tape)
      : NAG_dco_10299(tape), object_logger("CHUNK container (w/ options)"), NAG_dco_10308(0), _current() {
    assert(NAG_dco_10227 != memory_model::NAG_dco_9777);
    init(NAG_dco_10027);
  }
  explicit DCO_ALWAYS_INLINE NAG_dco_10006(iterator& NAG_dco_9841, tape_t& tape)
      : NAG_dco_10299(tape), object_logger("CHUNK container (w/ options)"), NAG_dco_10308(0), _current(NAG_dco_9841) {
    assert(NAG_dco_10227 == memory_model::NAG_dco_9777);
  }
  DCO_ALWAYS_INLINE ~NAG_dco_10006() {
    NAG_dco_10272* NAG_dco_9970 = NAG_dco_10308;
    while (NAG_dco_9970) {
      NAG_dco_10272* NAG_dco_10309 = NAG_dco_9970;
      NAG_dco_9970 = NAG_dco_9970->NAG_dco_10296();
      delete NAG_dco_10309;
    }
  }
  static void NAG_dco_10306(NAG_dco_10272*& NAG_dco_9841) {
    DCO_LOG(logDEBUG1) << "Current chunk: id = " << NAG_dco_9841->id()
                       << ", raw data = " << NAG_dco_9841->NAG_dco_10261()
                       << "; current iterator: index = " << NAG_dco_9841->current().index();
    if (NAG_dco_9841->NAG_dco_10027().write_to_file()) {
      NAG_dco_9841->sleep();
      NAG_dco_9841->NAG_dco_10296() = new NAG_dco_10272(NAG_dco_9841, NAG_dco_10272::NAG_dco_10230);
    } else {
      if (!NAG_dco_9841->NAG_dco_10296()) {
        NAG_dco_9841->NAG_dco_10296() = new NAG_dco_10272(NAG_dco_9841, NAG_dco_10272::NAG_dco_10231);
      }
    }
    NAG_dco_9841 = NAG_dco_9841->NAG_dco_10296();
    DCO_LOG(logDEBUG1) << "New chunk: id = " << NAG_dco_9841->id() << ", raw data = " << NAG_dco_9841->NAG_dco_10261()
                       << "; current iterator: index = " << NAG_dco_9841->current().index();
  }
  iterator start() const { return iterator(NAG_dco_10308->start(), NAG_dco_10308); }
  iterator& current_ref() { return _current; }
  iterator& insert_ref() { return _current; }
  iterator current() const { return _current; }
  bool empty() const { return current() == start(); }
  index_t size(iterator NAG_dco_9847, iterator NAG_dco_9848) const {
    if (NAG_dco_9847 < NAG_dco_9848)
      std::swap(NAG_dco_9847, NAG_dco_9848);
    NAG_dco_10272* NAG_dco_10303 = NAG_dco_9847.NAG_dco_10303();
    if (NAG_dco_10303 == NAG_dco_9848.NAG_dco_10303()) {
      return NAG_dco_10303->size(NAG_dco_9847.NAG_dco_10304(), NAG_dco_9848.NAG_dco_10304());
    }
    index_t size = NAG_dco_10303->size(NAG_dco_9847.NAG_dco_10304());
    NAG_dco_10303 = NAG_dco_10303->NAG_dco_10285();
    while (NAG_dco_10303 && NAG_dco_10303 != NAG_dco_9848.NAG_dco_10303()) {
      DCO_LOG(logDEBUG2) << "size: Adding " << NAG_dco_10303->size() << " => size = " << size;
      size += NAG_dco_10303->size();
      NAG_dco_10303 = NAG_dco_10303->NAG_dco_10285();
    }
    size += NAG_dco_10303->size(NAG_dco_10303->end(), NAG_dco_9848.NAG_dco_10304());
    return size;
  }
  index_t size(iterator NAG_dco_9847) const { return size(NAG_dco_9847, start()); }
  index_t size() const { return size(current(), start()); }
  mem_long_t size_in_byte() const {
    return static_cast<mem_long_t>(size(current(), start())) * NAG_dco_10272::NAG_dco_10274::size_of();
  }
  index_t NAG_dco_10253() const {
    index_t size = 0;
    if (!NAG_dco_10308) {
      return size;
    }
    for (NAG_dco_10272* NAG_dco_10303 = NAG_dco_10308; NAG_dco_10303 != NULL;
         NAG_dco_10303 = NAG_dco_10303->NAG_dco_10296()) {
      size += NAG_dco_10303->NAG_dco_10253();
    }
    return size;
  }
  mem_long_t NAG_dco_10254() const {
    mem_long_t size = 0;
    if (!NAG_dco_10308) {
      return size;
    }
    for (NAG_dco_10272* NAG_dco_10303 = NAG_dco_10308; NAG_dco_10303 != NULL;
         NAG_dco_10303 = NAG_dco_10303->NAG_dco_10296()) {
      size += NAG_dco_10303->NAG_dco_10254();
    }
    return size;
  }
  void erase(const iterator& NAG_dco_9850) {
    if (NAG_dco_9850 > _current)
      throw dco::exception::create<std::runtime_error>(
          "Chunk container: Erasing to a position behind current position.");
    _current.NAG_dco_10303()->current_ref() = _current.NAG_dco_10304();
    DCO_LOG(logDEBUG1) << "Erase chunk tape...";
    _current.NAG_dco_10303() = NAG_dco_9850.NAG_dco_10303();
    _current.NAG_dco_10303()->NAG_dco_10293(NAG_dco_10308);
    _current.NAG_dco_10303()->NAG_dco_10298();
    NAG_dco_10272* NAG_dco_9970 = NAG_dco_9850.NAG_dco_10303()->NAG_dco_10296();
    if (_current.NAG_dco_10303()->NAG_dco_10027().write_to_file() ||
        _current.NAG_dco_10303()->NAG_dco_10027().deallocation_on_reset()) {
      _current.NAG_dco_10303()->NAG_dco_10296() = nullptr;
      while (NAG_dco_9970) {
        NAG_dco_10272* NAG_dco_10309 = NAG_dco_9970;
        NAG_dco_9970 = NAG_dco_9970->NAG_dco_10296();
        delete NAG_dco_10309;
      }
    } else {
      while (NAG_dco_9970) {
        NAG_dco_9970->erase();
        NAG_dco_9970->NAG_dco_10298();
        NAG_dco_9970 = NAG_dco_9970->NAG_dco_10296();
      }
    }
    _current.NAG_dco_10303()->erase(NAG_dco_9850.NAG_dco_10304());
    _current.NAG_dco_10304() = _current.NAG_dco_10303()->current();
  }
  void NAG_dco_10255(iterator& NAG_dco_9841) {
    DCO_LOG(logDEBUG1) << "Chunk tape: Prepare interpretation; activate: " << NAG_dco_9841.NAG_dco_10303()->id()
                       << ", is awake = " << NAG_dco_9841.NAG_dco_10303()->NAG_dco_10290() << ".";
    _current.NAG_dco_10303()->current_ref() = _current.NAG_dco_10304();
    NAG_dco_9841.NAG_dco_10303()->NAG_dco_10293(NAG_dco_10308);
    _current.NAG_dco_10304() = _current.NAG_dco_10303()->current_ref();
  }
  void NAG_dco_10256() {
    DCO_LOG(logDEBUG1) << "Chunk tape: Prepare recording.";
    _current.NAG_dco_10303()->current_ref() = _current.NAG_dco_10304();
    _current.NAG_dco_10303()->NAG_dco_10293(NAG_dco_10308);
    _current.NAG_dco_10304() = _current.NAG_dco_10303()->current_ref();
  }
  index_t NAG_dco_10257() { return current().index() + 1; }
  template <typename NAG_dco_10258> void NAG_dco_10259(NAG_dco_10258 const* const NAG_dco_9975) {
    current_ref().index() = NAG_dco_9975->current().index();
  }
  void NAG_dco_10260(iterator const& NAG_dco_9850) { current_ref().index() = NAG_dco_9850.index(); }

private:
  NAG_dco_10272* NAG_dco_10308;
  std::conditional_t<NAG_dco_10227 == memory_model::NAG_dco_9777, iterator&, iterator> _current;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <class NAG_dco_9804>
class NAG_dco_10006<memory_model::NAG_dco_9776, NAG_dco_9804>
    : public NAG_dco_10006<memory_model::CHUNK_TAPE, NAG_dco_9804> {
  typedef NAG_dco_9804 tape_t;

public:
  typedef typename NAG_dco_9803<NAG_dco_9804>::type NAG_dco_10228;
  typedef NAG_dco_10006<memory_model::CHUNK_TAPE, NAG_dco_9804> NAG_dco_10310;
  typedef typename NAG_dco_10310::entry entry;
  typedef typename NAG_dco_10310::edge_inserter edge_inserter;
  typedef typename NAG_dco_10310::iterator iterator;
  bool NAG_dco_10311, NAG_dco_10312, NAG_dco_10313, NAG_dco_10314;
  double NAG_dco_10315, NAG_dco_10316, NAG_dco_10317;
  std::vector<index_t> NAG_dco_10318;
  std::vector<NAG_dco_10228> NAG_dco_10319;
  std::vector<const void*> NAG_dco_10320;
  index_t NAG_dco_10321, NAG_dco_10322;
  struct NAG_dco_10323 {
    static std::string id() { return " gtas "; }
  };
  typedef logging<NAG_dco_10323> logger;
  explicit NAG_dco_10006(tape_options NAG_dco_10027, NAG_dco_9804& tape)
      : NAG_dco_10310(NAG_dco_10027, tape), NAG_dco_10311(false), NAG_dco_10312(false), NAG_dco_10313(false),
        NAG_dco_10314(false), NAG_dco_10315(1e-6), NAG_dco_10316(1e-6), NAG_dco_10317(0.0), NAG_dco_10321(0),
        NAG_dco_10322(-1) {}
  void NAG_dco_10324(log_level_enum level) {
    if (NAG_dco_10314 && level <= dco::logWARNING) {
      throw dco::exception::create<std::runtime_error>("Warning occured.");
    }
  }
  void NAG_dco_10325() {
    if (NAG_dco_10322 == NAG_dco_10321) {
      NAG_dco_10321++;
      throw dco::exception::create<std::runtime_error>("Event counter reached.");
    }
    NAG_dco_10321++;
  };
  void NAG_dco_10326(NAG_dco_10228 tangent, double NAG_dco_10327) {
    if (NAG_dco_10313) {
      double NAG_dco_10328 = ::fabs(tangent - NAG_dco_10327);
      log_level_enum NAG_dco_10329 = dco::logWARNING;
      if (NAG_dco_10328 < NAG_dco_10315) {
        NAG_dco_10329 = dco::logINFO;
      }
      logger(NAG_dco_10329).get_stream() << NAG_dco_10321 << ": fd vs. tangent check";
      logger(NAG_dco_10329).get_stream() << " delta = " << NAG_dco_10328 << " tangent = " << tangent
                                         << " finite differences = " << NAG_dco_10327;
      NAG_dco_10324(NAG_dco_10329);
    }
  }
  void NAG_dco_10330(double NAG_dco_10331, double NAG_dco_10332, double NAG_dco_10333) {
    const double NAG_dco_10334 = ::fabs(NAG_dco_10331 - NAG_dco_10332);
    const double NAG_dco_10335 = ::fabs(NAG_dco_10331 - NAG_dco_10333);
    log_level_enum NAG_dco_10329 = dco::logWARNING;
    if (NAG_dco_10334 < NAG_dco_10316) {
      NAG_dco_10329 = dco::logINFO;
    }
    logger(NAG_dco_10329).get_stream() << NAG_dco_10321 << ": Tangent/adjoint identity check:";
    logger(NAG_dco_10329).get_stream() << " tangent vs. adjoint = " << NAG_dco_10334;
    logger(NAG_dco_10329).get_stream() << "  <x_(1),x^(1)> = " << NAG_dco_10331;
    logger(NAG_dco_10329).get_stream() << "  <y_(1),y^(1)> = " << NAG_dco_10332;
    NAG_dco_10324(NAG_dco_10329);
    NAG_dco_10329 = dco::logWARNING;
    if (NAG_dco_10335 < NAG_dco_10315) {
      NAG_dco_10329 = dco::logINFO;
    }
    logger(NAG_dco_10329).get_stream() << " finite differences vs. adjoint = " << NAG_dco_10335;
    logger(NAG_dco_10329).get_stream() << "  <y_(1),y_{FD}^(1)> = " << NAG_dco_10333;
    NAG_dco_10324(NAG_dco_10329);
  }
  void NAG_dco_10336(const iterator& NAG_dco_9848) {
    assert(NAG_dco_10310::start() == NAG_dco_9848);
    NAG_dco_10310::NAG_dco_10336(NAG_dco_9848);
    NAG_dco_10318.clear();
    NAG_dco_10319.clear();
    NAG_dco_10320.clear();
    NAG_dco_10317 = 0;
  }
  void NAG_dco_10337(std::string NAG_dco_10338, const bool NAG_dco_9849, const bool NAG_dco_10339,
                     const bool NAG_dco_10340) {
    if (!NAG_dco_10311) {
      NAG_dco_10325();
      return;
    }
    log_level_enum NAG_dco_10329 = dco::logWARNING;
    if (NAG_dco_9849 == NAG_dco_10339 && NAG_dco_9849 == NAG_dco_10340) {
      NAG_dco_10329 = dco::logINFO;
    }
    logger(NAG_dco_10329).get_stream() << NAG_dco_10321 << ": Branch check:" << NAG_dco_10338 << std::boolalpha
                                       << " at current value returns " << NAG_dco_9849 << ", at minus h "
                                       << NAG_dco_10339 << ", and at plus h " << NAG_dco_10340;
    NAG_dco_10324(NAG_dco_10329);
    NAG_dco_10325();
  }
  template <class data_t> void NAG_dco_10341(const data_t* data, const double& tangent) {
    if (NAG_dco_10317 == 0) {
      NAG_dco_10320.push_back(data);
      NAG_dco_10318.push_back(data->_tape_index());
      NAG_dco_10319.push_back(tangent);
    }
  }
  template <typename NAG_dco_10342> void NAG_dco_10343() {
    double NAG_dco_10344 = 0;
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10320.size(); ++NAG_dco_9862) {
      const NAG_dco_10342& NAG_dco_9841 = *static_cast<const NAG_dco_10342*>(NAG_dco_10320[NAG_dco_9862]);
      NAG_dco_10344 = std::max(NAG_dco_10344, std::fabs(NAG_dco_9841.NAG_dco_10345[0]));
    }
    const double NAG_dco_10346 = 1e-14;
    NAG_dco_10317 = std::sqrt(NAG_dco_10346) * NAG_dco_10344;
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10320.size(); ++NAG_dco_9862) {
      const NAG_dco_10342& NAG_dco_9841 = *static_cast<const NAG_dco_10342*>(NAG_dco_10320[NAG_dco_9862]);
      NAG_dco_9841.NAG_dco_10345[0] -= NAG_dco_10317 * NAG_dco_9841.NAG_dco_9942;
      NAG_dco_9841.NAG_dco_10345[1] += NAG_dco_10317 * NAG_dco_9841.NAG_dco_9942;
    }
  }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <class NAG_dco_9804, memory_model::TYPE NAG_dco_10005>
class NAG_dco_10006<memory_model::NAG_dco_9777, NAG_dco_9804, NAG_dco_10005>
    : public NAG_dco_10006<NAG_dco_10005, NAG_dco_9804, memory_model::NAG_dco_9777> {
public:
  typedef typename NAG_dco_9803<NAG_dco_9804>::type NAG_dco_10228;
  typedef NAG_dco_10006<NAG_dco_10005, NAG_dco_9804, memory_model::NAG_dco_9777> NAG_dco_10310;
  explicit NAG_dco_10006(tape_options NAG_dco_10027, NAG_dco_9804& tape) : NAG_dco_10310(_current, tape), _current() {
    NAG_dco_10310::init(NAG_dco_10027);
  }
  struct iterator : public NAG_dco_10310::iterator {
    iterator() : NAG_dco_10347(1), NAG_dco_10348(0) {}
    iterator(const typename NAG_dco_10310::iterator& NAG_dco_10349)
        : NAG_dco_10310::iterator(NAG_dco_10349), NAG_dco_10347(-1), NAG_dco_10348(-1) {}
    index_t NAG_dco_10347;
    index_t NAG_dco_10348;
    const index_t& max_dist() const { return NAG_dco_10347; }
    void NAG_dco_10350(const index_t& NAG_dco_10351) {
      NAG_dco_10347 = NAG_dco_10351 + 1;
      DCO_LOG(logDEBUG3) << " updating max dist: " << NAG_dco_10347;
    }
    const index_t& NAG_dco_10352() const { return NAG_dco_10348; }
    index_t NAG_dco_10239() {
      NAG_dco_10348++;
      return NAG_dco_10310::iterator::NAG_dco_10239();
    }
  };
  class edge_inserter : public NAG_dco_10310::edge_inserter {
    iterator& _current;

  public:
    edge_inserter(iterator& current) : NAG_dco_10310::edge_inserter(current), _current(current) {}
    iterator& current() { return _current; }
    DCO_ALWAYS_INLINE void insert(const index_t& NAG_dco_10102, const NAG_dco_10228& pval) {
      DCO_LOG(logDEBUG4) << "target = " << NAG_dco_10102 << ", parametercounter = " << current().NAG_dco_10352()
                         << ", max dist = " << current().max_dist();
      index_t NAG_dco_10353 = current().index();
      NAG_dco_10310::edge_inserter::insert(NAG_dco_10102, pval);
      if (NAG_dco_10102 > current().NAG_dco_10352()) {
        index_t NAG_dco_10354 = NAG_dco_10353 - NAG_dco_10102 + 1;
        DCO_LOG(logDEBUG4) << "curdist = " << NAG_dco_10354;
        if (NAG_dco_10354 - current().max_dist() > 0) {
          current().NAG_dco_10350(NAG_dco_10354);
        }
      }
    }

  private:
    edge_inserter(const edge_inserter& NAG_dco_9975);
  };
  iterator current() const { return _current; }
  iterator current() { return _current; }
  iterator& current_ref() { return _current; }
  iterator rbegin() const { return _current; }
  index_t NAG_dco_10257() {
    using ::log;
    using ::pow;
    if constexpr (HAS_BITWISE_MODULO) {
      index_t max_dist = _current.max_dist();
      bool NAG_dco_10355 = (max_dist & (max_dist - 1)) == 0;
      if (!NAG_dco_10355) {
        index_t NAG_dco_10050 = static_cast<index_t>(floor(log(static_cast<double>(max_dist)) / log(2.0))) + 1;
        _current.NAG_dco_10350((1 << NAG_dco_10050) - 1);
        DCO_LOG(logDEBUG2) << "rounding adjoint vector size to " << _current.max_dist();
      }
    }
    return _current.NAG_dco_10352() + _current.max_dist() + 1;
  }

private:
  iterator _current;
};
} // namespace internal
namespace helper {
template <typename NAG_dco_9799, memory_model::TYPE NAG_dco_9800, typename NAG_dco_9801,
          typename external_adjoint_object_t>
struct NAG_dco_10037<internal::tape<memory_model::NAG_dco_9777, NAG_dco_9799, NAG_dco_9800, NAG_dco_9801>,
                     external_adjoint_object_t> {
  typedef internal::tape<memory_model::NAG_dco_9777, NAG_dco_9799, NAG_dco_9800, NAG_dco_9801> tape_t;
  index_t NAG_dco_10356;
  index_t NAG_dco_10357;
  external_adjoint_object_t* NAG_dco_10358;
  NAG_dco_10037(external_adjoint_object_t* NAG_dco_10359)
      : NAG_dco_10356(std::numeric_limits<index_t>::max()), NAG_dco_10357(0), NAG_dco_10358(NAG_dco_10359) {}
  template <typename NAG_dco_9791> void register_input(const NAG_dco_9791& NAG_dco_9778) {
    index_t NAG_dco_9826 = NAG_dco_9778._tape_index();
    if (NAG_dco_9826 > NAG_dco_10358->tape()->current().NAG_dco_10352()) {
      NAG_dco_10356 = std::min(NAG_dco_10356, NAG_dco_9826);
    }
  }
  template <typename NAG_dco_9791> void register_output(const NAG_dco_9791& NAG_dco_9779) {
    NAG_dco_10357 = std::max(NAG_dco_10357, NAG_dco_9779._tape_index());
    if (NAG_dco_10356 != std::numeric_limits<index_t>::max()) {
      index_t max_dist = NAG_dco_10357 - NAG_dco_10356;
      if (max_dist > NAG_dco_10358->tape()->current_ref().max_dist()) {
        NAG_dco_10358->tape()->current_ref().NAG_dco_10350(max_dist);
      }
    }
  }
};
} // namespace helper
namespace internal {
template <typename NAG_dco_10360, typename NAG_dco_9804, memory_model::TYPE NAG_dco_10005>
class adjoint_vector_lazy<NAG_dco_10360,
                          internal::NAG_dco_10006<memory_model::NAG_dco_9777, NAG_dco_9804, NAG_dco_10005>>
    : public adjoint_vector_lazy<NAG_dco_10360,
                                 internal::NAG_dco_10006<NAG_dco_10005, NAG_dco_9804, memory_model::NAG_dco_9777>> {
  typedef internal::NAG_dco_10006<memory_model::NAG_dco_9777, NAG_dco_9804, NAG_dco_10005> NAG_dco_9893;
  typedef typename NAG_dco_9893::NAG_dco_10310 NAG_dco_10310;
  typedef adjoint_vector_lazy<NAG_dco_10360, NAG_dco_10310> NAG_dco_10361;
  typedef typename NAG_dco_10361::NAG_dco_9759 NAG_dco_9759;

public:
  NAG_dco_9893& NAG_dco_10016;
  adjoint_vector_lazy(index_t size, NAG_dco_9893& tape, tape_options NAG_dco_10027)
      : NAG_dco_10361(size, static_cast<NAG_dco_10310&>(tape), NAG_dco_10027), NAG_dco_10016(tape), NAG_dco_10362(true),
        NAG_dco_10363(0) {}
  void init() {
    NAG_dco_10364 = NAG_dco_10016.current().NAG_dco_10352();
    if constexpr (HAS_BITWISE_MODULO) {
      NAG_dco_10365 = NAG_dco_10016.current().max_dist() - 1;
    } else {
      NAG_dco_10365 = NAG_dco_10016.current().max_dist();
    }
    NAG_dco_10366 = this->NAG_dco_9962.data() + NAG_dco_10364 + 1;
  }
  bool NAG_dco_10367(index_t NAG_dco_10368) const {
    if (NAG_dco_10368 > NAG_dco_10016.current().NAG_dco_10352()) {
      NAG_dco_10368 -= NAG_dco_10016.current().NAG_dco_10352();
      NAG_dco_10368 %= NAG_dco_10016.current().max_dist();
      NAG_dco_10368 += NAG_dco_10016.current().NAG_dco_10352() + 1;
    }
    return static_cast<index_t>(this->NAG_dco_9962.size()) > NAG_dco_10368;
  }
  index_t NAG_dco_10369(index_t NAG_dco_9826) const {
    if (NAG_dco_9826 > NAG_dco_10016.current().NAG_dco_10352()) {
      NAG_dco_9826 -= NAG_dco_10016.current().NAG_dco_10352();
      NAG_dco_9826 %= NAG_dco_10016.current().max_dist();
      NAG_dco_9826 += NAG_dco_10016.current().NAG_dco_10352() + 1;
    }
    return NAG_dco_9826;
  }
  typename NAG_dco_10361::NAG_dco_9759& operator[](index_t NAG_dco_9826) {
    DCO_LOG(logDEBUG4) << "getting " << NAG_dco_9826;
    NAG_dco_9826 = NAG_dco_10369(NAG_dco_9826);
    DCO_LOG(logDEBUG4) << "matched to " << NAG_dco_9826;
    return NAG_dco_10361::operator[](NAG_dco_9826);
  }
  typename NAG_dco_10361::NAG_dco_9759 operator[](index_t NAG_dco_9826) const {
    DCO_LOG(logDEBUG4) << "getting " << NAG_dco_9826;
    NAG_dco_9826 = NAG_dco_10369(NAG_dco_9826);
    DCO_LOG(logDEBUG4) << "matched to " << NAG_dco_9826;
    return NAG_dco_10361::operator[](NAG_dco_9826);
  }
  NAG_dco_9759 at(index_t NAG_dco_9826) const { return NAG_dco_10367(NAG_dco_9826) ? (*this)[NAG_dco_9826] : 0; }
  NAG_dco_9759& at(const index_t NAG_dco_9826) {
    if (!NAG_dco_10367(NAG_dco_9826))
      this->resize(NAG_dco_10016.NAG_dco_10257());
    return (*this)[NAG_dco_9826];
  }
  void NAG_dco_9995(index_t NAG_dco_9826) {
    if (!NAG_dco_10367(NAG_dco_9826)) {
      DCO_LOG(logDEBUG2) << "Resizing internal adjoint vector to " << NAG_dco_9826;
      this->resize(NAG_dco_10016.NAG_dco_10257());
    }
  }
  template <typename iterator_t> void NAG_dco_9996(iterator_t& NAG_dco_9841) {
    index_t NAG_dco_9848 = NAG_dco_9841->arg();
    NAG_dco_9759 pval = NAG_dco_9841->pval();
    index_t NAG_dco_9847 = NAG_dco_9841.index();
    if (NAG_dco_10362) {
      DCO_LOG(logDEBUG3) << "setting " << NAG_dco_9847 << " to 0 ";
      NAG_dco_9759& NAG_dco_10370 = HAS_BITWISE_MODULO ? NAG_dco_10366[(NAG_dco_9847 - NAG_dco_10364) & NAG_dco_10365]
                                                       : NAG_dco_10366[(NAG_dco_9847 - NAG_dco_10364) % NAG_dco_10365];
      this->NAG_dco_10363 = NAG_dco_10370;
      NAG_dco_10370 = 0;
    }
    if (NAG_dco_9848 > NAG_dco_10364) {
      NAG_dco_9759& NAG_dco_10370 = HAS_BITWISE_MODULO ? NAG_dco_10366[(NAG_dco_9848 - NAG_dco_10364) & NAG_dco_10365]
                                                       : NAG_dco_10366[(NAG_dco_9848 - NAG_dco_10364) % NAG_dco_10365];
      NAG_dco_10370 += pval * this->NAG_dco_10363;
    } else {
      (*this)[NAG_dco_9848] += pval * this->NAG_dco_10363;
    }
    NAG_dco_10362 = NAG_dco_9841.is_sentinel();
  }

private:
  NAG_dco_9759* NAG_dco_10366;
  index_t NAG_dco_10364;
  index_t NAG_dco_10365;
  bool NAG_dco_10362;
  NAG_dco_9759 NAG_dco_10363;
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <class NAG_dco_9757, typename NAG_dco_9807> class adjoint_vector_lazy : public NAG_dco_9983<NAG_dco_9807> {
  typedef NAG_dco_9983<NAG_dco_9807> NAG_dco_9986;

public:
  typedef typename helper::vecsize_info<NAG_dco_9757>::NAG_dco_9865 NAG_dco_9987;
  typedef NAG_dco_9757 NAG_dco_9759;

protected:
  std::vector<NAG_dco_9759> NAG_dco_9962{};
  index_t NAG_dco_10371 = 0, NAG_dco_10372 = 0;
  index_t NAG_dco_10373{};
  int NAG_dco_10374{0};
  tape_options NAG_dco_10241;

public:
  typedef NAG_dco_9759 value_t;
  void init() {}
  adjoint_vector_lazy(index_t size, NAG_dco_9807& tape, tape_options NAG_dco_10027)
      : NAG_dco_9986(tape), NAG_dco_10373(size), NAG_dco_10241(NAG_dco_10027) {}
  index_t size() const { return NAG_dco_10373; }
  bool NAG_dco_10367(index_t NAG_dco_10368) const { return (NAG_dco_10371 > NAG_dco_10368); }
  mem_long_t NAG_dco_10375() const { return static_cast<mem_long_t>(NAG_dco_10372) * sizeof(NAG_dco_9759); }
  mem_long_t NAG_dco_10376() const { return static_cast<mem_long_t>(NAG_dco_10373) * sizeof(NAG_dco_9759); }
  NAG_dco_9759& operator[](index_t NAG_dco_9826) { return NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)]; }
  NAG_dco_9759 operator[](index_t NAG_dco_9826) const { return NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)]; }
  void NAG_dco_9996(typename NAG_dco_9807::iterator& NAG_dco_9841) {
    (*this)[NAG_dco_9841->arg()] += NAG_dco_9841->pval() * (*this)[NAG_dco_9841.index()];
  }
  void resize(index_t NAG_dco_10377) {
    DCO_LOG(logDEBUG2) << "Resizing internal adjoint vector to " << NAG_dco_10377;
    if (NAG_dco_10377 < NAG_dco_10373) {
      NAG_dco_10001(NAG_dco_10373, NAG_dco_10377 - 1);
    }
    NAG_dco_10373 = NAG_dco_10377;
  }
  void NAG_dco_10378(index_t NAG_dco_10377) {
    if (NAG_dco_10377 <= NAG_dco_10371) {
      return;
    }
    if (++NAG_dco_10374 % 100 == 0) {
      DCO_LOG(logWARNING) << "dco_adjoint_vector: resizing adjoint vector quite often (#=" << NAG_dco_10374
                          << ") -- might have severe performance impact (reallocation / initialization / copy)";
    }
    NAG_dco_9962.resize(static_cast<size_t>(NAG_dco_10377));
    NAG_dco_10371 = NAG_dco_10377;
    NAG_dco_10372 = static_cast<index_t>(NAG_dco_9962.capacity());
    [[maybe_unused]] const std::size_t NAG_dco_10055 = NAG_dco_9962.capacity();
  }
  void NAG_dco_9995(index_t NAG_dco_9826) { NAG_dco_10378(NAG_dco_9826); }
  NAG_dco_9759 at(index_t NAG_dco_9826) const {
    return NAG_dco_10367(NAG_dco_9826) ? NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)] : NAG_dco_9759{};
  }
  NAG_dco_9759& at(const index_t NAG_dco_9826) {
    NAG_dco_10378(NAG_dco_9826 + 1);
    return NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9826)];
  }
  void NAG_dco_10001(index_t NAG_dco_9847, index_t NAG_dco_9848) {
    if (NAG_dco_9847 < NAG_dco_9848) {
      std::swap(NAG_dco_9847, NAG_dco_9848);
    }
    if (!NAG_dco_10367(NAG_dco_9848)) {
      return;
    }
    NAG_dco_10378(NAG_dco_10373);
    for (index_t NAG_dco_9862 = std::min(NAG_dco_9847, NAG_dco_10373 - 1); NAG_dco_9862 > NAG_dco_9848;
         --NAG_dco_9862) {
      NAG_dco_9962[static_cast<std::size_t>(NAG_dco_9862)] = NAG_dco_9759{};
    }
  }
  void NAG_dco_10033() { NAG_dco_10378(NAG_dco_10373); }
  decltype(auto) begin() { return NAG_dco_9962.begin(); }
  decltype(auto) end() { return NAG_dco_9962.end(); }
  decltype(auto) cbegin() const { return NAG_dco_9962.cbegin(); }
  decltype(auto) cend() const { return NAG_dco_9962.cend(); }
};
} // namespace internal
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9801> struct NAG_dco_10379 {
public:
  typedef NAG_dco_9801 mode_t;
  typedef NAG_dco_10112 NAG_dco_10162;

private:
  static constexpr std::size_t size = mode_t::p1f_size;
  typedef std::bitset<size> NAG_dco_10380;

public:
  typedef NAG_dco_10380 derivative_t;

private:
  mutable NAG_dco_10380 NAG_dco_10381;

public:
  NAG_dco_10379() noexcept {}
  DCO_STRONG_INLINE NAG_dco_10379(NAG_dco_10379 const& NAG_dco_10060) : NAG_dco_10381(NAG_dco_10060.NAG_dco_10381) {}
  DCO_STRONG_INLINE NAG_dco_10379(NAG_dco_10379 const& NAG_dco_10060, NAG_dco_9806) : NAG_dco_10379(NAG_dco_10060) {}
  DCO_STRONG_INLINE NAG_dco_10379& operator=(const NAG_dco_10379& NAG_dco_10107) {
    NAG_dco_10381 = NAG_dco_10107.NAG_dco_10381;
    return *this;
  }
  NAG_dco_10380& NAG_dco_9944() const { return NAG_dco_10381; }
  void clear() { NAG_dco_10381.reset(); }
  template <class NAG_dco_9935>
  DCO_ALWAYS_INLINE void NAG_dco_9936([[maybe_unused]] const NAG_dco_9935& NAG_dco_10164) {
    if constexpr (std::is_base_of_v<NAG_dco_9801, dco::mode<NAG_dco_9935>>) {
      NAG_dco_10379 NAG_dco_10055;
      NAG_dco_10382(NAG_dco_10164, NAG_dco_10055.NAG_dco_10381);
      NAG_dco_10381 = NAG_dco_10055.NAG_dco_10381;
    }
  }
  typedef typename mode_t::value_t NAG_dco_9780;

private:
  template <class NAG_dco_10147>
  static void NAG_dco_10382(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
                            NAG_dco_10380& NAG_dco_10102) {
    NAG_dco_10102 |= NAG_dco_9778.NAG_dco_10381;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static void NAG_dco_10382(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      NAG_dco_10380& NAG_dco_10102) {
    NAG_dco_10382(NAG_dco_9778.NAG_dco_10153(), NAG_dco_10102);
    NAG_dco_10382(NAG_dco_9778.NAG_dco_10155(), NAG_dco_10102);
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  static void NAG_dco_10382(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
                            NAG_dco_10380& NAG_dco_10102) {
    NAG_dco_10382(NAG_dco_9778.NAG_dco_10158(), NAG_dco_10102);
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static void NAG_dco_10382(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      NAG_dco_10380& NAG_dco_10102) {
    NAG_dco_10382(NAG_dco_9778.NAG_dco_10153(), NAG_dco_10102);
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static void NAG_dco_10382(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      NAG_dco_10380& NAG_dco_10102) {
    NAG_dco_10382(NAG_dco_9778.NAG_dco_10155(), NAG_dco_10102);
  }
};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
namespace NAG_dco_10383 {
template <typename NAG_dco_10384, typename adjoint_vector>
void NAG_dco_10385(NAG_dco_10384 NAG_dco_9841, NAG_dco_10384 NAG_dco_9848, const adjoint_vector& NAG_dco_10386,
                   const std::string& filename = "tape.dot") {
  std::ofstream NAG_dco_9831(filename);
  NAG_dco_10385(NAG_dco_9841, NAG_dco_9848, NAG_dco_10386, NAG_dco_9873{NAG_dco_9831});
}
template <typename NAG_dco_10384, typename adjoint_vector>
void NAG_dco_10385(NAG_dco_10384 NAG_dco_9841, NAG_dco_10384 NAG_dco_9848, const adjoint_vector& NAG_dco_10386,
                   NAG_dco_9873& NAG_dco_10068) {
  if (NAG_dco_9841.index() == NAG_dco_9848.index()) {
    return;
  } else if (NAG_dco_9841.index() < NAG_dco_9848.index()) {
    std::swap(NAG_dco_9841, NAG_dco_9848);
  }
  for (; NAG_dco_9841 != NAG_dco_9848; NAG_dco_9841--) {
    if (NAG_dco_9841->is_sentinel()) {
      NAG_dco_10068.NAG_dco_9884(NAG_dco_9841.index(), NAG_dco_10386.at(NAG_dco_9841.index()));
    }
    NAG_dco_10068.NAG_dco_9886(NAG_dco_9841->arg(), NAG_dco_9841.index(), NAG_dco_9841->pval());
  }
  for (index_t NAG_dco_9862 = NAG_dco_9841.index(); NAG_dco_9862 > 0; --NAG_dco_9862) {
    NAG_dco_10068.NAG_dco_9884(NAG_dco_9862, NAG_dco_10386.at(NAG_dco_9862));
  }
}
template <typename NAG_dco_10384, typename adjoint_vector, typename NAG_dco_10387>
void NAG_dco_10385(NAG_dco_10384 NAG_dco_9841, NAG_dco_10384 NAG_dco_9848, const adjoint_vector& NAG_dco_10386,
                   const NAG_dco_10387& NAG_dco_10388, NAG_dco_9873& NAG_dco_10068) {
  if (NAG_dco_9841.index() < NAG_dco_9848.index()) {
    std::swap(NAG_dco_9841, NAG_dco_9848);
  }
  NAG_dco_10385(NAG_dco_9841, NAG_dco_9848, NAG_dco_10386, NAG_dco_10068);
  for (auto NAG_dco_9970 = NAG_dco_10388.crbegin();
       NAG_dco_9970 != NAG_dco_10388.crend() && NAG_dco_9848 <= NAG_dco_9970->NAG_dco_10389(); ++NAG_dco_9970) {
    if (NAG_dco_9841 < NAG_dco_9970->NAG_dco_10389())
      continue;
    NAG_dco_9970->NAG_dco_10390()->NAG_dco_10043(NAG_dco_10068, NAG_dco_9970->NAG_dco_10389().index() + 1);
  }
}
template <typename NAG_dco_10384, typename adjoint_vector>
void NAG_dco_10391(NAG_dco_10384 NAG_dco_9841, NAG_dco_10384 NAG_dco_9848, const adjoint_vector& NAG_dco_10386,
                   std::ostream& out) {
  if (NAG_dco_9841.index() < NAG_dco_9848.index()) {
    std::swap(NAG_dco_9841, NAG_dco_9848);
  }
  out << "Tape Entry " << NAG_dco_9841.index() << ", Adjoint = " << NAG_dco_10386.at(NAG_dco_9841.index()) << "\n";
  int NAG_dco_10392 = 0;
  for (; NAG_dco_9841 != NAG_dco_9848; --NAG_dco_9841) {
    out << "  Dependence " << NAG_dco_10392++ << ": Source = " << NAG_dco_9841->arg()
        << ", Partial Derivative = " << NAG_dco_9841->pval() << '\n';
    if (NAG_dco_9841->is_sentinel()) {
      out << '\n';
      out << "Tape Entry " << NAG_dco_9841.index() - 1 << ": Adjoint = " << NAG_dco_10386.at(NAG_dco_9841.index() - 1)
          << "\n";
      NAG_dco_10392 = 0;
    }
  }
  for (index_t NAG_dco_9862 = NAG_dco_9841.index() - 1; NAG_dco_9862 > NAG_dco_9848.index(); --NAG_dco_9862) {
    out << "Tape Entry " << NAG_dco_9862 << ": Adjoint = " << NAG_dco_10386.at(NAG_dco_9862) << "\n";
  }
}
template <typename NAG_dco_10384, typename adjoint_vector>
void NAG_dco_10393(NAG_dco_10384 NAG_dco_9841, NAG_dco_10384 NAG_dco_9848, const adjoint_vector& NAG_dco_10386,
                   std::ostream& stream) {
  if (NAG_dco_9841.index() < NAG_dco_9848.index()) {
    std::swap(NAG_dco_9841, NAG_dco_9848);
  }
  stream << NAG_dco_9841.index() << "\n";
  bool NAG_dco_10394 = true;
  for (; NAG_dco_9841 != NAG_dco_9848; --NAG_dco_9841) {
    stream << (NAG_dco_10394 ? "" : " ") << NAG_dco_9841->arg() << ", " << NAG_dco_9841->pval() << ";";
    NAG_dco_10394 = false;
    if (NAG_dco_9841->is_sentinel()) {
      NAG_dco_10394 = true;
      stream << "\n";
    }
  }
  for (index_t NAG_dco_9862 = NAG_dco_9841.index() - 1; NAG_dco_9862 > NAG_dco_9848.index(); --NAG_dco_9862) {
    stream << NAG_dco_9862 << ", " << NAG_dco_10386.at(NAG_dco_9862) << ";\n";
  }
}
template <bool USE_SPARSE_INTERPRET, bool NAG_dco_10395, typename NAG_dco_10384, typename adjoint_vector,
          typename NAG_dco_10396>
DCO_STRONG_INLINE void interpret(NAG_dco_10384 NAG_dco_9841, const NAG_dco_10384& NAG_dco_9848,
                                 adjoint_vector& NAG_dco_10386, NAG_dco_10396 const& NAG_dco_10397) {
  using NAG_dco_10398 = typename dco::mode<typename adjoint_vector::NAG_dco_9987>::data_t;
  using NAG_dco_10399 = typename NAG_dco_10398::mode_t;
  static constexpr bool sparse_interpret =
      USE_SPARSE_INTERPRET || std::is_base_of_v<NAG_dco_10398, internal::NAG_dco_10379<NAG_dco_10399>>;
  NAG_dco_9841.index()--;
  stce_1000002();
  NAG_dco_10386.NAG_dco_9995(NAG_dco_9828(NAG_dco_9841.index()));
  NAG_dco_10386.init();
  for (; NAG_dco_9841 != NAG_dco_9848; --NAG_dco_9841) {
    if constexpr (sparse_interpret)
      if (folding::is_zero(NAG_dco_10386[NAG_dco_9841.index()])) {
        continue;
      }
    DCO_LOG(logDEBUG3) << NAG_dco_10386[NAG_dco_9841->arg()] << " <=> adj[" << NAG_dco_9841->arg()
                       << "] += " << NAG_dco_9841->pval() * NAG_dco_10386[NAG_dco_9841.index()] << " from idx "
                       << NAG_dco_9841.index();
    NAG_dco_10386.NAG_dco_9996(NAG_dco_9841);
    static_assert(
        std::is_invocable_v<decltype(NAG_dco_10397), decltype(NAG_dco_9841->arg()),
                            decltype(NAG_dco_9841->pval() * NAG_dco_10386[NAG_dco_9841.index()])>,
        "dco/c++: The user-supplied callable provided as an argument to interpret_adjoint*() has wrong interface.");
    std::invoke(NAG_dco_10397, NAG_dco_9841->arg(), NAG_dco_9841->pval() * NAG_dco_10386[NAG_dco_9841.index()]);
    if constexpr (NAG_dco_10395) {
      if (NAG_dco_9841->is_sentinel()) {
        NAG_dco_10386[NAG_dco_9841.index()] = 0.0;
      }
    }
  }
}
template <typename NAG_dco_10384, typename adjoint_vector>
DCO_STRONG_INLINE void NAG_dco_10400(NAG_dco_10384 NAG_dco_9841, const NAG_dco_10384& NAG_dco_9848,
                                     adjoint_vector& NAG_dco_10386) {
  NAG_dco_10386.NAG_dco_9995(NAG_dco_9841.index());
  for (; NAG_dco_9841 != NAG_dco_9848; --NAG_dco_9841) {
    std::cout << NAG_dco_9841.index() << ": " << NAG_dco_9841->arg() << ", " << NAG_dco_9841->pval() << ", "
              << NAG_dco_10386[NAG_dco_9841.index()] << std::endl;
  }
}
template <typename tape_t> DCO_STRONG_INLINE void NAG_dco_10400(const tape_t* tape) {
  typename tape_t::iterator NAG_dco_9841 = tape->get_position();
  for (; NAG_dco_9841 != tape->begin(); --NAG_dco_9841) {
    std::cout << NAG_dco_9841.index() << ": " << NAG_dco_9841->arg() << ", " << NAG_dco_9841->pval() << std::endl;
  }
}
} // namespace NAG_dco_10383
} // namespace internal
} // namespace dco

namespace dco {
template <typename tape_t> struct NAG_dco_10401 {
  std::map<std::string, mem_long_t> NAG_dco_10402;
  tape_t* NAG_dco_10016;
  NAG_dco_10401(tape_t* tape) : NAG_dco_10016(tape) {
    NAG_dco_10402["max_tape_memory"] = 0;
    NAG_dco_10402["max_adjoint_memory"] = 0;
    NAG_dco_10402["max_checkpoint_memory"] = 0;
    NAG_dco_10402["max_total_memory"] = 0;
  }
  mem_long_t operator[](std::string NAG_dco_10403) { return NAG_dco_10402[NAG_dco_10403]; }
  void NAG_dco_10404() {
    NAG_dco_10402["max_tape_memory"] =
        std::max(NAG_dco_10402["max_tape_memory"], dco::size_of(NAG_dco_10016, tape_t::size_of_stack));
    NAG_dco_10402["max_adjoint_memory"] = std::max(
        NAG_dco_10402["max_adjoint_memory"], dco::size_of(NAG_dco_10016, tape_t::size_of_internal_adjoint_vector));
    NAG_dco_10402["max_checkpoint_memory"] =
        std::max(NAG_dco_10402["max_checkpoint_memory"], dco::size_of(NAG_dco_10016, tape_t::size_of_checkpoints));
    NAG_dco_10402["max_total_memory"] = 0;
    for (auto& [NAG_dco_10405, NAG_dco_10406] : std::as_const(NAG_dco_10402)) {
      NAG_dco_10402["max_total_memory"] += NAG_dco_10406;
    }
  }
  mem_long_t NAG_dco_10407() { return NAG_dco_10402["max_tape_memory"]; }
};
} // namespace dco

struct NAG_dco_10408 {
  int NAG_dco_10409;

public:
  DCO_ALWAYS_INLINE NAG_dco_10408() : NAG_dco_10409(DCO_COMPATIBILITY_VERSION) {}
  DCO_ALWAYS_INLINE bool is_compatible(int NAG_dco_10410, bool NAG_dco_10400 = false) {
    if (NAG_dco_10400)
      dco::cout_diffs_in_version(NAG_dco_10410, NAG_dco_10409);
    return NAG_dco_10410 == NAG_dco_10409;
  }
};
namespace dco {
namespace internal {
template <memory_model::TYPE MEMORY_MODEL, typename NAG_dco_10036, memory_model::TYPE NAG_dco_9800,
          typename NAG_dco_9801>
class tape
    : public NAG_dco_10408,
      public dco::adjoint_vector_abstract<
          typename helper::vecsize_info<typename NAG_dco_10036::NAG_dco_9759>::NAG_dco_9865>,
      public NAG_dco_10006<MEMORY_MODEL, tape<MEMORY_MODEL, NAG_dco_10036, NAG_dco_9800, NAG_dco_9801>, NAG_dco_9800> {
public:
  typedef NAG_dco_10036 types_config_t;
  typedef NAG_dco_10006<MEMORY_MODEL, tape, NAG_dco_9800> NAG_dco_9893;
  typedef NAG_dco_9801 mode_t;
  typedef typename NAG_dco_9893::iterator iterator_t;
  typedef iterator_t position_t;
  typedef typename types_config_t::NAG_dco_9759 NAG_dco_9759;
  typedef typename types_config_t::NAG_dco_9758 NAG_dco_9758;
  typedef typename helper::vecsize_info<typename NAG_dco_10036::NAG_dco_9759>::NAG_dco_9865 NAG_dco_9987;
  typedef tape<MEMORY_MODEL, types_config_t, NAG_dco_9800, NAG_dco_9801> tape_t;
  typedef adjoint_vector_lazy<typename types_config_t::NAG_dco_9759, NAG_dco_9893> vector_t;
  vector_t NAG_dco_9962;
  NAG_dco_10401<tape> NAG_dco_10411;
  NAG_dco_10401<tape>& NAG_dco_10412() { return NAG_dco_10411; }
  const NAG_dco_10401<tape>& NAG_dco_10412() const { return NAG_dco_10411; }
  tape& get_tape() { return *this; }

private:
  bool NAG_dco_10413;
  bool NAG_dco_10414;
  struct NAG_dco_10415 {
    NAG_dco_10415() {}
    template <typename NAG_dco_9757> void operator()(index_t, NAG_dco_9757&&) const noexcept {}
  };
  static const NAG_dco_10415 NAG_dco_10416;
  index_t NAG_dco_9989;
  tape_options NAG_dco_10241;
  bool NAG_dco_10417;
  bool NAG_dco_10418;
  void NAG_dco_9994(const iterator_t& NAG_dco_9847, const iterator_t& NAG_dco_9848 = NAG_dco_9893::start()) {
    NAG_dco_9962.NAG_dco_10001(NAG_dco_9847.index(), NAG_dco_9848.index());
  }
  void NAG_dco_10419() {
    NAG_dco_9962.resize(this->NAG_dco_10257());
    NAG_dco_9962.NAG_dco_10033();
  }
  template <bool NAG_dco_10395 = false, typename NAG_dco_10384, typename adjoint_vector, typename NAG_dco_10396>
  DCO_STRONG_INLINE void NAG_dco_10420(NAG_dco_10384 NAG_dco_9841, const NAG_dco_10384& NAG_dco_9848,
                                       adjoint_vector& NAG_dco_10386, NAG_dco_10396 const& NAG_dco_10397) {
    if (NAG_dco_10417) {
      dco::internal::NAG_dco_10383::interpret<true, NAG_dco_10395>(NAG_dco_9841, NAG_dco_9848, NAG_dco_10386,
                                                                   NAG_dco_10397);
    } else {
      dco::internal::NAG_dco_10383::interpret<false, NAG_dco_10395>(NAG_dco_9841, NAG_dco_9848, NAG_dco_10386,
                                                                    NAG_dco_10397);
    }
  }

public:
  const tape_options& NAG_dco_10027() const { return NAG_dco_10241; }
  bool NAG_dco_10421() { return this->start() == this->current(); }
  DCO_ALWAYS_INLINE tape(tape_options NAG_dco_10027 = tape_options())
      : NAG_dco_10408(), NAG_dco_9893(NAG_dco_10027, *this), NAG_dco_9962(1, *this, NAG_dco_10027), NAG_dco_10411(this),
        NAG_dco_10413(false), NAG_dco_10414(true), NAG_dco_9989(0), NAG_dco_10241(NAG_dco_10027), NAG_dco_10417(false),
        NAG_dco_10418(true) {}
  DCO_ALWAYS_INLINE ~tape() {
    for (auto& NAG_dco_10422 : NAG_dco_10423) {
      NAG_dco_10422.NAG_dco_10424();
    }
  }
  bool is_active() const { return NAG_dco_9754 ? NAG_dco_10414 : true; }
  bool& sparse_interpret() { return NAG_dco_10417; }
  bool& scalar_callback_mode() { return NAG_dco_10418; }
  dco::index_t current_vector_mode_index() { return NAG_dco_9989; }
  iterator_t current() const { return get_position(); }
  iterator_t begin() const { return NAG_dco_9893::start(); }
  vector_t& adjoints() { return NAG_dco_9962; }
  template <typename NAG_dco_9791>
  std::enable_if_t<dco::mode<NAG_dco_9791>::is_adjoint_type, NAG_dco_9759>& adjoint(NAG_dco_9791 const& NAG_dco_9778) {
    return NAG_dco_9962[NAG_dco_9778._tape_index()];
  }
  typedef helper::NAG_dco_10039<tape> NAG_dco_10425;
  static void NAG_dco_10426(NAG_dco_10425* NAG_dco_10186) { NAG_dco_10186->get_tape()->NAG_dco_10417 = true; }
  static void NAG_dco_10427(NAG_dco_10425* NAG_dco_10186) { NAG_dco_10186->get_tape()->NAG_dco_10417 = false; }
  void set_sparse_interpret() {
    if (NAG_dco_10417 == false) {
      NAG_dco_10425* NAG_dco_10186 = this->create_callback_object<NAG_dco_10425>();
      this->insert_callback(NAG_dco_10427, NAG_dco_10186);
    }
    NAG_dco_10417 = true;
  }
  void unset_sparse_interpret() {
    if (NAG_dco_10417 == true) {
      NAG_dco_10425* NAG_dco_10186 = this->create_callback_object<NAG_dco_10425>();
      this->insert_callback(NAG_dco_10426, NAG_dco_10186);
    }
    NAG_dco_10417 = false;
  }
  bool switch_to_active() {
    if (!NAG_dco_9754) {
      throw dco::exception::create<std::runtime_error>("activity check disabled but switched");
    }
    if (!NAG_dco_10414) {
      NAG_dco_10414 = true;
      return false;
    }
    return true;
  }
  bool switch_to_passive() {
    if (!NAG_dco_9754) {
      throw dco::exception::create<std::runtime_error>("activity check disabled but switched");
    }
    if (NAG_dco_10414) {
      NAG_dco_10414 = false;
      return true;
    }
    return false;
  }
  bool switch_to(bool NAG_dco_10428) {
    bool NAG_dco_10429 = NAG_dco_10414;
    NAG_dco_10414 = NAG_dco_10428;
    return NAG_dco_10429;
  }
  template <bool NAG_dco_10430> index_t NAG_dco_10431() {
    if constexpr (!NAG_dco_10430) {
      if (this->empty()) {
        return NAG_dco_9893::current_ref().NAG_dco_10239();
      }
    }
    typename NAG_dco_9893::edge_inserter NAG_dco_10432(NAG_dco_9893::current_ref());
    NAG_dco_10432.insert(0, static_cast<typename NAG_dco_9893::NAG_dco_10228>(0.0));
    return NAG_dco_10432.index();
  }
  template <typename NAG_dco_10109, typename NAG_dco_10186>
  void register_variable(internal::active_type<NAG_dco_10109, NAG_dco_10186> const& NAG_dco_9778) {
    NAG_dco_9801::data_t::register_variable(NAG_dco_9778, NAG_dco_10431<false>(), this);
  }
  template <typename NAG_dco_10433>
  auto register_variable(NAG_dco_10433&& NAG_dco_9778)
      -> std::enable_if_t<std::is_reference_v<decltype(*(NAG_dco_9778.begin()))> &&
                          std::is_reference_v<decltype(*(NAG_dco_9778.end()))>> {
    for (auto&& NAG_dco_10085 : NAG_dco_9778) {
      register_variable(NAG_dco_10085);
    }
  }
  template <typename NAG_dco_10434> void register_variable(NAG_dco_10434 first, NAG_dco_10434 NAG_dco_10435) {
    while (first != NAG_dco_10435) {
      this->register_variable(*first++);
    }
  }
  template <typename NAG_dco_10434, typename NAG_dco_10436>
  void register_variable(NAG_dco_10434 NAG_dco_10437, NAG_dco_10434 NAG_dco_10438, NAG_dco_10436 NAG_dco_10439) {
    while (NAG_dco_10437 != NAG_dco_10438) {
      *NAG_dco_10439 = *NAG_dco_10437++;
      this->register_variable(*NAG_dco_10439++);
    }
  }
  template <typename NAG_dco_10109> void register_variable(NAG_dco_10109* NAG_dco_9778, std::size_t NAG_dco_9762) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9762; ++NAG_dco_9862) {
      this->register_variable(NAG_dco_9778[NAG_dco_9862]);
    }
  }
  template <typename NAG_dco_10109> void register_output_variable(NAG_dco_10109& NAG_dco_9778) {
    typename NAG_dco_9893::edge_inserter NAG_dco_10432(NAG_dco_9893::current_ref());
    NAG_dco_10432.insert(dco::tape_index<NAG_dco_9801>(NAG_dco_9778),
                         static_cast<typename NAG_dco_9893::NAG_dco_10228>(1.0));
    dco::tape_index<NAG_dco_9801>(NAG_dco_9778) = NAG_dco_10432.index();
  }
  template <typename NAG_dco_10109> void register_output_variable(std::vector<NAG_dco_10109>& NAG_dco_9778) {
    this->register_output_variable(NAG_dco_9778.data(), NAG_dco_9778.size());
  }
  template <typename NAG_dco_10109>
  void register_output_variable(NAG_dco_10109* NAG_dco_9778, std::size_t NAG_dco_9762) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9762; ++NAG_dco_9862) {
      this->register_output_variable(NAG_dco_9778[NAG_dco_9862]);
    }
  }
  template <typename NAG_dco_10434> void register_output_variable(NAG_dco_10434 first, NAG_dco_10434 NAG_dco_10435) {
    while (first != NAG_dco_10435) {
      this->register_output_variable(*first++);
    }
  }
  template <typename mode_t, NAG_dco_9814 NAG_dco_10440, typename NAG_dco_9791, typename NAG_dco_10441>
  void register_output_variable(NAG_dco_9823<mode_t, NAG_dco_10440, NAG_dco_9791, NAG_dco_10441> NAG_dco_9778) {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9778.size(); ++NAG_dco_9862) {
      this->register_output_variable(NAG_dco_9778[NAG_dco_9862]);
    }
  }
  void reset_to(const iterator_t& NAG_dco_9848) {
    NAG_dco_10336(NAG_dco_9848);
    NAG_dco_10442(NAG_dco_9848);
  }
  void reset() { reset_to(NAG_dco_9893::start()); }
  void interpret_adjoint(interpretation_settings NAG_dco_9992 = interpretation_settings()) {
    iterator_t NAG_dco_9848 = NAG_dco_9893::start();
    NAG_dco_9993(get_position(), NAG_dco_9848, NAG_dco_9992, NAG_dco_10416);
  }
  template <typename NAG_dco_10396 = decltype(NAG_dco_10416)>
  std::enable_if_t<!std::is_same_v<NAG_dco_10396, interpretation_settings>>
  interpret_adjoint(NAG_dco_10396 const& NAG_dco_10397 = NAG_dco_10416) {
    iterator_t NAG_dco_9848 = NAG_dco_9893::start();
    interpretation_settings NAG_dco_9992;
    NAG_dco_9993(get_position(), NAG_dco_9848, NAG_dco_9992, NAG_dco_10397);
  }
  template <typename NAG_dco_10396 = decltype(NAG_dco_10416)>
  void interpret_adjoint_to(const iterator_t& NAG_dco_9848, NAG_dco_10396 const& NAG_dco_10397 = NAG_dco_10416) {
    interpretation_settings NAG_dco_9992;
    NAG_dco_9993(get_position(), NAG_dco_9848, NAG_dco_9992, NAG_dco_10397);
  }
  template <typename NAG_dco_10396 = decltype(NAG_dco_10416)>
  void interpret_adjoint_from(const iterator_t& NAG_dco_9847, NAG_dco_10396 const& NAG_dco_10397 = NAG_dco_10416) {
    iterator_t NAG_dco_9848 = NAG_dco_9893::start();
    interpretation_settings NAG_dco_9992;
    NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992, NAG_dco_10397);
  }
  template <typename NAG_dco_10396 = decltype(NAG_dco_10416)>
  void interpret_adjoint_from_to(const iterator_t& NAG_dco_9847, const iterator_t& NAG_dco_9848,
                                 NAG_dco_10396 const& NAG_dco_10397 = NAG_dco_10416) {
    interpretation_settings NAG_dco_9992;
    NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992, NAG_dco_10397);
  }
  template <typename NAG_dco_10396 = decltype(NAG_dco_10416)>
  void interpret_adjoint_and_reset_to(const iterator_t& NAG_dco_9848,
                                      NAG_dco_10396 const& NAG_dco_10397 = NAG_dco_10416) {
    iterator_t NAG_dco_9847(get_position());
    interpretation_settings NAG_dco_9992;
    NAG_dco_9992.reset = true;
    NAG_dco_9992.NAG_dco_9977 = true;
    NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992, NAG_dco_10397);
    NAG_dco_10336(NAG_dco_9848);
    NAG_dco_10442(NAG_dco_9848);
  }
  template <typename NAG_dco_10396 = decltype(NAG_dco_10416)>
  void interpret_adjoint_and_zero_adjoints_to(const iterator_t& NAG_dco_9848,
                                              NAG_dco_10396 const& NAG_dco_10397 = NAG_dco_10416) {
    iterator_t NAG_dco_9847(get_position());
    interpretation_settings NAG_dco_9992;
    NAG_dco_9992.reset = false;
    NAG_dco_9992.NAG_dco_9977 = true;
    NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992, NAG_dco_10397);
  }
  template <typename NAG_dco_10396 = decltype(NAG_dco_10416)>
  void interpret_adjoint_and_zero_adjoints_from_to(const iterator_t& NAG_dco_9847, const iterator_t& NAG_dco_9848,
                                                   NAG_dco_10396 const& NAG_dco_10397 = NAG_dco_10416) {
    interpretation_settings NAG_dco_9992;
    NAG_dco_9992.reset = false;
    NAG_dco_9992.NAG_dco_9977 = true;
    NAG_dco_9993(NAG_dco_9847, NAG_dco_9848, NAG_dco_9992, NAG_dco_10397);
  }
  void zero_adjoints() {
    iterator_t NAG_dco_9848 = NAG_dco_9893::start();
    NAG_dco_9994(get_position(), NAG_dco_9848);
  }
  void zero_adjoints_to(const iterator_t& NAG_dco_9848) { NAG_dco_9994(get_position(), NAG_dco_9848); }
  void zero_adjoints_from(const iterator_t& NAG_dco_9847) {
    iterator_t NAG_dco_9848 = NAG_dco_9893::start();
    NAG_dco_9994(NAG_dco_9847, NAG_dco_9848);
  }
  void zero_adjoints_from_to(const iterator_t& NAG_dco_9847, const iterator_t& NAG_dco_9848) {
    NAG_dco_9994(NAG_dco_9847, NAG_dco_9848);
  }
  void NAG_dco_10336(const iterator_t& NAG_dco_9848) {
    bool alloc = NAG_dco_9962.NAG_dco_10367(NAG_dco_9848.index());
    NAG_dco_9962.resize(NAG_dco_9848.index() + 1);
    if (alloc) {
      NAG_dco_9962.NAG_dco_10033();
    }
    NAG_dco_9893::erase(NAG_dco_9848);
  }

public:
  iterator_t get_position() const { return NAG_dco_9893::current(); }
  NAG_dco_9987& NAG_dco_10443(const index_t tape_index) {
    NAG_dco_9759& NAG_dco_9982 = _adjoint(tape_index);
    NAG_dco_9987* NAG_dco_10444 = reinterpret_cast<NAG_dco_9987*>(&NAG_dco_9982);
    return NAG_dco_10444[NAG_dco_9989];
  }
  NAG_dco_9987 NAG_dco_10443(const index_t tape_index) const {
    NAG_dco_9759 NAG_dco_9982(_adjoint(tape_index));
    NAG_dco_9987* NAG_dco_10444 = reinterpret_cast<NAG_dco_9987*>(&NAG_dco_9982);
    return NAG_dco_10444[NAG_dco_9989];
  }
  NAG_dco_9759& _adjoint(index_t tape_index) {
    if (!NAG_dco_9962.NAG_dco_10367(get_position().index() + 1))
      NAG_dco_10419();
    return NAG_dco_9962[tape_index];
  }
  NAG_dco_9759 _adjoint(const index_t tape_index) const {
    return NAG_dco_9962.NAG_dco_10367(tape_index) ? NAG_dco_9962[tape_index] : 0;
  }
  using size_of_mode = dco::size_of_e;
  static constexpr size_of_e size_of_stack = size_of_e::stack;
  static constexpr size_of_e size_of_allocated_stack = size_of_e::allocated_stack;
  static constexpr size_of_e size_of_internal_adjoint_vector = size_of_e::internal_adjoint_vector;
  static constexpr size_of_e size_of_allocated_internal_adjoint_vector = size_of_e::allocated_internal_adjoint_vector;
  static constexpr size_of_e size_of_checkpoints = size_of_e::checkpoints;
  static constexpr size_of_e size_of_default = size_of_e::def;
  mem_long_t NAG_dco_10445() const {
    mem_long_t NAG_dco_10446 = 0;
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10423.size(); NAG_dco_9862++) {
      NAG_dco_10446 += NAG_dco_10423[NAG_dco_9862].NAG_dco_10390()->size_in_byte();
    }
    return NAG_dco_10446;
  }
  mem_long_t NAG_dco_9932(const size_of_e NAG_dco_10447 = size_of_e::def) const {
    mem_long_t NAG_dco_10448 = 0;
    if (NAG_dco_10447 & size_of_e::allocated_stack) {
      NAG_dco_10448 += static_cast<std::size_t>(NAG_dco_9893::NAG_dco_10254());
    } else if (NAG_dco_10447 & size_of_e::stack) {
      NAG_dco_10448 += static_cast<std::size_t>(NAG_dco_9893::size_in_byte());
    }
    if (NAG_dco_10447 & size_of_e::internal_adjoint_vector) {
      NAG_dco_10448 += NAG_dco_9962.NAG_dco_10376();
    }
    if (NAG_dco_10447 & size_of_e::allocated_internal_adjoint_vector) {
      NAG_dco_10448 += NAG_dco_9962.NAG_dco_10375();
    }
    if (NAG_dco_10447 & size_of_e::checkpoints) {
      NAG_dco_10448 += NAG_dco_10445();
    }
    return NAG_dco_10448;
  }
  static DCO_ALWAYS_INLINE tape_t* create(tape_options NAG_dco_10027 = tape_options()) {
    tape_t* tape = new tape_t(NAG_dco_10027);
    return tape;
  }
  static DCO_ALWAYS_INLINE void remove(tape_t*& tape) {
    if (tape == 0)
      return;
    delete tape;
    tape = 0;
  }
  virtual NAG_dco_9987 _read_adjoint(const index_t NAG_dco_9826) { return NAG_dco_10443(NAG_dco_9826); }
  virtual void _increment_adjoint(const index_t NAG_dco_9826, const NAG_dco_9987& NAG_dco_9982) {
    NAG_dco_10443(NAG_dco_9826) += NAG_dco_9982;
  }
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  template <typename NAG_dco_10449> class NAG_dco_10450 {
  public:
    typedef void (*NAG_dco_10451)(tape_t& NAG_dco_10452, const interpretation_settings& NAG_dco_9766,
                                  NAG_dco_10449* NAG_dco_10453);
    typedef void (*NAG_dco_10454)(tape_t& NAG_dco_10452, NAG_dco_10449* NAG_dco_10453);
    typedef void (*NAG_dco_10455)(NAG_dco_10449* NAG_dco_10453);
  };
  class NAG_dco_10456 {
  public:
    virtual void NAG_dco_10457(tape_t& NAG_dco_10452, const interpretation_settings& NAG_dco_9766,
                               callback_object_t* NAG_dco_10453) = 0;
    virtual ~NAG_dco_10456() {};
  };
  template <typename NAG_dco_10449> class NAG_dco_10458 : public NAG_dco_10456 {
  private:
    union {
      typename NAG_dco_10450<NAG_dco_10449>::NAG_dco_10455 NAG_dco_10459;
      typename NAG_dco_10450<NAG_dco_10449>::NAG_dco_10454 NAG_dco_10460;
      typename NAG_dco_10450<NAG_dco_10449>::NAG_dco_10451 NAG_dco_10461;
    } NAG_dco_10459;
    int NAG_dco_10462;

  public:
    NAG_dco_10458(typename NAG_dco_10450<NAG_dco_10449>::NAG_dco_10455 NAG_dco_10463) : NAG_dco_10462(0) {
      NAG_dco_10459.NAG_dco_10459 = NAG_dco_10463;
    }
    NAG_dco_10458(typename NAG_dco_10450<NAG_dco_10449>::NAG_dco_10454 NAG_dco_10463) : NAG_dco_10462(1) {
      NAG_dco_10459.NAG_dco_10460 = NAG_dco_10463;
    }
    NAG_dco_10458(typename NAG_dco_10450<NAG_dco_10449>::NAG_dco_10451 NAG_dco_10463) : NAG_dco_10462(2) {
      NAG_dco_10459.NAG_dco_10461 = NAG_dco_10463;
    }
    void NAG_dco_10457(tape_t& NAG_dco_10452, const interpretation_settings& NAG_dco_9766,
                       callback_object_t* NAG_dco_10453) {
      NAG_dco_10449* NAG_dco_10464 = static_cast<NAG_dco_10449*>(NAG_dco_10453);
      switch (NAG_dco_10462) {
      case 0:
        NAG_dco_10459.NAG_dco_10459(NAG_dco_10464);
        break;
      case 1:
        NAG_dco_10459.NAG_dco_10460(NAG_dco_10452, NAG_dco_10464);
        break;
      case 2:
        NAG_dco_10459.NAG_dco_10461(NAG_dco_10452, NAG_dco_9766, NAG_dco_10464);
        break;
      default:
        if (helper::NAG_dco_9851) {
          throw dco::exception::create<std::runtime_error>(
              "Internal error: Unknown callback type. Please contact NAG.");
        }
        break;
      }
    }
    ~NAG_dco_10458() {}
  };
  class NAG_dco_10465 {
    callback_object_t* NAG_dco_10453 = nullptr;
    NAG_dco_10456* NAG_dco_10466 = nullptr;
    iterator_t NAG_dco_10467;

  public:
    NAG_dco_10465() = delete;
    NAG_dco_10465(const NAG_dco_10465&) = default;
    NAG_dco_10465& operator=(const NAG_dco_10465&) = default;
    NAG_dco_10465(const iterator_t& NAG_dco_9850) : NAG_dco_10467(NAG_dco_9850) {}
    bool operator<(const NAG_dco_10465& NAG_dco_9975) const { return NAG_dco_10467 < NAG_dco_9975.NAG_dco_10467; }
    void NAG_dco_10424() {
      delete NAG_dco_10453;
      delete NAG_dco_10466;
    }
    template <typename NAG_dco_10449, typename NAG_dco_10468> void NAG_dco_10469(NAG_dco_10468 NAG_dco_10463) {
      if (NAG_dco_10466)
        throw dco::exception::create<std::runtime_error>(
            "Currently not supported to insert external_adjoint_object_bases twice.");
      NAG_dco_10466 = new NAG_dco_10458<NAG_dco_10449>(NAG_dco_10463);
    }
    callback_object_t*& NAG_dco_10390() { return NAG_dco_10453; }
    callback_object_t* NAG_dco_10390() const { return NAG_dco_10453; }
    iterator_t& NAG_dco_10389() { return NAG_dco_10467; }
    iterator_t NAG_dco_10389() const { return NAG_dco_10467; }
    void NAG_dco_10457(tape_t& NAG_dco_10452, const interpretation_settings& NAG_dco_9766) {
      if (NAG_dco_10466)
        NAG_dco_10466->NAG_dco_10457(NAG_dco_10452, NAG_dco_9766, NAG_dco_10453);
    }
  };
  std::vector<NAG_dco_10465> NAG_dco_10423;
  std::size_t number_of_callbacks() { return NAG_dco_10423.size(); }
  template <class NAG_dco_10470> void NAG_dco_10471(NAG_dco_10470* NAG_dco_10453) {
    NAG_dco_10423.emplace_back(NAG_dco_9893::current());
    NAG_dco_10423.back().NAG_dco_10390() = NAG_dco_10453;
    NAG_dco_10453->set_tape(this);
    typedef typename NAG_dco_10470::active_t NAG_dco_10013;
    typedef dco::NAG_dco_10093::NAG_dco_10097<tape_t, NAG_dco_10013> NAG_dco_10472;
    NAG_dco_10472* NAG_dco_10092 = NAG_dco_10453;
    insert_callback(&dco::NAG_dco_10093::NAG_dco_10091<tape_t, NAG_dco_10013>, NAG_dco_10092);
  }
  template <class NAG_dco_10470, typename NAG_dco_10468>
  void insert_callback(NAG_dco_10468 NAG_dco_10466, NAG_dco_10470* NAG_dco_10186) {
    if (NAG_dco_10423.back().NAG_dco_10390() == NAG_dco_10186) {
      NAG_dco_10186->NAG_dco_10042();
      NAG_dco_10423.back().template NAG_dco_10469<NAG_dco_10470>(NAG_dco_10466);
      NAG_dco_10423.back().NAG_dco_10389() = NAG_dco_9893::current();
      NAG_dco_10431<true>();
    } else {
      throw dco::exception::create<std::runtime_error>(
          "please always insert most recently created external function object.");
    }
  }
  template <typename NAG_dco_10396> struct NAG_dco_10473 : helper::NAG_dco_10039<tape> {
    NAG_dco_10396 NAG_dco_10397;
    template <typename NAG_dco_10474>
    NAG_dco_10473(NAG_dco_10474&& NAG_dco_10397) : NAG_dco_10397(std::forward<NAG_dco_10474>(NAG_dco_10397)) {}
  };
  template <typename NAG_dco_10475>
  static auto NAG_dco_10476(NAG_dco_10475* NAG_dco_10186) -> decltype(NAG_dco_10186->NAG_dco_10397()) {
    NAG_dco_10186->NAG_dco_10397();
  }
  template <typename NAG_dco_10475>
  static auto NAG_dco_10476(NAG_dco_10475* NAG_dco_10186)
      -> decltype(NAG_dco_10186->NAG_dco_10397(*NAG_dco_10186->_adjoint_vector)) {
    NAG_dco_10186->NAG_dco_10397(*NAG_dco_10186->_adjoint_vector);
  }
  template <typename NAG_dco_10396> void insert_callback(NAG_dco_10396&& NAG_dco_9864) {
    using NAG_dco_10477 = NAG_dco_10473<std::decay_t<NAG_dco_10396>>;
    auto* NAG_dco_10186 = this->create_callback_object<NAG_dco_10477>(std::forward<NAG_dco_10396>(NAG_dco_9864));
    this->insert_callback(NAG_dco_10476<NAG_dco_10477>, NAG_dco_10186);
  }
  template <class NAG_dco_10470, typename... FCN_PARAMETERS>
  NAG_dco_10470* create_callback_object(FCN_PARAMETERS&&... parameters) {
    NAG_dco_10423.emplace_back(NAG_dco_9893::current());
    NAG_dco_10470* NAG_dco_10453 = new NAG_dco_10470(std::forward<FCN_PARAMETERS>(parameters)...);
    NAG_dco_10423.back().NAG_dco_10390() = NAG_dco_10453;
    NAG_dco_10453->set_tape(this);
    return NAG_dco_10453;
  }
  template <class NAG_dco_10470> inline NAG_dco_10470* create_ACM_object() {
    NAG_dco_10470* NAG_dco_9849 = create_callback_object<NAG_dco_10470>();
    typedef typename NAG_dco_10470::active_t NAG_dco_10013;
    typedef dco::ACM::baseclass<tape_t, NAG_dco_10013> NAG_dco_10478;
    NAG_dco_10478* NAG_dco_10092 = NAG_dco_9849;
    insert_callback(&dco::ACM::NAG_dco_10091<tape_t, NAG_dco_10013>, NAG_dco_10092);
    return NAG_dco_9849;
  }
  template <class NAG_dco_10470, typename FCN_PARAMETERS>
  inline NAG_dco_10470* create_ACM_object(const FCN_PARAMETERS& parameters) {
    const NAG_dco_9870<FCN_PARAMETERS> NAG_dco_10479(parameters);
    NAG_dco_10465 NAG_dco_10480(NAG_dco_9893::current());
    NAG_dco_10423.push_back(NAG_dco_10480);
    NAG_dco_10470* NAG_dco_10453 = NAG_dco_10479.template create<NAG_dco_10470>();
    NAG_dco_10423.back().NAG_dco_10390() = NAG_dco_10453;
    NAG_dco_10453->set_tape(this);
    typedef typename NAG_dco_10470::active_t NAG_dco_10013;
    typedef dco::ACM::baseclass<tape_t, NAG_dco_10013> NAG_dco_10478;
    NAG_dco_10478* NAG_dco_10092 = NAG_dco_10453;
    insert_callback(&dco::ACM::NAG_dco_10091<tape_t, NAG_dco_10013>, NAG_dco_10092);
    return NAG_dco_10453;
  }
  template <class NAG_dco_10470> void insert_ACM_object(NAG_dco_10470* NAG_dco_10453) {
    NAG_dco_10465 NAG_dco_10480(NAG_dco_9893::current());
    NAG_dco_10423.push_back(NAG_dco_10480);
    NAG_dco_10423.back().NAG_dco_10390() = NAG_dco_10453;
    NAG_dco_10453->set_tape(this);
    typedef typename NAG_dco_10470::active_t NAG_dco_10013;
    typedef dco::ACM::baseclass<tape_t, NAG_dco_10013> NAG_dco_10478;
    NAG_dco_10478* NAG_dco_10092 = NAG_dco_10453;
    insert_callback(&dco::ACM::NAG_dco_10091<tape_t, NAG_dco_10013>, NAG_dco_10092);
  }
  void NAG_dco_10442(const iterator_t& NAG_dco_9848) {
    typedef typename std::vector<NAG_dco_10465>::iterator NAG_dco_10481;
    NAG_dco_10481 NAG_dco_10102 = NAG_dco_10423.begin();
    for (; NAG_dco_10102 != NAG_dco_10423.end() && NAG_dco_10102->NAG_dco_10389().index() < NAG_dco_9848.index();
         ++NAG_dco_10102) {
    }
    for (NAG_dco_10481 NAG_dco_9970 = NAG_dco_10102; NAG_dco_9970 != NAG_dco_10423.end(); ++NAG_dco_9970)
      NAG_dco_9970->NAG_dco_10424();
    NAG_dco_10423.erase(NAG_dco_10102, NAG_dco_10423.end());
  }

public:
  void stream(std::ostream& out = std::cout, stream_format_e NAG_dco_10482 = stream_format_e::human_readable) const {
    stream(NAG_dco_9893::current(), NAG_dco_9893::start(), out, NAG_dco_10482);
  }
  void stream(iterator_t NAG_dco_9847, iterator_t NAG_dco_9848, std::ostream& out = std::cout,
              stream_format_e NAG_dco_10482 = stream_format_e::human_readable) const {
    switch (NAG_dco_10482) {
    case stream_format_e::human_readable:
      this->NAG_dco_10391(NAG_dco_9847, NAG_dco_9848, out);
      break;
    case stream_format_e::dot:
      this->write_to_dot(NAG_dco_9847, NAG_dco_9848, out);
      break;
    case stream_format_e::csv:
      this->write_to_csv(NAG_dco_9847, NAG_dco_9848, out);
      break;
    default:
      break;
    }
  }
  void write_to_dot(const std::string& filename = "tape.dot") const {
    write_to_dot(NAG_dco_9893::current(), NAG_dco_9893::start(), filename);
  }
  void write_to_dot(iterator_t NAG_dco_9847) const { write_to_dot(NAG_dco_9847, NAG_dco_9893::start()); }
  void write_to_dot(iterator_t NAG_dco_9841, iterator_t NAG_dco_9848, const std::string& filename = "tape.dot") const {
    std::ofstream NAG_dco_9831(filename);
    write_to_dot(NAG_dco_9841, NAG_dco_9848, NAG_dco_9831);
  }
  void write_to_dot(iterator_t NAG_dco_9841, iterator_t NAG_dco_9848, std::ostream& out = std::cout) const {
    NAG_dco_9873 NAG_dco_10068(out);
    dco::internal::NAG_dco_10383::NAG_dco_10385(NAG_dco_9841, NAG_dco_9848, NAG_dco_9962, NAG_dco_10423, NAG_dco_10068);
  }
  void write_to_csv(const std::string& filename = "tape.csv") const {
    write_to_csv(NAG_dco_9893::current(), NAG_dco_9893::start(), filename);
  }
  void write_to_csv(iterator_t NAG_dco_9847) const { write_to_csv(NAG_dco_9847, NAG_dco_9893::start()); }
  void write_to_csv(iterator_t NAG_dco_9841, iterator_t NAG_dco_9848, const std::string& filename = "tape.csv") const {
    std::ofstream NAG_dco_9831(filename);
    write_to_csv(NAG_dco_9841, NAG_dco_9848, NAG_dco_9831);
  }
  void write_to_csv(iterator_t NAG_dco_9841, iterator_t NAG_dco_9848, std::ostream& out = std::cout) const {
    if (NAG_dco_10423.size() != 0)
      throw dco::exception::create<std::runtime_error>("tape->write_to_csv not implemented for callbacks.");
    dco::internal::NAG_dco_10383::NAG_dco_10393(NAG_dco_9841, NAG_dco_9848, NAG_dco_9962, out);
  }
  void NAG_dco_10391(std::ostream& out = std::cout) const {
    NAG_dco_10391(NAG_dco_9893::current(), NAG_dco_9893::start(), out);
  }
  void NAG_dco_10391(iterator_t NAG_dco_9847, std::ostream& out = std::cout) const {
    NAG_dco_10391(NAG_dco_9847, NAG_dco_9893::start(), out);
  }
  void NAG_dco_10391(iterator_t NAG_dco_9841, iterator_t NAG_dco_9848, std::ostream& out = std::cout) const {
    if (NAG_dco_10423.size() != 0)
      throw dco::exception::create<std::runtime_error>("tape->write_human_readable not implemented for callbacks.");
    dco::internal::NAG_dco_10383::NAG_dco_10391(NAG_dco_9841, NAG_dco_9848, NAG_dco_9962, out);
  }
  template <typename NAG_dco_10483> void synchronize_with(NAG_dco_10483 const* const NAG_dco_9975) {
    this->NAG_dco_10259(NAG_dco_9975);
  }
  void synchronize_to(iterator_t const& NAG_dco_9850) { this->NAG_dco_10260(NAG_dco_9850); }
  void NAG_dco_10484(iterator_t const& NAG_dco_9841, NAG_dco_10465& NAG_dco_10485,
                     interpretation_settings const& NAG_dco_9992) {
    this->NAG_dco_10484(*this, NAG_dco_9841, NAG_dco_10485, NAG_dco_9992);
  }
  template <class NAG_dco_10486>
  void NAG_dco_10484(NAG_dco_10486& NAG_dco_10444, const iterator_t& NAG_dco_9841, NAG_dco_10465& NAG_dco_10485,
                     const interpretation_settings& NAG_dco_9992) {
    if (NAG_dco_10485.NAG_dco_10389() != NAG_dco_9841)
      throw dco::exception::create<std::runtime_error>("invoking callback at wrong position");
    if (NAG_dco_9992.reset) {
      NAG_dco_10336(NAG_dco_9841);
      NAG_dco_10431<true>();
    }
    index_t vecsize = static_cast<index_t>(dco::helper::vecsize_info<typename types_config_t::NAG_dco_9759>::vecsize);
    if (NAG_dco_10418) {
      for (index_t NAG_dco_10487 = 0; NAG_dco_10487 < vecsize; NAG_dco_10487++) {
        NAG_dco_9989 = NAG_dco_10487;
        NAG_dco_10485.NAG_dco_10390()->_adjoint_vector = &NAG_dco_10444;
        NAG_dco_10485.NAG_dco_10457(*this, NAG_dco_9992);
      }
    } else {
      NAG_dco_10485.NAG_dco_10390()->_adjoint_vector = &NAG_dco_10444;
      NAG_dco_10485.NAG_dco_10457(*this, NAG_dco_9992);
    }
  }
  struct NAG_dco_10488 {
    tape* NAG_dco_10016;
    bool NAG_dco_10417;
    NAG_dco_10488(tape* NAG_dco_10041)
        : NAG_dco_10016(NAG_dco_10041), NAG_dco_10417(NAG_dco_10041->sparse_interpret()) {}
    ~NAG_dco_10488() { NAG_dco_10016->sparse_interpret() = NAG_dco_10417; }
  };
  template <typename NAG_dco_10396 = decltype(NAG_dco_10416)>
  void NAG_dco_9993(iterator_t NAG_dco_9841, const iterator_t& NAG_dco_9848,
                    const interpretation_settings& NAG_dco_9992, NAG_dco_10396 const& NAG_dco_10397) {
    NAG_dco_10419();
    NAG_dco_10002(NAG_dco_9962, *this, NAG_dco_9841, NAG_dco_9848, NAG_dco_9992, NAG_dco_10397);
  }
  template <typename NAG_dco_10486, typename NAG_dco_10489, typename NAG_dco_10396>
  void NAG_dco_10002(NAG_dco_10486& NAG_dco_10444, NAG_dco_10489& NAG_dco_10490, iterator_t NAG_dco_9841,
                     const iterator_t& NAG_dco_9848, const interpretation_settings& NAG_dco_9992,
                     NAG_dco_10396 const& NAG_dco_10397) {
    NAG_dco_10488 NAG_dco_10491(this);
    if (NAG_dco_9841 > NAG_dco_9893::current()) {
      throw dco::exception::create<std::runtime_error>("you try to use a tape position outside of the current tape.");
    }
    if (NAG_dco_9848 > NAG_dco_9841) {
      throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.");
    }
    const std::size_t NAG_dco_10492 = NAG_dco_10423.size();
    for (std::size_t NAG_dco_10493 = 0; NAG_dco_10493 < NAG_dco_10492; ++NAG_dco_10493) {
      const std::size_t NAG_dco_9862 = NAG_dco_10492 - NAG_dco_10493 - 1;
      if (NAG_dco_9848 > NAG_dco_10423[NAG_dco_9862].NAG_dco_10389()) {
        break;
      }
      const iterator_t& NAG_dco_10494 = NAG_dco_10423[NAG_dco_9862].NAG_dco_10389();
      if (NAG_dco_9841 < NAG_dco_10494) {
        continue;
      }
      NAG_dco_9893::NAG_dco_10255(NAG_dco_9841);
      if (NAG_dco_9992.NAG_dco_9977)
        NAG_dco_10420<true>(NAG_dco_9841, NAG_dco_10494, NAG_dco_10444, NAG_dco_10397);
      else {
        NAG_dco_10420(NAG_dco_9841, NAG_dco_10494, NAG_dco_10444, NAG_dco_10397);
      }
      NAG_dco_9841 = NAG_dco_10494;
      NAG_dco_9893::NAG_dco_10256();
      NAG_dco_10484(NAG_dco_10490, NAG_dco_9841, NAG_dco_10423[NAG_dco_9862], NAG_dco_9992);
      if (NAG_dco_9992.reset) {
        NAG_dco_10336(NAG_dco_9841);
        NAG_dco_10423[NAG_dco_9862].NAG_dco_10424();
        NAG_dco_10423.pop_back();
      }
    }
    NAG_dco_9893::NAG_dco_10255(NAG_dco_9841);
    if (NAG_dco_9992.NAG_dco_9977) {
      NAG_dco_10420<true>(NAG_dco_9841, NAG_dco_9848, NAG_dco_10444, NAG_dco_10397);
    } else {
      NAG_dco_10420(NAG_dco_9841, NAG_dco_9848, NAG_dco_10444, NAG_dco_10397);
    }
    if (NAG_dco_9992.reset) {
      NAG_dco_10336(NAG_dco_9841);
    }
    NAG_dco_9893::NAG_dco_10256();
  }
};
template <memory_model::TYPE MEMORY_MODEL, typename NAG_dco_10036, memory_model::TYPE NAG_dco_9800,
          typename NAG_dco_9801>
const typename tape<MEMORY_MODEL, NAG_dco_10036, NAG_dco_9800, NAG_dco_9801>::NAG_dco_10415
    tape<MEMORY_MODEL, NAG_dco_10036, NAG_dco_9800, NAG_dco_9801>::NAG_dco_10416;
} // namespace internal
} // namespace dco
namespace dco {
template <class NAG_dco_9791, class NAG_dco_9756 = NAG_dco_9791, class NAG_dco_9757 = NAG_dco_9756,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1sm_mod {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, NAG_dco_9757> NAG_dco_10166;

public:
  typedef ga1sm_mod mode_t;
  typedef dco::internal::NAG_dco_10168<ga1sm_mod> data_t;
  static constexpr memory_model::TYPE TAPE_MODEL = memory_model::NAG_dco_9777;
  static constexpr memory_model::TYPE NAG_dco_10495 = MEMORY_MODEL;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef derivative_t NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
  typedef dco::internal::tape<TAPE_MODEL, NAG_dco_10166, NAG_dco_10495, ga1sm_mod> tape_t;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <class NAG_dco_9791, class NAG_dco_9756 = NAG_dco_9791, class NAG_dco_9757 = NAG_dco_9756,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1s_mod {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, NAG_dco_9757> NAG_dco_10166;

public:
  typedef ga1s_mod mode_t;
  static constexpr memory_model::TYPE TAPE_MODEL = memory_model::NAG_dco_9777;
  static constexpr memory_model::TYPE NAG_dco_10495 = MEMORY_MODEL;
  typedef dco::internal::NAG_dco_10160<ga1s_mod> data_t;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef derivative_t NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
  typedef dco::internal::tape<TAPE_MODEL, NAG_dco_10166, NAG_dco_10495, ga1s_mod> tape_t;
  inline static DCOi_THREAD_LOCAL tape_t* global_tape = nullptr;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <typename NAG_dco_9791, const std::size_t NAG_dco_10496 = 1, typename NAG_dco_9756 = NAG_dco_9791,
          typename NAG_dco_9757 = NAG_dco_9756, memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1v {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, dco::helper::valvec<NAG_dco_9757, NAG_dco_10496>> NAG_dco_10166;

public:
  typedef ga1v mode_t;
  typedef dco::internal::NAG_dco_10160<ga1v> data_t;
  static constexpr memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef NAG_dco_9757 NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = true;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = NAG_dco_10496;
  static constexpr std::size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, NAG_dco_10166, memory_model::NAG_dco_9773, ga1v> tape_t;
  inline static DCOi_THREAD_LOCAL tape_t* global_tape = nullptr;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <typename NAG_dco_9791, const std::size_t NAG_dco_10496 = 1, typename NAG_dco_9756 = NAG_dco_9791,
          typename NAG_dco_9757 = NAG_dco_9756, memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1vm {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, dco::helper::valvec<NAG_dco_9757, NAG_dco_10496>> NAG_dco_10166;

public:
  typedef ga1vm mode_t;
  typedef dco::internal::NAG_dco_10168<ga1vm> data_t;
  static constexpr memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef NAG_dco_9757 NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = true;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = NAG_dco_10496;
  static constexpr std::size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, NAG_dco_10166, memory_model::NAG_dco_9773, ga1vm> tape_t;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <typename NAG_dco_9791, const std::size_t NAG_dco_10496 = 1, typename NAG_dco_9756 = NAG_dco_9791,
          typename NAG_dco_9757 = NAG_dco_9756, memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1vm_mod {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, dco::helper::valvec<NAG_dco_9757, NAG_dco_10496>> NAG_dco_10166;

public:
  typedef ga1vm_mod mode_t;
  typedef dco::internal::NAG_dco_10168<ga1vm_mod> data_t;
  static constexpr memory_model::TYPE TAPE_MODEL = memory_model::NAG_dco_9777;
  static constexpr memory_model::TYPE NAG_dco_10495 = MEMORY_MODEL;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef typename derivative_t::value_t NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = true;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = NAG_dco_10496;
  static constexpr std::size_t p1f_size = 0;
  typedef dco::internal::tape<TAPE_MODEL, NAG_dco_10166, NAG_dco_10495, ga1vm_mod> tape_t;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <typename NAG_dco_9791, const std::size_t NAG_dco_10496 = 1, typename NAG_dco_9756 = NAG_dco_9791,
          typename NAG_dco_9757 = NAG_dco_9756, memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class ga1v_mod {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, dco::helper::valvec<NAG_dco_9757, NAG_dco_10496>> NAG_dco_10166;

public:
  typedef ga1v_mod mode_t;
  typedef dco::internal::NAG_dco_10160<ga1v_mod> data_t;
  static constexpr memory_model::TYPE TAPE_MODEL = memory_model::NAG_dco_9777;
  static constexpr memory_model::TYPE NAG_dco_10495 = MEMORY_MODEL;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef typename derivative_t::value_t NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = true;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = NAG_dco_10496;
  static constexpr std::size_t p1f_size = 0;
  typedef dco::internal::tape<TAPE_MODEL, NAG_dco_10166, NAG_dco_10495, ga1v_mod> tape_t;
  inline static DCOi_THREAD_LOCAL tape_t* global_tape = nullptr;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
template <typename active_t, typename NAG_dco_10497 = void> struct gbcp;
template <typename NAG_dco_10013>
struct gbcp<NAG_dco_10013, std::enable_if_t<(dco::mode<NAG_dco_10013>::is_dco_type &&
                                             !internal::is_gbcp_type<NAG_dco_10013>::value)>> {
  typedef NAG_dco_10013 binary_t;
  typedef typename dco::mode<binary_t>::value_t active_t;
  typedef active_t active_value_t;
  typedef typename dco::mode<active_value_t>::value_t value_t;
  typedef typename dco::mode<active_value_t>::scalar_value_t scalar_value_t;
  typedef typename mode<active_value_t>::passive_t passive_t;
  typedef typename mode<active_value_t>::scalar_passive_t scalar_passive_t;
  typedef internal::jacobian_preaccumulator_t<> jacobian_preaccumulator_t;
  typedef dco::internal::NAG_dco_9934<gbcp> data_t;
  typedef dco::internal::active_type<active_value_t, data_t> type;
  typedef typename dco::mode<active_value_t>::tape_t tape_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = dco::mode<active_value_t>::is_adjoint_type;
  static constexpr bool is_tangent_type = dco::mode<active_value_t>::is_tangent_type;
  static constexpr bool NAG_dco_10167 = dco::mode<active_value_t>::NAG_dco_10167;
  static constexpr int gbcp_order = 1;
  static constexpr int order = dco::mode<binary_t>::order - 1;
  static constexpr std::size_t derivative_vector_length = dco::mode<active_t>::derivative_vector_length;
  static constexpr std::size_t p1f_size = 0;
};
template <typename NAG_dco_10498>
struct gbcp<NAG_dco_10498,
            std::enable_if_t<(dco::mode<NAG_dco_10498>::is_dco_type && internal::is_gbcp_type<NAG_dco_10498>::value)>> {
  typedef NAG_dco_10498 binary_t;
  typedef typename dco::mode<binary_t>::active_t active_t;
  typedef typename dco::mode<binary_t>::active_value_t active_value_t;
  typedef typename dco::mode<binary_t>::value_t value_t;
  typedef typename dco::mode<binary_t>::scalar_value_t scalar_value_t;
  typedef typename dco::mode<binary_t>::passive_t passive_t;
  typedef typename dco::mode<binary_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::NAG_dco_9934<gbcp> data_t;
  typedef dco::internal::active_type<active_value_t, data_t> type;
  typedef internal::jacobian_preaccumulator_t<> jacobian_preaccumulator_t;
  typedef typename dco::mode<active_value_t>::tape_t tape_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = dco::mode<binary_t>::is_adjoint_type;
  static constexpr bool is_tangent_type = dco::mode<binary_t>::is_tangent_type;
  static constexpr int gbcp_order = dco::mode<binary_t>::gbcp_order + 1;
  static constexpr int order = dco::mode<binary_t>::order - 1;
  static constexpr std::size_t derivative_vector_length = dco::mode<value_t>::derivative_vector_length;
};
template <typename NAG_dco_9949> struct gbcp<NAG_dco_9949, std::enable_if_t<(!dco::mode<NAG_dco_9949>::is_dco_type)>> {
  typedef internal::jacobian_preaccumulator_t<> jacobian_preaccumulator_t;
  typedef NAG_dco_9949 binary_t;
  typedef binary_t active_t;
  typedef binary_t active_value_t;
  typedef binary_t value_t;
  typedef binary_t scalar_value_t;
  typedef binary_t passive_t;
  typedef typename dco::mode<binary_t>::scalar_passive_t scalar_passive_t;
  typedef binary_t type;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = false;
  static constexpr bool is_tangent_type = false;
  static constexpr int gbcp_order = 1;
  static constexpr int order = 0;
  static constexpr std::size_t derivative_vector_length = 0;
  typedef typename dco::mode<active_value_t>::tape_t tape_t;
};
} // namespace dco

namespace dco {
template <typename NAG_dco_9791, std::size_t NAG_dco_10499 = 32> struct gp1f {
  typedef gp1f mode_t;
  typedef NAG_dco_9791 value_t;
  typedef NAG_dco_9791 active_value_t;
  typedef value_t scalar_value_t;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  static constexpr std::size_t p1f_size = NAG_dco_10499;
  typedef internal::NAG_dco_10379<gp1f> data_t;
  typedef internal::active_type<NAG_dco_9791, data_t> type;
  typedef typename data_t::derivative_t derivative_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = false;
  static constexpr bool is_tangent_type = false;
  static constexpr bool is_intermediate_type = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = NAG_dco_10499;
  typedef NAG_dco_9811 tape_t;
  typedef void local_gradient_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9801> struct NAG_dco_10500 {
  typedef NAG_dco_9801 mode_t;
  index_t tape_index;
  NAG_dco_10500() : tape_index(0) {}
  NAG_dco_10500(NAG_dco_10500 const& NAG_dco_9778, NAG_dco_9806) : NAG_dco_10500(NAG_dco_9778) {}
  void clear() { tape_index = 0; }
  typedef typename mode_t::value_t NAG_dco_9780;

private:
  template <class NAG_dco_10147>
  static void interpret(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
                        [[maybe_unused]] bool NAG_dco_10501) {
    NAG_dco_9801::global_tape->NAG_dco_10502[NAG_dco_9801::global_tape->NAG_dco_10503] = NAG_dco_9778.tape_index;
    NAG_dco_9801::global_tape->NAG_dco_10503++;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static void
  interpret(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            bool NAG_dco_10501) {
    interpret(NAG_dco_9778.NAG_dco_10153(), NAG_dco_10501);
    interpret(NAG_dco_9778.NAG_dco_10155(), NAG_dco_10501);
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  static void interpret(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
                        bool NAG_dco_10501) {
    interpret(NAG_dco_9778.NAG_dco_10158(), NAG_dco_10501);
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static void
  interpret(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            bool NAG_dco_10501) {
    interpret(NAG_dco_9778.NAG_dco_10153(), NAG_dco_10501);
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static void
  interpret(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            bool NAG_dco_10501) {
    interpret(NAG_dco_9778.NAG_dco_10155(), NAG_dco_10501);
  }

protected:
  template <class NAG_dco_9935, class NAG_dco_9805>
  static void NAG_dco_9936([[maybe_unused]] const NAG_dco_9935& NAG_dco_9963,
                           [[maybe_unused]] NAG_dco_9805& NAG_dco_10504) {
    if constexpr (std::is_base_of_v<NAG_dco_9801, dco::mode<NAG_dco_9935>>) {
      const int NAG_dco_10505 = NAG_dco_9801::global_tape->NAG_dco_10503;
      interpret(NAG_dco_9963, false);
      NAG_dco_10500& data = const_cast<NAG_dco_10500&>(NAG_dco_10504);
      if (NAG_dco_10505 == NAG_dco_9801::global_tape->NAG_dco_10503) {
        data.clear();
      } else {
        NAG_dco_9801::global_tape->NAG_dco_10506++;
        data.tape_index = NAG_dco_9801::global_tape->NAG_dco_10506;
        NAG_dco_9801::global_tape->NAG_dco_10507[NAG_dco_9801::global_tape->NAG_dco_10506].NAG_dco_10508 =
            NAG_dco_9801::global_tape->NAG_dco_10503 - NAG_dco_10505;
        NAG_dco_9801::global_tape->NAG_dco_10507[NAG_dco_9801::global_tape->NAG_dco_10506].NAG_dco_10505 =
            NAG_dco_10505;
      }
    }
  }
  template <class NAG_dco_9935> void NAG_dco_9936(const NAG_dco_9935& NAG_dco_9963) {
    NAG_dco_9936(NAG_dco_9963, *this);
  }
};
} // namespace internal
} // namespace dco
namespace dco {
namespace internal {
template <typename NAG_dco_9780> struct NAG_dco_10509 {
private:
  template <typename NAG_dco_9801> friend struct NAG_dco_10500;
  struct NAG_dco_10510 {
    index_t NAG_dco_10508;
    index_t NAG_dco_10505;
  };
  NAG_dco_10510* NAG_dco_10507;
  index_t NAG_dco_10506;
  int* NAG_dco_10502;
  index_t NAG_dco_10503;
  NAG_dco_10509(const NAG_dco_10509<NAG_dco_9780>&) {
    throw dco::exception::create<std::runtime_error>("dco_error: Not implemented yet! Please report, why needed!");
  }
  NAG_dco_10509(index_t NAG_dco_10508, index_t NAG_dco_10511) {
    NAG_dco_10507 = new NAG_dco_10510[static_cast<std::size_t>(NAG_dco_10511)];
    NAG_dco_10506 = 0;
    NAG_dco_10502 = new int[static_cast<std::size_t>(NAG_dco_10508)];
    NAG_dco_10503 = 0;
  }
  ~NAG_dco_10509() {
    if (NAG_dco_10507)
      delete[] NAG_dco_10507;
    if (NAG_dco_10502)
      delete[] NAG_dco_10502;
  }

public:
  struct NAG_dco_10512 {
    friend struct NAG_dco_10509<NAG_dco_9780>;

  private:
    index_t NAG_dco_10513;
    index_t NAG_dco_10514;
    NAG_dco_10512(index_t NAG_dco_10515, index_t NAG_dco_10516)
        : NAG_dco_10513(NAG_dco_10515), NAG_dco_10514(NAG_dco_10516) {}

  public:
    NAG_dco_10512() : NAG_dco_10513(0), NAG_dco_10514(0) {};
    index_t NAG_dco_10517() { return NAG_dco_10513; }
    index_t NAG_dco_10518() {
      if (NAG_dco_10514 < 0)
        return -NAG_dco_10514;
      return NAG_dco_10514;
    }
    bool NAG_dco_10501() { return NAG_dco_10514 < 0; }
  };
  struct iterator_t {
  private:
    index_t _progvarcounter;

  public:
    index_t NAG_dco_10511() const { return _progvarcounter; }
    iterator_t(const index_t NAG_dco_10519) : _progvarcounter(NAG_dco_10519) {}
  };
  iterator_t get_position() { return iterator_t(NAG_dco_10506); }
  typedef std::vector<NAG_dco_10512> sparse_jacobi;
  template <class NAG_dco_9791>
  sparse_jacobi* build_pattern(NAG_dco_9791* NAG_dco_10517, index_t NAG_dco_9762, const iterator_t& NAG_dco_10520) {
    sparse_jacobi* NAG_dco_9849 = new sparse_jacobi();
    for (index_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9762; ++NAG_dco_9862) {
      NAG_dco_10521(NAG_dco_9862 + 1, NAG_dco_10517[NAG_dco_9862].tape_index, NAG_dco_10520, NAG_dco_9849);
    }
    return NAG_dco_9849;
  }
  void create_pattern_file(sparse_jacobi* NAG_dco_10522, std::string filename) {
    std::ofstream out(filename.c_str());
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10522->size(); ++NAG_dco_9862) {
      NAG_dco_10512& NAG_dco_10523 = (*NAG_dco_10522)[NAG_dco_9862];
      out << NAG_dco_10523.NAG_dco_10517() << " " << NAG_dco_10523.NAG_dco_10518() << " 1" << std::endl;
    }
    out.close();
  }
  void NAG_dco_10524(std::string filename) {
    std::ofstream out(filename.c_str());
    out << "digraph {" << std::endl;
    for (index_t NAG_dco_9862 = 1; NAG_dco_9862 <= NAG_dco_10506; ++NAG_dco_9862) {
      out << NAG_dco_9862 << std::endl;
    }
    for (index_t NAG_dco_9862 = 1; NAG_dco_9862 <= NAG_dco_10506; ++NAG_dco_9862) {
      int NAG_dco_10508 = NAG_dco_10507[NAG_dco_9862].NAG_dco_10508;
      int NAG_dco_10525 = NAG_dco_10507[NAG_dco_9862].NAG_dco_10505;
      for (int NAG_dco_10526 = 0; NAG_dco_10526 < NAG_dco_10508; ++NAG_dco_10526) {
        int NAG_dco_10102 = NAG_dco_10502[NAG_dco_10526 + NAG_dco_10525];
        out << NAG_dco_9862 << " -> " << NAG_dco_10102 << std::endl;
      }
    }
    out << "}" << std::endl;
    out.close();
  }
  void NAG_dco_10521(index_t NAG_dco_10515, index_t NAG_dco_9881, const iterator_t& NAG_dco_10520,
                     sparse_jacobi* NAG_dco_10527) {
    if (NAG_dco_9881 == 0)
      return;
    if (NAG_dco_9881 <= NAG_dco_10520.NAG_dco_10511()) {
      NAG_dco_10527->push_back(NAG_dco_10512(NAG_dco_10515, NAG_dco_9881));
    } else {
      index_t NAG_dco_10508 = NAG_dco_10507[NAG_dco_9881].NAG_dco_10508;
      index_t NAG_dco_10525 = NAG_dco_10507[NAG_dco_9881].NAG_dco_10505;
      for (int NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_10508; ++NAG_dco_9862) {
        NAG_dco_10521(NAG_dco_10515, NAG_dco_10502[NAG_dco_9862 + NAG_dco_10525], NAG_dco_10520, NAG_dco_10527);
      }
    }
  }
  static NAG_dco_10509* create(index_t size, index_t NAG_dco_10528 = 0) {
    if (NAG_dco_10528 == 0)
      NAG_dco_10528 = size / 2;
    return new NAG_dco_10509(size, NAG_dco_10528);
  }
  static void remove(NAG_dco_10509*& tape) {
    delete tape;
    tape = 0;
  }
  template <class NAG_dco_10147>
  void register_variable(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10529) {
    NAG_dco_10147& data = NAG_dco_10529.data();
    NAG_dco_10506++;
    data.tape_index = NAG_dco_10506;
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename NAG_dco_9791 = double> struct gp1t {
  typedef NAG_dco_9791 value_t;
  typedef value_t scalar_value_t;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef typename internal::NAG_dco_10509<NAG_dco_9791> tape_t;
  inline static DCOi_THREAD_LOCAL tape_t* global_tape = nullptr;
  typedef internal::NAG_dco_10500<gp1t> data_t;
  typedef internal::active_type<NAG_dco_9791, data_t> type;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_intermediate_type = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
};
} // namespace dco

namespace dco {
namespace internal {
inline bool all(bool NAG_dco_10530) { return NAG_dco_10530; }
template <std::size_t NAG_dco_9762> inline bool all(std::bitset<NAG_dco_9762> const& NAG_dco_10530) {
  return NAG_dco_10530.all();
}
template <typename, typename, typename enable_if = void> struct NAG_dco_10531 {
  template <typename NAG_dco_9918, typename NAG_dco_10440>
  static auto get(NAG_dco_9918&& NAG_dco_9778, NAG_dco_10440 const& pval) {
    if constexpr (HAS_GT1S_ACTIVITY_CHECK) {
      if (all(NAG_dco_9778.NAG_dco_10532 == 0.0))
        return NAG_dco_9778.NAG_dco_10532;
    }
    return NAG_dco_9778.NAG_dco_10532 * pval;
  }
};
template <typename NAG_dco_10533, typename NAG_dco_9801>
struct NAG_dco_10531<
    NAG_dco_10533, NAG_dco_9801,
    std::enable_if_t<std::is_base_of_v<typename NAG_dco_10533::data_t,
                                       internal::NAG_dco_10379<typename NAG_dco_10533::data_t::mode_t>>>> {
  template <typename NAG_dco_9918, typename NAG_dco_10440>
  static auto get(NAG_dco_9918&& NAG_dco_9778, NAG_dco_10440&& pval) {
    return (NAG_dco_9778.NAG_dco_10532 == 0) ? static_cast<typename NAG_dco_9801::derivative_t>(0.0)
                                             : NAG_dco_9778.NAG_dco_10532 * (pval == 0 ? pval + 1 : pval);
  }
};
template <typename NAG_dco_9801> struct NAG_dco_10534 {
  typedef NAG_dco_9801 mode_t;
  typedef NAG_dco_10112 NAG_dco_10162;
  typedef typename mode_t::derivative_t derivative_t;
  mutable derivative_t NAG_dco_10532;
  NAG_dco_10534() : NAG_dco_10532(0.0) {}
  DCO_STRONG_INLINE NAG_dco_10534(const NAG_dco_10534& NAG_dco_10107) : NAG_dco_10532(NAG_dco_10107.NAG_dco_10532) {}
  DCO_STRONG_INLINE NAG_dco_10534(const NAG_dco_10534& NAG_dco_10060, NAG_dco_9806) : NAG_dco_10534(NAG_dco_10060) {}
  NAG_dco_10534& operator=(const NAG_dco_10534& NAG_dco_10107) {
    NAG_dco_10532 = NAG_dco_10107.NAG_dco_10532;
    return *this;
  }
  void NAG_dco_10108(const derivative_t& NAG_dco_10221) { NAG_dco_10532 = NAG_dco_10221; }
  void NAG_dco_9997(derivative_t& NAG_dco_10221) const { NAG_dco_10221 = NAG_dco_10532; }
  void clear() { NAG_dco_10532 = 0.0; }
  derivative_t& NAG_dco_9944() const {
    stce_1000002();
    return NAG_dco_10532;
  }
  derivative_t& NAG_dco_9942() const { return NAG_dco_9944(); }
  template <class NAG_dco_9935> void NAG_dco_9936([[maybe_unused]] const NAG_dco_9935& NAG_dco_10164) {
    if constexpr (std::is_base_of_v<NAG_dco_9801, dco::mode<NAG_dco_9935>>) {
      NAG_dco_10532 = NAG_dco_10535(NAG_dco_10164, static_cast<derivative_t>(1.0));
    }
  }
  template <class NAG_dco_9780, class NAG_dco_10147>
  static derivative_t NAG_dco_10535(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
                                    const derivative_t& pval) {
    return NAG_dco_10531<
        dco::mode<typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::value_t>,
        NAG_dco_9801>::get(NAG_dco_9778, pval);
  }
  template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static derivative_t NAG_dco_10535(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      const derivative_t& pval) {
    return NAG_dco_10535(NAG_dco_9778.NAG_dco_10153(), NAG_dco_9778.NAG_dco_10154() * pval) +
           NAG_dco_10535(NAG_dco_9778.NAG_dco_10155(), NAG_dco_9778.NAG_dco_10156() * pval);
  }
  template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
  static derivative_t
  NAG_dco_10535(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
                const derivative_t& pval) {
    return NAG_dco_10535(NAG_dco_9778.NAG_dco_10158(), NAG_dco_9778.pval() * pval);
  }
  template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static derivative_t NAG_dco_10535(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      const derivative_t& pval) {
    return NAG_dco_10535(NAG_dco_9778.NAG_dco_10153(), NAG_dco_9778.NAG_dco_10154() * pval);
  }
  template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static derivative_t NAG_dco_10535(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      const derivative_t& pval) {
    return NAG_dco_10535(NAG_dco_9778.NAG_dco_10155(), NAG_dco_9778.NAG_dco_10156() * pval);
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <class NAG_dco_9791, typename NAG_dco_10536 = NAG_dco_9791> class gt1s {
public:
  typedef gt1s mode_t;
  typedef dco::internal::NAG_dco_10534<gt1s> data_t;
  typedef NAG_dco_9791 value_t;
  typedef NAG_dco_9791 active_value_t;
  typedef NAG_dco_9791 scalar_value_t;
  typedef NAG_dco_10536 derivative_t;
  typedef NAG_dco_10536 NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<NAG_dco_9791, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = false;
  static constexpr bool is_tangent_type = true;
  static constexpr bool NAG_dco_10167 = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
  typedef NAG_dco_9811 tape_t;
  typedef void local_gradient_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9801> struct NAG_dco_10537 {
  typedef NAG_dco_9801 mode_t;
  typedef NAG_dco_10112 NAG_dco_10162;
  typedef typename mode_t::derivative_t derivative_t;
  typedef typename derivative_t::value_t NAG_dco_10077;

protected:
  typedef typename mode_t::value_t NAG_dco_9780;

public:
  static constexpr std::size_t vecsize = derivative_t::NAG_dco_9858;
  mutable bool NAG_dco_10538;
  mutable derivative_t tlms;
  NAG_dco_10537() : NAG_dco_10538(false) { clear(); }
  NAG_dco_10537(NAG_dco_10537 const& NAG_dco_10060, NAG_dco_9806) : NAG_dco_10537(NAG_dco_10060) {}
  void NAG_dco_10108(const NAG_dco_10077& NAG_dco_10221, const std::size_t NAG_dco_10539) {
    if (!NAG_dco_10538) {
      NAG_dco_10538 = true;
    }
    tlms[NAG_dco_10539] = NAG_dco_10221;
  }
  derivative_t& NAG_dco_9944() const {
    stce_1000002();
    NAG_dco_10538 = true;
    return tlms;
  }
  derivative_t& NAG_dco_9942() const { return NAG_dco_9944(); }
  void NAG_dco_9997(NAG_dco_10077& NAG_dco_10221, const std::size_t NAG_dco_10539) const {
    stce_1000002();
    if (NAG_dco_10538) {
      NAG_dco_10221 = tlms[NAG_dco_10539];
    } else {
      NAG_dco_10221 = 0;
    }
  }
  void clear() {
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < vecsize; ++NAG_dco_9862) {
      tlms[NAG_dco_9862] = 0.0;
    }
  }
  template <class NAG_dco_9935>
  DCO_ALWAYS_INLINE void NAG_dco_9936([[maybe_unused]] const NAG_dco_9935& NAG_dco_10164) {
    if constexpr (std::is_base_of_v<NAG_dco_9801, dco::mode<NAG_dco_9935>>) {
      bool NAG_dco_10540 = this->NAG_dco_10541(NAG_dco_10164);
      if (NAG_dco_10540) {
        derivative_t NAG_dco_10542{};
        NAG_dco_10535(NAG_dco_10542, NAG_dco_10164, 1.0);
        tlms = NAG_dco_10542;
        NAG_dco_10538 = true;
      } else {
        NAG_dco_10538 = false;
      }
    }
  }
  template <class NAG_dco_10147>
  static DCO_ALWAYS_INLINE void
  NAG_dco_10535(derivative_t& tlms, const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
                const NAG_dco_10077& pval) {
    if (NAG_dco_9778.NAG_dco_10538) {
      tlms += NAG_dco_9778.tlms * pval;
    }
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static DCO_ALWAYS_INLINE void NAG_dco_10535(
      derivative_t& tlms,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      const NAG_dco_10077& pval) {
    NAG_dco_10535(tlms, NAG_dco_9778.NAG_dco_10153(), NAG_dco_9778.NAG_dco_10154() * pval);
    NAG_dco_10535(tlms, NAG_dco_9778.NAG_dco_10155(), NAG_dco_9778.NAG_dco_10156() * pval);
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  static DCO_ALWAYS_INLINE void
  NAG_dco_10535(derivative_t& tlms,
                const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
                const NAG_dco_10077& pval) {
    NAG_dco_10535(tlms, NAG_dco_9778.NAG_dco_10158(), NAG_dco_9778.pval() * pval);
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static DCO_ALWAYS_INLINE void NAG_dco_10535(
      derivative_t& tlms,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      const NAG_dco_10077& pval) {
    NAG_dco_10535(tlms, NAG_dco_9778.NAG_dco_10153(), NAG_dco_9778.NAG_dco_10154() * pval);
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static DCO_ALWAYS_INLINE void NAG_dco_10535(
      derivative_t& tlms,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
      const NAG_dco_10077& pval) {
    NAG_dco_10535(tlms, NAG_dco_9778.NAG_dco_10155(), NAG_dco_9778.NAG_dco_10156() * pval);
  }
  template <class NAG_dco_10147>
  static bool NAG_dco_10541(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
    return NAG_dco_9778.NAG_dco_10538;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static bool NAG_dco_10541(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    return NAG_dco_10541(NAG_dco_9778.NAG_dco_10153()) || NAG_dco_10541(NAG_dco_9778.NAG_dco_10155());
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  static bool
  NAG_dco_10541(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
    return NAG_dco_10541(NAG_dco_9778.NAG_dco_10158());
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static bool NAG_dco_10541(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    return NAG_dco_10541(NAG_dco_9778.NAG_dco_10153());
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  static bool NAG_dco_10541(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    return NAG_dco_10541(NAG_dco_9778.NAG_dco_10155());
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <class NAG_dco_9791, std::size_t NAG_dco_10543 = 1, typename NAG_dco_10536 = NAG_dco_9791> class gt1v {
public:
  typedef gt1v mode_t;
  typedef dco::internal::NAG_dco_10537<gt1v> data_t;
  typedef NAG_dco_9791 value_t;
  typedef NAG_dco_9791 active_value_t;
  typedef value_t scalar_value_t;
  typedef dco::helper::valvec<NAG_dco_10536, NAG_dco_10543> derivative_t;
  typedef NAG_dco_10536 NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<NAG_dco_9791, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = false;
  static constexpr bool is_tangent_type = true;
  static constexpr bool NAG_dco_10167 = true;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = NAG_dco_10543;
  static constexpr std::size_t p1f_size = 0;
  typedef NAG_dco_9811 tape_t;
  typedef void local_gradient_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9801>
class NAG_dco_10544 : public NAG_dco_10534<NAG_dco_9801>, public NAG_dco_10160<NAG_dco_9801> {
  using NAG_dco_10545 = NAG_dco_10534<NAG_dco_9801>;
  using NAG_dco_10546 = NAG_dco_10160<NAG_dco_9801>;

public:
  typedef NAG_dco_9801 mode_t;
  typedef NAG_dco_10112 NAG_dco_10162;
  typedef typename NAG_dco_9801::tape_t tape_t;
  typedef typename tape_t::NAG_dco_9759 derivative_t;

public:
  NAG_dco_10544() : NAG_dco_10545(), NAG_dco_10546() {}
  DCO_STRONG_INLINE NAG_dco_10544(const NAG_dco_10544& NAG_dco_10107)
      : NAG_dco_10545(NAG_dco_10107), NAG_dco_10546(NAG_dco_10107) {}
  DCO_STRONG_INLINE NAG_dco_10544(const NAG_dco_10544& NAG_dco_10107, NAG_dco_9806) : NAG_dco_10544(NAG_dco_10107) {}
  DCO_STRONG_INLINE NAG_dco_10544& operator=(const NAG_dco_10544& NAG_dco_9778) {
    NAG_dco_10545::operator=(static_cast<const NAG_dco_10545&>(NAG_dco_9778));
    NAG_dco_10546::operator=(static_cast<const NAG_dco_10546&>(NAG_dco_9778));
    return *this;
  }
  inline void clear() {
    NAG_dco_10545::clear();
    NAG_dco_10546::clear();
  }
  inline index_t& _tape_index() const { return NAG_dco_10546::_tape_index(); }
  static typename NAG_dco_9801::tape_t* tape() { return NAG_dco_10546::tape(); }
  template <typename NAG_dco_10109>
  static DCO_STRONG_INLINE void register_variable(NAG_dco_10109& NAG_dco_9778, index_t index, tape_t* tape) {
    NAG_dco_10546::register_variable(NAG_dco_9778, index, tape);
  }
  template <class NAG_dco_9935> DCO_ALWAYS_INLINE void NAG_dco_9936(const NAG_dco_9935& NAG_dco_10164) {
    NAG_dco_10545::NAG_dco_9936(NAG_dco_10164);
    NAG_dco_10546::NAG_dco_9936(NAG_dco_10164);
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <typename NAG_dco_9791, typename NAG_dco_9756 = NAG_dco_9791, typename NAG_dco_9757 = NAG_dco_9756,
          memory_model::TYPE MEMORY_MODEL = DCO_TAPE_MEMORY_MODEL>
class gtas {
  typedef types_config_t<NAG_dco_9791, NAG_dco_9756, NAG_dco_9757> NAG_dco_10166;

public:
  static constexpr memory_model::TYPE TAPE_MODEL = MEMORY_MODEL;
  typedef gtas mode_t;
  typedef dco::internal::NAG_dco_10544<gtas> data_t;
  typedef typename NAG_dco_10166::value_t value_t;
  typedef value_t scalar_value_t;
  typedef typename NAG_dco_10166::value_t active_value_t;
  typedef typename NAG_dco_10166::NAG_dco_9759 derivative_t;
  typedef derivative_t NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<value_t, data_t> type;
  typedef type active_t;
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = true;
  static constexpr bool is_tangent_type = true;
  static constexpr bool NAG_dco_10167 = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
  typedef internal::tape<TAPE_MODEL, NAG_dco_10166, memory_model::NAG_dco_9773, gtas> tape_t;
  inline static DCOi_THREAD_LOCAL tape_t* global_tape = nullptr;
  typedef typename internal::NAG_dco_10098<type, tape_t> local_gradient_t;
  typedef dco::helper::NAG_dco_10039<tape_t> callback_object_t;
  typedef dco::helper::NAG_dco_10045<type, tape_t> userdata_object_t;
  typedef dco::helper::NAG_dco_10061<type, tape_t> external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<type, tape_t> jacobian_preaccumulator_t;
};
} // namespace dco

namespace dco {
namespace internal {
template <class NAG_dco_9908, class... NAG_dco_9791>
static inline auto NAG_dco_10136(NAG_dco_9908&& NAG_dco_10547, const std::string& NAG_dco_10548,
                                 NAG_dco_9791&&... NAG_dco_10549) {
  using type = std::common_type_t<typename dco::mode<NAG_dco_9791>::type...>;
  auto NAG_dco_10550 = [](const auto& arg) {
    if constexpr (dco::internal::NAG_dco_9906<decltype(arg)>) {
      return dco::derivative(static_cast<type>(arg));
    } else {
      return dco::value(arg);
    }
  };
  const auto NAG_dco_9849 = NAG_dco_10547(dco::value(NAG_dco_10549)...);
  const auto NAG_dco_10551 = NAG_dco_10547(NAG_dco_10550(NAG_dco_10549)...);
  if (NAG_dco_9849 != NAG_dco_10551) {
    if (!dco::mode<type>::suppress_control_flow_divergence_warning()) {
      std::cerr << "dco/c++ warning: Control flow diverges for bumped value."
                << (NAG_dco_10548.size() ? " Operation: " + NAG_dco_10548 : "") << std::endl;
    }
    dco::internal::NAG_dco_10110(dco::mode<type>::throw_exception_on_control_flow_divergence());
  }
  return NAG_dco_9849;
}
template <typename NAG_dco_9801> struct NAG_dco_10552 {
  static constexpr bool NAG_dco_9915 = true;
  typedef NAG_dco_9801 mode_t;
  typedef NAG_dco_10135 NAG_dco_10162;
  typedef typename mode_t::derivative_t derivative_t;
  typedef typename mode_t::value_t value_t;
  mutable derivative_t NAG_dco_10553;
  NAG_dco_10552() : NAG_dco_10553(dco::value(static_cast<typename mode_t::type const&>(*this))) { NAG_dco_10554(); }
  DCO_STRONG_INLINE NAG_dco_10552(const NAG_dco_10552& NAG_dco_10107) : NAG_dco_10553(NAG_dco_10107.NAG_dco_10553) {
    NAG_dco_10554();
  }
  DCO_STRONG_INLINE NAG_dco_10552(const NAG_dco_10552& NAG_dco_10060, NAG_dco_9806) : NAG_dco_10552(NAG_dco_10060) {}
  NAG_dco_10552& operator=(const NAG_dco_10552& NAG_dco_10107) = default;
  void NAG_dco_10108(const derivative_t& NAG_dco_10221) { NAG_dco_10553 = NAG_dco_10221; }
  void NAG_dco_9997(derivative_t& NAG_dco_10221) const { NAG_dco_10221 = NAG_dco_10553; }
  void clear() {}
  derivative_t& NAG_dco_9944() const {
    stce_1000002();
    return NAG_dco_10553;
  }
  derivative_t& NAG_dco_9942() const { return NAG_dco_9944(); }
  template <class NAG_dco_9935> void NAG_dco_9936([[maybe_unused]] const NAG_dco_9935& NAG_dco_10164) {
    NAG_dco_10553 = NAG_dco_10555(NAG_dco_10164);
  }
  template <typename NAG_dco_10556> derivative_t NAG_dco_10555(NAG_dco_10556 const& NAG_dco_10557) {
    if constexpr (NAG_dco_10182<NAG_dco_10556>) {
      return NAG_dco_10556::NAG_dco_10204::NAG_dco_10206(NAG_dco_10555(NAG_dco_10557.NAG_dco_10158()));
    } else if constexpr (NAG_dco_10184<NAG_dco_10556>) {
      return NAG_dco_10556::NAG_dco_10204::NAG_dco_10206(NAG_dco_10555(NAG_dco_10557.NAG_dco_10153()),
                                                         NAG_dco_10555(NAG_dco_10557.NAG_dco_10155()));
    } else if constexpr (NAG_dco_10187<NAG_dco_10556>) {
      return NAG_dco_10557.NAG_dco_10553;
    } else {
      return NAG_dco_10557;
    }
  }

private:
  static void NAG_dco_10554() {
    [[maybe_unused]] static bool NAG_dco_10400 = []() {
      std::cout << "dco/c++: dco::gfd is marked as experimental.\n";
      return true;
    }();
  }
};
} // namespace internal
} // namespace dco
namespace dco {
template <class NAG_dco_9791, typename NAG_dco_10558 = NAG_dco_9791> class gfd {
public:
  typedef gfd mode_t;
  typedef dco::internal::NAG_dco_10552<gfd> data_t;
  typedef NAG_dco_9791 value_t;
  typedef NAG_dco_9791 active_value_t;
  typedef NAG_dco_9791 scalar_value_t;
  typedef NAG_dco_10558 derivative_t;
  typedef NAG_dco_10558 NAG_dco_10077;
  typedef typename mode<value_t>::passive_t passive_t;
  typedef typename mode<value_t>::scalar_passive_t scalar_passive_t;
  typedef dco::internal::active_type<NAG_dco_9791, data_t> type;
  typedef type active_t;
  static_assert(std::is_same_v<value_t, double> || std::is_same_v<value_t, float>,
                "dco/c++: gfd can only be instantiated with float or double.");
  static constexpr bool is_dco_type = true;
  static constexpr bool is_adjoint_type = false;
  static constexpr bool is_tangent_type = false;
  static constexpr bool NAG_dco_10167 = false;
  static constexpr int order = dco::mode<NAG_dco_9791>::order + 1;
  static constexpr std::size_t derivative_vector_length = 0;
  static constexpr std::size_t p1f_size = 0;
  typedef NAG_dco_9811 tape_t;
  typedef void local_gradient_t;
  typedef void external_adjoint_object_t;
  typedef internal::jacobian_preaccumulator_t<> jacobian_preaccumulator_t;
  inline static bool NAG_dco_10559 = false;
  static bool& suppress_control_flow_divergence_warning() { return NAG_dco_10559; }
  inline static bool NAG_dco_10560 = false;
  static bool& throw_exception_on_control_flow_divergence() { return NAG_dco_10560; }
};
} // namespace dco

namespace dco {
namespace internal {
template <typename...> struct NAG_dco_10561 {
  static constexpr bool value = true;
};
} // namespace internal
template <typename... NAG_dco_10562> struct multi_mode : private NAG_dco_10562... {
  using mode_t = multi_mode;
  static_assert(internal::NAG_dco_9917<typename NAG_dco_10562::data_t::mode_t...>::value,
                "dco/c++: multi_mode error. Modes should only appear once in the list.");
  static_assert(internal::NAG_dco_10561<NAG_dco_10562...>::value,
                "dco/c++: multi_mode error. If using codegen, make sure to use it as first mode.");
  static_assert(internal::NAG_dco_9920(NAG_dco_10562::is_dco_type...),
                "dco/c++: multi_mode error. Only dco modes supported.");
  template <typename NAG_dco_9791> struct NAG_dco_10563 {
    using data_t = typename NAG_dco_9791::data_t;
  };
  struct data_t : public NAG_dco_10563<NAG_dco_10562>::data_t... {
    static constexpr bool NAG_dco_9915 =
        internal::NAG_dco_9922(internal::NAG_dco_9916<typename NAG_dco_10562::type>...);
    using mode_t = multi_mode;
    using NAG_dco_10162 = typename std::tuple_element_t<0, std::tuple<NAG_dco_10562...>>::data_t::NAG_dco_10162;
    data_t() = default;
    data_t(data_t const&) = default;
    data_t(internal::active_type<double, data_t> const& NAG_dco_9778) : NAG_dco_10562::data_t(NAG_dco_9778)... {}
    data_t(data_t const& NAG_dco_9778, internal::NAG_dco_9806)
        : NAG_dco_10562::data_t(NAG_dco_9778, internal::NAG_dco_9806())... {}
    template <typename NAG_dco_10564, typename... NAG_dco_10565, typename NAG_dco_10396>
    DCO_ALWAYS_INLINE void NAG_dco_10566(NAG_dco_10396&& NAG_dco_10397) {
      NAG_dco_10397(static_cast<typename NAG_dco_10564::data_t&>(*this));
      if constexpr (sizeof...(NAG_dco_10565) > 0)
        NAG_dco_10566<NAG_dco_10565...>(NAG_dco_10397);
    }
    template <typename NAG_dco_9791> data_t& operator=(NAG_dco_9791&& NAG_dco_9778) {
      NAG_dco_10566<NAG_dco_10562...>([&](auto& data) { data = NAG_dco_9778; });
      return *this;
    }
    template <typename NAG_dco_10163> DCO_ALWAYS_INLINE void NAG_dco_9936(const NAG_dco_10163& NAG_dco_10164) {
      NAG_dco_10566<NAG_dco_10562...>([&](auto& data) { data.NAG_dco_9936(NAG_dco_10164); });
    }
    DCO_ALWAYS_INLINE void clear() {
      NAG_dco_10566<NAG_dco_10562...>([&](auto& data) { data.clear(); });
    }
  };
  using passive_t = std::common_type_t<typename NAG_dco_10562::passive_t...>;
  using scalar_passive_t = std::common_type_t<typename NAG_dco_10562::scalar_passive_t...>;
  using value_t = std::common_type_t<typename NAG_dco_10562::value_t...>;
  using scalar_value_t = std::common_type_t<typename NAG_dco_10562::scalar_value_t...>;
  static constexpr int order = std::tuple_element_t<0, std::tuple<NAG_dco_10562...>>::order;
  static_assert(internal::NAG_dco_9924(order, NAG_dco_10562::order...),
                "dco/c++: multi_mode error. Only modes of same differentiation order supported.");
  static constexpr bool is_dco_type = true;
  static constexpr bool is_tangent_type = internal::NAG_dco_9922(NAG_dco_10562::is_tangent_type...);
  static constexpr bool is_adjoint_type = internal::NAG_dco_9922(NAG_dco_10562::is_adjoint_type...);
  static constexpr bool NAG_dco_10167 = internal::NAG_dco_9922(NAG_dco_10562::NAG_dco_10167...);
  static constexpr std::size_t p1f_size = std::max({NAG_dco_10562::p1f_size...});
  using type = internal::active_type<double, data_t>;
  using active_t = type;
};
} // namespace dco

namespace dco {
namespace internal {
template <typename NAG_dco_9791, typename NAG_dco_9802> struct smart_tape_ptr_t {
  static_assert(sizeof(NAG_dco_9791) == 0, "dco/c++: smart_tape_ptr_t got instantiated with a non-adjoint type/mode.");
};
template <typename mode_t> struct smart_tape_ptr_t<mode_t, std::enable_if_t<NAG_dco_10189<typename mode_t::type>>> {
  typename mode_t::tape_t* NAG_dco_10016 = nullptr;
  smart_tape_ptr_t(tape_options NAG_dco_10027 = tape_options()) {
    if (mode_t::global_tape) {
      throw dco::exception::create<std::runtime_error>("global_tape already allocated.");
    }
    mode_t::global_tape = NAG_dco_10016 = mode_t::tape_t::create(NAG_dco_10027);
  }
  ~smart_tape_ptr_t() {
    if (NAG_dco_10016) {
      mode_t::global_tape = nullptr;
      mode_t::tape_t::remove(NAG_dco_10016);
    }
  }
  smart_tape_ptr_t(smart_tape_ptr_t const&) = delete;
  smart_tape_ptr_t& operator=(smart_tape_ptr_t const&) = delete;
  smart_tape_ptr_t(smart_tape_ptr_t&& NAG_dco_9975) noexcept : NAG_dco_10016(NAG_dco_9975.NAG_dco_10016) {
    NAG_dco_9975.NAG_dco_10016 = nullptr;
  }
  smart_tape_ptr_t& operator=(smart_tape_ptr_t&& NAG_dco_9975) noexcept {
    if (this == &NAG_dco_9975)
      return *this;
    NAG_dco_10016 = NAG_dco_9975.NAG_dco_10016;
    NAG_dco_9975.NAG_dco_10016 = nullptr;
    return *this;
  }
  typename mode_t::tape_t*& data() { return NAG_dco_10016; }
  typename mode_t::tape_t* const& data() const { return NAG_dco_10016; }
  typename mode_t::tape_t* operator->() { return NAG_dco_10016; }
  typename mode_t::tape_t const* operator->() const { return NAG_dco_10016; }
  typename mode_t::tape_t& operator*() { return *NAG_dco_10016; }
  typename mode_t::tape_t const& operator*() const { return *NAG_dco_10016; }
  operator typename mode_t::tape_t *() { return NAG_dco_10016; }
  operator typename mode_t::tape_t const*() const { return NAG_dco_10016; }
};
template <typename mode_t>
struct smart_tape_ptr_t<mode_t, std::enable_if_t<mode_t::is_adjoint_type && !NAG_dco_10189<typename mode_t::type>>> {
  typename mode_t::tape_t* NAG_dco_10016 = nullptr;
  smart_tape_ptr_t(tape_options NAG_dco_10027 = tape_options())
      : NAG_dco_10016(mode_t::tape_t::create(NAG_dco_10027)) {}
  ~smart_tape_ptr_t() {
    mode_t::tape_t::remove(NAG_dco_10016);
    NAG_dco_10016 = nullptr;
  }
  smart_tape_ptr_t(smart_tape_ptr_t const&) = delete;
  smart_tape_ptr_t& operator=(smart_tape_ptr_t const&) = delete;
  smart_tape_ptr_t(smart_tape_ptr_t&& NAG_dco_9975) noexcept : NAG_dco_10016(NAG_dco_9975.NAG_dco_10016) {
    NAG_dco_9975.NAG_dco_10016 = nullptr;
  }
  smart_tape_ptr_t& operator=(smart_tape_ptr_t&& NAG_dco_9975) noexcept {
    if (this == &NAG_dco_9975)
      return *this;
    mode_t::tape_t::remove(NAG_dco_10016);
    NAG_dco_10016 = NAG_dco_9975.NAG_dco_10016;
    NAG_dco_9975.NAG_dco_10016 = nullptr;
    return *this;
  }
  typename mode_t::tape_t*& data() { return NAG_dco_10016; }
  typename mode_t::tape_t* const& data() const { return NAG_dco_10016; }
  typename mode_t::tape_t* operator->() { return NAG_dco_10016; }
  typename mode_t::tape_t const* operator->() const { return NAG_dco_10016; }
  typename mode_t::tape_t& operator*() { return *NAG_dco_10016; }
  typename mode_t::tape_t const& operator*() const { return *NAG_dco_10016; }
  operator typename mode_t::tape_t *() { return NAG_dco_10016; }
  operator typename mode_t::tape_t const*() const { return NAG_dco_10016; }
};
template <typename NAG_dco_9791, typename NAG_dco_10186>
struct smart_tape_ptr_t<internal::active_type<NAG_dco_9791, NAG_dco_10186>>
    : public smart_tape_ptr_t<typename NAG_dco_10186::mode_t> {};
} // namespace internal
template <typename NAG_dco_9801> using smart_tape_ptr_t = internal::smart_tape_ptr_t<NAG_dco_9801>;
} // namespace dco

namespace dco {
namespace NAG_dco_10567 {
template <class NAG_dco_9780> struct NAG_dco_10568 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(NAG_dco_10213 + NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0));
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10570 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(NAG_dco_10213 - NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0));
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(-1.0));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10571 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(NAG_dco_10213 * NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(NAG_dco_10213);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10572 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(NAG_dco_10213 / NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) / NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(-_value / NAG_dco_10214);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10573 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 + NAG_dco_10214;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10574 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 + NAG_dco_10214;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10575 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 - NAG_dco_10214;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10576 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 - NAG_dco_10214;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(-1.0));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10577 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 * NAG_dco_10214;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(NAG_dco_10214);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10578 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 * NAG_dco_10214;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(NAG_dco_10213);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10579 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 / NAG_dco_10214;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) / NAG_dco_10214);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10580 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 / NAG_dco_10214;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] const NAG_dco_9780& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return static_cast<NAG_dco_9780>(-(NAG_dco_10213 / NAG_dco_10214) / NAG_dco_10214);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10581 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return sin(arg);
    } else {
      return std::sin(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::cos;
    return static_cast<NAG_dco_9780>(cos(arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("sin") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(std::string("cos(arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10584 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return cos(arg);
    } else {
      return std::cos(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::sin;
    return static_cast<NAG_dco_9780>(-sin(arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("cos") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(std::string("-sin(arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10585 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return tan(arg);
    } else {
      return std::tan(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::tan;
    return static_cast<NAG_dco_9780>((static_cast<NAG_dco_9780>(1.0) + (tan(arg) * tan(arg))));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("tan") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 =
        helper::NAG_dco_9846(std::string("(static_cast<DCO_TAPE_REAL>(1.0) + (tan(arg)*tan(arg)))"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10586 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return cosh(arg);
    } else {
      return std::cosh(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::sinh;
    return static_cast<NAG_dco_9780>(sinh(arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("cosh") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(std::string("sinh(arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10587 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return sinh(arg);
    } else {
      return std::sinh(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::cosh;
    return static_cast<NAG_dco_9780>(cosh(arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("sinh") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(std::string("cosh(arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10588 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return tanh(arg);
    } else {
      return std::tanh(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::tanh;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) - tanh(arg) * tanh(arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("tanh") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 =
        helper::NAG_dco_9846(std::string("static_cast<DCO_TAPE_REAL>(1.0) - tanh(arg)*tanh(arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10589 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return asin(arg);
    } else {
      return std::asin(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::sqrt;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) / sqrt(static_cast<NAG_dco_9780>(1.0) - arg * arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("asin") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / sqrt(static_cast<DCO_TAPE_REAL>(1.0) - arg*arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10590 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return acos(arg);
    } else {
      return std::acos(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::sqrt;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(-1.0) /
                                     sqrt(static_cast<NAG_dco_9780>(1.0) - arg * arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("acos") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(-1.0) / sqrt(static_cast<DCO_TAPE_REAL>(1.0) - arg*arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10591 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return atan(arg);
    } else {
      return std::atan(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::atan;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) / (static_cast<NAG_dco_9780>(1.0) + arg * arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("atan") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (static_cast<DCO_TAPE_REAL>(1.0) + arg*arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10592 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return exp(arg);
    } else {
      return std::exp(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::exp;
    return static_cast<NAG_dco_9780>(exp(arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("exp") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(std::string("exp(arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10593 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return sqrt(arg);
    } else {
      return std::sqrt(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::sqrt;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) /
                                     (static_cast<NAG_dco_9780>(2.0) *
                                      sqrt(arg + ((dco::HAS_SQRT_AVOID_DIVZERO && arg == static_cast<NAG_dco_9780>(0.0))
                                                      ? static_cast<NAG_dco_9780>(DCO_SQRT_EPS)
                                                      : static_cast<NAG_dco_9780>(0.0)))));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("sqrt") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (static_cast<DCO_TAPE_REAL>(2.0) * sqrt(arg + "
                    "((dco::HAS_SQRT_AVOID_DIVZERO && arg==static_cast<DCO_TAPE_REAL>(0.0)) ? "
                    "static_cast<DCO_TAPE_REAL>(DCO_SQRT_EPS) : static_cast<DCO_TAPE_REAL>(0.0))))"),
        "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10594 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return log(arg);
    } else {
      return std::log(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::log;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) / arg);
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("log") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(std::string("static_cast<DCO_TAPE_REAL>(1.0) / arg"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10595 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return erf(arg);
    } else {
      return std::erf(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::exp;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(2.0) /
                                     sqrt(static_cast<NAG_dco_9780>(3.14159265358979323846264338327950288)) *
                                     exp(-arg * arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("erf") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(2.0) / "
                    "sqrt(static_cast<DCO_TAPE_REAL>(3.14159265358979323846264338327950288)) * exp(-arg * arg)"),
        "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10596 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return erfc(arg);
    } else {
      return std::erfc(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::exp;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(-2.0) /
                                     sqrt(static_cast<NAG_dco_9780>(3.14159265358979323846264338327950288)) *
                                     exp(-arg * arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("erfc") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(-2.0) / "
                    "sqrt(static_cast<DCO_TAPE_REAL>(3.14159265358979323846264338327950288)) * exp(-arg * arg)"),
        "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10597 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return asinh(arg);
    } else {
      return std::asinh(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::sqrt;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.) / sqrt(static_cast<NAG_dco_9780>(1.) + (arg * arg)));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("asinh") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.) / sqrt(static_cast<DCO_TAPE_REAL>(1.) + (arg*arg))"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10598 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return acosh(arg);
    } else {
      return std::acosh(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::sqrt;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.) / sqrt((arg * arg) - static_cast<NAG_dco_9780>(1.)));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("acosh") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.) / sqrt((arg*arg) - static_cast<DCO_TAPE_REAL>(1.))"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10599 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return atanh(arg);
    } else {
      return std::atanh(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::atanh;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.) / (static_cast<NAG_dco_9780>(1.) - (arg * arg)));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("atanh") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.) / (static_cast<DCO_TAPE_REAL>(1.) - (arg*arg))"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10600 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return expm1(arg);
    } else {
      return std::expm1(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::exp;
    return static_cast<NAG_dco_9780>(exp(arg));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("expm1") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(std::string("exp(arg)"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10601 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return log1p(arg);
    } else {
      return std::log1p(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::log1p;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) / (arg + static_cast<NAG_dco_9780>(1.0)));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("log1p") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (arg + static_cast<DCO_TAPE_REAL>(1.0))"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10602 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return log2(arg);
    } else {
      return std::log2(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::log2;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) / (arg * static_cast<NAG_dco_9780>(log(2))));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("log2") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (arg*static_cast<DCO_TAPE_REAL>(log(2)))"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10603 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return log10(arg);
    } else {
      return std::log10(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::log10;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) / (arg * static_cast<NAG_dco_9780>(log(10))));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("log10") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (arg*static_cast<DCO_TAPE_REAL>(log(10)))"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10604 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return cbrt(arg);
    } else {
      return std::cbrt(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::cbrt;
    return static_cast<NAG_dco_9780>(static_cast<NAG_dco_9780>(1.0) /
                                     (static_cast<NAG_dco_9780>(3.0) * cbrt(arg) * cbrt(arg)));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("cbrt") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 = helper::NAG_dco_9846(
        std::string("static_cast<DCO_TAPE_REAL>(1.0) / (static_cast<DCO_TAPE_REAL>(3.0)*cbrt(arg)*cbrt(arg))"), "arg",
        v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10605 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& arg) {
    if constexpr (is_dco_type_v<NAG_dco_9791>) {
      return exp2(arg);
    } else {
      return std::exp2(arg);
    }
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value, const NAG_dco_9791& arg) {
    using std::exp2;
    return static_cast<NAG_dco_9780>(exp2(arg) * log(static_cast<NAG_dco_9780>(2.0)));
  }
  static std::string NAG_dco_10582(std::string v) { return std::string("exp2") + "(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    std::string NAG_dco_9849 =
        helper::NAG_dco_9846(std::string("exp2(arg)*log(static_cast<DCO_TAPE_REAL>(2.0))"), "arg", v);
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_TAPE_REAL", "T");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "static_cast<T>", "");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "dco::HAS_SQRT_AVOID_DIVZERO", "false");
    NAG_dco_9849 = helper::NAG_dco_9846(NAG_dco_9849, "DCO_SQRT_EPS", "0.0");
    return NAG_dco_9849;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10606 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& NAG_dco_10213) {
    return -NAG_dco_10213;
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208(const NAG_dco_9780&, const NAG_dco_9791&) {
    return static_cast<NAG_dco_9780>(-1.0);
  }
  static std::string NAG_dco_10582(std::string v) { return "-" + v; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string, NAG_dco_9791 const&) { return "-1.0"; }
};
template <class NAG_dco_9780> struct NAG_dco_10607 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& NAG_dco_10213) {
    return NAG_dco_10213;
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208(const NAG_dco_9780&, const NAG_dco_9791&) {
    return static_cast<NAG_dco_9780>(1.0);
  }
  static std::string NAG_dco_10582(std::string v) { return "+" + v; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string, NAG_dco_9791 const&) { return "1.0"; }
};
using ::fabs;
template <class NAG_dco_9780> struct NAG_dco_10608 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& NAG_dco_10213) {
    return static_cast<NAG_dco_9780>(fabs(NAG_dco_10213));
  }
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_9909(const NAG_dco_9791& NAG_dco_10213) {
    bool NAG_dco_10609 = NAG_dco_10136([](const auto& NAG_dco_10071) { return dco::value(NAG_dco_10071) >= 0.0; },
                                       "fabs", NAG_dco_10213);
    return NAG_dco_10609 ? dco::value(NAG_dco_10213) : dco::value(-NAG_dco_10213);
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208(const NAG_dco_9780&, const NAG_dco_9791& NAG_dco_10213) {
    if (NAG_dco_10213 < 0)
      return static_cast<NAG_dco_9780>(-1.0);
    else
      return static_cast<NAG_dco_9780>(1.0);
  }
  static std::string NAG_dco_10582(std::string v) { return "std::abs(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    return "(" + v + " < 0 ? -1.0 : 1.0)";
  }
};
using std::abs;
template <class NAG_dco_9780> struct NAG_dco_10610 {
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_9791& NAG_dco_10213) {
    return abs(NAG_dco_10213);
  }
  template <class NAG_dco_9791> static inline const NAG_dco_9780 NAG_dco_9909(const NAG_dco_9791& NAG_dco_10213) {
    bool NAG_dco_10609 =
        NAG_dco_10136([](const auto& NAG_dco_10071) { return dco::value(NAG_dco_10071) >= 0.0; }, "abs", NAG_dco_10213);
    return NAG_dco_10609 ? dco::value(NAG_dco_10213) : dco::value(-NAG_dco_10213);
  }
  template <class NAG_dco_9791>
  static inline const NAG_dco_9780 NAG_dco_10208([[maybe_unused]] const NAG_dco_9780& _value,
                                                 const NAG_dco_9791& NAG_dco_10213) {
    if (NAG_dco_10213 < 0)
      return static_cast<NAG_dco_9780>(-1.0);
    else
      return static_cast<NAG_dco_9780>(1.0);
  }
  static std::string NAG_dco_10582(std::string v) { return "std::abs(" + v + ")"; }
  template <typename NAG_dco_9791> static std::string NAG_dco_10583(std::string v, NAG_dco_9791 const&) {
    return "(" + v + " < 0 ? -1.0 : 1.0)";
  }
};
using std::atan2;
template <class NAG_dco_9780> struct NAG_dco_10611 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206([[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return atan2(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10214 / (NAG_dco_10214 * NAG_dco_10214 + NAG_dco_10213 * NAG_dco_10213);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return -NAG_dco_10213 / (NAG_dco_10214 * NAG_dco_10214 + NAG_dco_10213 * NAG_dco_10213);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10612 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206([[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return atan2(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10214 / (NAG_dco_10214 * NAG_dco_10214 + NAG_dco_10213 * NAG_dco_10213);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10613 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206([[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return atan2(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return -NAG_dco_10213 / (NAG_dco_10214 * NAG_dco_10214 + NAG_dco_10213 * NAG_dco_10213);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10614 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::pow;
    return pow(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::pow;
    return dco::vmask(NAG_dco_10214 != 0,
                      NAG_dco_10214 * pow(NAG_dco_10213, NAG_dco_10214 - static_cast<NAG_dco_10180>(1.0)));
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216(NAG_dco_9780 const& _value, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180&) {
    using std::log;
    using std::pow;
    return log(NAG_dco_10213) * _value;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10615 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::pow;
    return pow(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::pow;
    return dco::vmask(NAG_dco_10214 != 0,
                      NAG_dco_10214 * pow(NAG_dco_10213, NAG_dco_10214 - static_cast<NAG_dco_10180>(1.0)));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10616 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::pow;
    return pow(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216(NAG_dco_9780 const& _value, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180&) {
    using std::log;
    return log(NAG_dco_10213) * _value;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10617 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::ldexp;
    return ldexp(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215(NAG_dco_9780 const&, const NAG_dco_10569&,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::pow;
    return pow(static_cast<typename dco::mode<NAG_dco_9780>::passive_t>(2.0),
               static_cast<typename dco::mode<NAG_dco_9780>::passive_t>(NAG_dco_10214));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10618 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::frexp;
    return frexp(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180&) {
    using std::pow;
    int NAG_dco_10055;
    frexp(NAG_dco_10213, &NAG_dco_10055);
    return static_cast<NAG_dco_9780>(pow(static_cast<typename dco::mode<NAG_dco_9780>::passive_t>(2.0),
                                         static_cast<typename dco::mode<NAG_dco_9780>::passive_t>(-NAG_dco_10055)));
  }
};
template <class NAG_dco_9780> struct NAG_dco_10619 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::scalbn;
    return scalbn(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215(NAG_dco_9780 const&, const NAG_dco_10569&,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::scalbn;
    return scalbn(static_cast<NAG_dco_9780>(1.0), NAG_dco_10214);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10620 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::scalbln;
    return scalbln(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215(NAG_dco_9780 const&, const NAG_dco_10569&,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::scalbln;
    return scalbln(static_cast<NAG_dco_9780>(1.0), NAG_dco_10214);
  }
};
template <typename NAG_dco_9812, std::size_t NAG_dco_9813, typename NAG_dco_9908> struct NAG_dco_10621 {
  template <class NAG_dco_9791>
  static inline const vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813>
  NAG_dco_10208(const vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813>& _value, const NAG_dco_9791& NAG_dco_9778) {
    vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813> NAG_dco_9849;
    for (std::size_t NAG_dco_9862 = 0; NAG_dco_9862 < NAG_dco_9813; ++NAG_dco_9862) {
      NAG_dco_9849[NAG_dco_9862] = NAG_dco_9908::NAG_dco_10208(_value[NAG_dco_9862], NAG_dco_9778[NAG_dco_9862]);
    }
    return NAG_dco_9849;
  }
};
template <typename NAG_dco_9812, std::size_t NAG_dco_9813>
struct NAG_dco_10610<vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813>>
    : public NAG_dco_10621<NAG_dco_9812, NAG_dco_9813, NAG_dco_10610<NAG_dco_9812>> {
  template <class NAG_dco_9791>
  static inline const vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813> NAG_dco_10206(const NAG_dco_9791& NAG_dco_10213) {
    return abs(NAG_dco_10213);
  }
};
template <typename NAG_dco_9812, std::size_t NAG_dco_9813>
struct NAG_dco_10608<vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813>>
    : public NAG_dco_10621<NAG_dco_9812, NAG_dco_9813, NAG_dco_10608<NAG_dco_9812>> {
  template <class NAG_dco_9791>
  static inline const vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813> NAG_dco_10206(const NAG_dco_9791& NAG_dco_10213) {
    return fabs(NAG_dco_10213);
  }
};
template <typename NAG_dco_9812, std::size_t NAG_dco_9813>
struct NAG_dco_10593<vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813>>
    : public NAG_dco_10621<NAG_dco_9812, NAG_dco_9813, NAG_dco_10593<NAG_dco_9812>> {
  template <class NAG_dco_9791>
  static inline const vector_ns::vector_t<NAG_dco_9812, NAG_dco_9813> NAG_dco_10206(const NAG_dco_9791& arg) {
    return sqrt(arg);
  }
};
using std::hypot;
template <class NAG_dco_9780> struct NAG_dco_10622 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206([[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return hypot(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 / _value;
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10214 / _value;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10623 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206([[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return hypot(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10213 / _value;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10624 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206([[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return hypot(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216([[maybe_unused]] NAG_dco_9780 const& _value,
                                                 [[maybe_unused]] const NAG_dco_10569& NAG_dco_10213,
                                                 [[maybe_unused]] const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10214 / _value;
  }
};
template <class NAG_dco_9780> struct NAG_dco_10625 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::max;
    return max(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_9909(const NAG_dco_10569& NAG_dco_10213,
                                                const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return std::max(NAG_dco_10071, NAG_dco_10107); },
        "max()", NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return dco::passive_value(NAG_dco_10213) < dco::passive_value(NAG_dco_10214) ? static_cast<NAG_dco_9780>(0.0)
                                                                                 : static_cast<NAG_dco_9780>(1.0);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return dco::passive_value(NAG_dco_10213) < dco::passive_value(NAG_dco_10214) ? static_cast<NAG_dco_9780>(1.0)
                                                                                 : static_cast<NAG_dco_9780>(0.0);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10626 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::max;
    return max(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_9909(const NAG_dco_10569& NAG_dco_10213,
                                                const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return std::max(NAG_dco_10071, NAG_dco_10107); },
        "max()", NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return dco::passive_value(NAG_dco_10213) < dco::passive_value(NAG_dco_10214) ? static_cast<NAG_dco_9780>(0.0)
                                                                                 : static_cast<NAG_dco_9780>(1.0);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10627 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::max;
    return max(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_9909(const NAG_dco_10569& NAG_dco_10213,
                                                const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return std::max(NAG_dco_10071, NAG_dco_10107); },
        "max()", NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return dco::passive_value(NAG_dco_10213) < dco::passive_value(NAG_dco_10214) ? static_cast<NAG_dco_9780>(1.0)
                                                                                 : static_cast<NAG_dco_9780>(0.0);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10628 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::min;
    return min(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_9909(const NAG_dco_10569& NAG_dco_10213,
                                                const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return std::min(NAG_dco_10071, NAG_dco_10107); },
        "min()", NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return dco::passive_value(NAG_dco_10214) < dco::passive_value(NAG_dco_10213) ? static_cast<NAG_dco_9780>(0.0)
                                                                                 : static_cast<NAG_dco_9780>(1.0);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return dco::passive_value(NAG_dco_10214) < dco::passive_value(NAG_dco_10213) ? static_cast<NAG_dco_9780>(1.0)
                                                                                 : static_cast<NAG_dco_9780>(0.0);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10629 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::min;
    return min(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_9909(const NAG_dco_10569& NAG_dco_10213,
                                                const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return std::min(NAG_dco_10071, NAG_dco_10107); },
        "min()", NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10215(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return dco::passive_value(NAG_dco_10214) < dco::passive_value(NAG_dco_10213) ? static_cast<NAG_dco_9780>(0.0)
                                                                                 : static_cast<NAG_dco_9780>(1.0);
  }
};
template <class NAG_dco_9780> struct NAG_dco_10630 {
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10206(const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    using std::min;
    return min(NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_9909(const NAG_dco_10569& NAG_dco_10213,
                                                const NAG_dco_10180& NAG_dco_10214) {
    return NAG_dco_10136(
        [](const auto& NAG_dco_10071, const auto& NAG_dco_10107) { return std::min(NAG_dco_10071, NAG_dco_10107); },
        "min()", NAG_dco_10213, NAG_dco_10214);
  }
  template <class NAG_dco_10569, class NAG_dco_10180>
  static inline const NAG_dco_9780 NAG_dco_10216(NAG_dco_9780 const&, const NAG_dco_10569& NAG_dco_10213,
                                                 const NAG_dco_10180& NAG_dco_10214) {
    return dco::passive_value(NAG_dco_10214) < dco::passive_value(NAG_dco_10213) ? static_cast<NAG_dco_9780>(1.0)
                                                                                 : static_cast<NAG_dco_9780>(0.0);
  }
};
} // namespace NAG_dco_10567
} // namespace dco
namespace dco {
namespace internal {
template <typename NAG_dco_9791>
std::enable_if_t<dco::mode<NAG_dco_9791>::is_dco_type, bool> operator!(NAG_dco_9791 const& NAG_dco_9778) {
  return !dco::passive_value(NAG_dco_9778);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>
operator-(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10606<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>
operator+(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10607<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>
sin(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>
sin(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>
sin(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>
sin(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>
sin(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10581<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>
cos(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>
cos(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>
cos(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>
cos(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>
cos(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10584<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>
tan(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>
tan(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>
tan(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>
tan(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>
tan(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10585<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>
cosh(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>
cosh(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>
cosh(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>
cosh(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>
cosh(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10586<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>
sinh(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>
sinh(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>
sinh(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>
sinh(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>
sinh(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10587<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>
asin(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>
asin(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>
asin(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>
asin(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>
asin(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10589<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>
acos(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>
acos(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>
acos(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>
acos(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>
acos(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10590<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>
exp(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>
exp(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>
exp(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>
exp(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>
exp(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10592<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>
atan(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>
atan(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>
atan(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>
atan(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>
atan(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10591<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>
tanh(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>
tanh(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>
tanh(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>
tanh(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>
tanh(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10588<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>
sqrt(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>
sqrt(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>
sqrt(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>
sqrt(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>
sqrt(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10593<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>
log(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>
log(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>
log(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>
log(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>
log(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10594<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>
erf(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>
erf(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>
erf(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>
erf(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>
erf(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10595<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>
erfc(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>
erfc(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>
erfc(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>
erfc(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>
erfc(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10596<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>
expm1(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>
expm1(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>
expm1(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>
expm1(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>
expm1(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10600<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>
asinh(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>
asinh(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>
asinh(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>
asinh(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>
asinh(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10597<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>
acosh(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>
acosh(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>
acosh(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>
acosh(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>
acosh(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10598<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>
atanh(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>
atanh(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>
atanh(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>
atanh(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>
atanh(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10599<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>
log1p(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>
log1p(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>
log1p(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>
log1p(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>
log1p(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10601<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>
log2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>
log2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>
log2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>
log2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>
log2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10602<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>
log10(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>
log10(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>
log10(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>
log10(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>
log10(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10603<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>
cbrt(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>
cbrt(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>
cbrt(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>
cbrt(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>
cbrt(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10604<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>
exp2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>
exp2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>
exp2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>
exp2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>
exp2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10605<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>
fabs(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>
fabs(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>
fabs(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>
fabs(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>
fabs(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10608<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>
abs(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>
abs(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>
abs(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>
abs(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9785<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>
abs(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10610<NAG_dco_9780>>(NAG_dco_10116);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10568<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>
operator+(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>>
operator+(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>
operator+(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>>
operator+(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>
operator+(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>>
operator+(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>
operator+(
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>>
operator+(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>>
operator+(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>
operator+(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>>
operator+(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>>
operator+(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>
operator+(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>>
operator+(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>
operator+(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>>
operator+(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10573<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>
operator+(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>>
operator+(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10574<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10568<typename dco::mode<NAG_dco_9918>::active_value_t>>>
operator+(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10568<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10568<typename dco::mode<NAG_dco_9791>::active_value_t>>>
operator+(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10568<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10570<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>
operator-(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>>
operator-(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>
operator-(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>>
operator-(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>
operator-(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>>
operator-(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>
operator-(
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>>
operator-(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>>
operator-(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>
operator-(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>>
operator-(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>>
operator-(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>
operator-(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>>
operator-(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>
operator-(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>>
operator-(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10575<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>
operator-(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>>
operator-(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10576<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10570<typename dco::mode<NAG_dco_9918>::active_value_t>>>
operator-(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10570<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10570<typename dco::mode<NAG_dco_9791>::active_value_t>>>
operator-(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10570<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10571<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>
operator*(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>>
operator*(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>
operator*(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>>
operator*(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>
operator*(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>>
operator*(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>
operator*(
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>>
operator*(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>>
operator*(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>
operator*(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>>
operator*(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>>
operator*(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>
operator*(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>>
operator*(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>
operator*(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>>
operator*(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10577<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>
operator*(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>>
operator*(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10578<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10571<typename dco::mode<NAG_dco_9918>::active_value_t>>>
operator*(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10571<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10571<typename dco::mode<NAG_dco_9791>::active_value_t>>>
operator*(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10571<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10572<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>
operator/(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>>
operator/(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>
operator/(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>>
operator/(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>
operator/(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>>
operator/(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>
operator/(
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>>
operator/(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>>
operator/(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>
operator/(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>>
operator/(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>>
operator/(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>
operator/(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>>
operator/(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>
operator/(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>>
operator/(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10579<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>
operator/(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                     NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>>
operator/(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10580<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10572<typename dco::mode<NAG_dco_9918>::active_value_t>>>
operator/(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10572<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10572<typename dco::mode<NAG_dco_9791>::active_value_t>>>
operator/(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10572<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10611<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>
atan2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>>
atan2(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>
atan2(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>>
atan2(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>
atan2(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>>
atan2(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
          NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>
atan2(const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>>
atan2(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
          NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>>
atan2(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>
atan2(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>>
atan2(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>>
atan2(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>
atan2(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>>
atan2(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>
atan2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>>
atan2(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10612<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>
atan2(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>>
atan2(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10613<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10611<typename dco::mode<NAG_dco_9918>::active_value_t>>>
atan2(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10611<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10611<typename dco::mode<NAG_dco_9791>::active_value_t>>>
atan2(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10611<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10614<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>
pow(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>>
pow(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>
pow(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>>
pow(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>>
pow(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>
pow(const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>>
pow(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>>
pow(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>
pow(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>>
pow(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>>
pow(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>
pow(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>>
pow(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>
pow(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>>
pow(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10615<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>
pow(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>>
pow(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10616<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10614<typename dco::mode<NAG_dco_9918>::active_value_t>>>
pow(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10614<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10614<typename dco::mode<NAG_dco_9791>::active_value_t>>>
pow(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10614<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10622<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>
hypot(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>>
hypot(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
      const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>
hypot(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>>
hypot(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>
hypot(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>>
hypot(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
          NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>
hypot(const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>>
hypot(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
          NAG_dco_10116,
      const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>>
hypot(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>
hypot(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>>
hypot(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10116,
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>>
hypot(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>
hypot(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>>
hypot(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10116,
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>
hypot(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>>
hypot(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10623<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>
hypot(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
          NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>>
hypot(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                           NAG_dco_10151>>::passive_t& NAG_dco_10116,
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10624<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10622<typename dco::mode<NAG_dco_9918>::active_value_t>>>
hypot(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10622<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10622<typename dco::mode<NAG_dco_9791>::active_value_t>>>
hypot(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10622<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
std::enable_if_t<dco::mode<NAG_dco_10569>::is_dco_type || dco::mode<NAG_dco_10180>::is_dco_type, NAG_dco_10569>
copysign(const NAG_dco_10569& NAG_dco_9778, const NAG_dco_10180&) {
  static_assert(sizeof(NAG_dco_10569) == 0, "Copysign currently not implemented. Please contact support@nag.co.uk");
  return NAG_dco_9778;
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, int,
                            dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>
ldexp(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116, int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, int,
                                     dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>, int,
                            dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>
ldexp(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116, int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>, int,
                                     dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
                            dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>
ldexp(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
      dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
                            dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>
ldexp(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
      dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
                            dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>
ldexp(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
      dco::NAG_dco_10567::NAG_dco_10617<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, int*,
                            dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>
frexp(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116, int* NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, int*,
                                     dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>, int*,
                            dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>
frexp(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
      int* NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>, int*,
                                     dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            int*, dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>
frexp(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      int* NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int*,
      dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            int*, dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>
frexp(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      int* NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int*,
      dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            int*, dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>
frexp(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
      int* NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int*,
      dco::NAG_dco_10567::NAG_dco_10618<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, int,
                            dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>
scalbn(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116, int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, int,
                                     dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>, int,
                            dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>
scalbn(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
       int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>, int,
                                     dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
                            dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>
scalbn(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
       int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
      dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
                            dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>
scalbn(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
       int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
      dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
                            dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>
scalbn(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
       int NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, int,
      dco::NAG_dco_10567::NAG_dco_10619<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, long,
                            dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>
scalbln(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116, long NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, long,
                                     dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>, long,
                            dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>
scalbln(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
        long NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>, long,
                                     dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            long, dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>
scalbln(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
        long NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, long,
      dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            long, dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>
scalbln(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
        long NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, long,
      dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            long, dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>
scalbln(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
        long NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>, long,
      dco::NAG_dco_10567::NAG_dco_10620<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto operator==(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
                              const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator==(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator==(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator==(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator==(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator==(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator==(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10118(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator==(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10119(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator==(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
               NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator==(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
               NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator==(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator==(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator==(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator==(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator==(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator==(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator==(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator==(const NAG_dco_9791& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator==(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator==(const NAG_dco_9791& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator==(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator==(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator==(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator==(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator==(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10118(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator==(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10119(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    bool>
operator==(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9918>::active_t::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    bool>
operator==(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9791>::active_t::data_t::NAG_dco_10162::NAG_dco_10115(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto operator!=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
                              const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator!=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator!=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator!=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator!=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator!=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator!=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10121(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator!=(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10122(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator!=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
               NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator!=(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
               NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator!=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator!=(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator!=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator!=(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator!=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator!=(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator!=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator!=(const NAG_dco_9791& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator!=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator!=(const NAG_dco_9791& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator!=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator!=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator!=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator!=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator!=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10121(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator!=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10122(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    bool>
operator!=(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9918>::active_t::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    bool>
operator!=(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9791>::active_t::data_t::NAG_dco_10162::NAG_dco_10120(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto operator<(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
                             const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator<(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator<(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator<(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator<(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator<(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10124(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator<(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10125(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator<(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator<(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10124(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10125(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    bool>
operator<(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9918>::active_t::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    bool>
operator<(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9791>::active_t::data_t::NAG_dco_10162::NAG_dco_10123(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto operator<=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
                              const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator<=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator<=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator<=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator<=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator<=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator<=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10127(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator<=(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10128(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator<=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
               NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator<=(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
               NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<=(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<=(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator<=(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<=(const NAG_dco_9791& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<=(const NAG_dco_9791& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator<=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator<=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator<=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10127(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator<=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10128(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    bool>
operator<=(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9918>::active_t::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    bool>
operator<=(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9791>::active_t::data_t::NAG_dco_10162::NAG_dco_10126(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto operator>(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
                             const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator>(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator>(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator>(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator>(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator>(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10130(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator>(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10131(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator>(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator>(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
              NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                               NAG_dco_10151>>::passive_t& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
          const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10130(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>(const NAG_dco_9791& NAG_dco_10116,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10131(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    bool>
operator>(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9918>::active_t::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    bool>
operator>(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9791>::active_t::data_t::NAG_dco_10162::NAG_dco_10129(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto operator>=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
                              const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator>=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator>=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator>=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
static inline auto
operator>=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
static inline auto
operator>=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator>=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10133(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline auto
operator>=(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117)
    -> decltype(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10134(
        NAG_dco_10116, NAG_dco_10117)) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator>=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
               NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline auto
operator>=(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
               NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>=(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>=(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline auto
operator>=(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                                NAG_dco_10151>>::passive_t& NAG_dco_10116,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117)
    -> decltype(dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                            NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116,
                                                                                                 NAG_dco_10117)) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>=(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>=(const NAG_dco_9791& NAG_dco_10116,
           const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116,
                                                                                                       NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>=(const NAG_dco_9791& NAG_dco_10116,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>=(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator>=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>=(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator>=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type
operator>=(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
           const NAG_dco_9791& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10133(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, typename NAG_dco_9791>
static inline typename dco::dco_type_constructable_from<NAG_dco_9791, bool>::type operator>=(
    const NAG_dco_9791& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                     NAG_dco_10151>::data_t::NAG_dco_10162::NAG_dco_10134(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    bool>
operator>=(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9918>::active_t::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
static inline std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    bool>
operator>=(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::mode<NAG_dco_9791>::active_t::data_t::NAG_dco_10162::NAG_dco_10132(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline void NAG_dco_10636(dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  double NAG_dco_10055 = 0;
  get(NAG_dco_9778, NAG_dco_10055);
  NAG_dco_9778 = NAG_dco_10055;
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline std::istream& operator>>(std::istream& in,
                                       dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  NAG_dco_9780& NAG_dco_10055 = NAG_dco_9778._value();
  in >> NAG_dco_10055;
  return in;
}
template <class NAG_dco_9780, class NAG_dco_10147>
static inline std::ostream& operator<<(std::ostream& out,
                                       const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  out << NAG_dco_9778._value();
  return out;
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline std::ostream&
operator<<(std::ostream& out,
           const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  out << NAG_dco_9778._value();
  return out;
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline std::ostream&
operator<<(std::ostream& out,
           const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  out << NAG_dco_9778._value();
  return out;
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
static inline std::ostream&
operator<<(std::ostream& out,
           const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  out << NAG_dco_9778._value();
  return out;
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
static inline std::ostream&
operator<<(std::ostream& out,
           const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  out << NAG_dco_9778._value();
  return out;
}
using std::floor;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto floor(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return floor(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return floor(dco::passive_value(NAG_dco_9778)); }, "floor",
                         NAG_dco_9778);
  }
}
using std::floor;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
floor(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return floor(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return floor(dco::passive_value(NAG_dco_9778)); }, "floor",
                         NAG_dco_9778);
  }
}
using std::floor;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
floor(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return floor(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return floor(dco::passive_value(NAG_dco_9778)); }, "floor",
                         NAG_dco_9778);
  }
}
using std::floor;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
floor(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return floor(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return floor(dco::passive_value(NAG_dco_9778)); }, "floor",
                         NAG_dco_9778);
  }
}
using std::floor;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
floor(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return floor(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return floor(dco::passive_value(NAG_dco_9778)); }, "floor",
                         NAG_dco_9778);
  }
}
using std::ceil;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto ceil(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return ceil(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return ceil(dco::passive_value(NAG_dco_9778)); }, "ceil",
                         NAG_dco_9778);
  }
}
using std::ceil;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
ceil(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return ceil(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return ceil(dco::passive_value(NAG_dco_9778)); }, "ceil",
                         NAG_dco_9778);
  }
}
using std::ceil;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
ceil(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return ceil(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return ceil(dco::passive_value(NAG_dco_9778)); }, "ceil",
                         NAG_dco_9778);
  }
}
using std::ceil;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
ceil(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return ceil(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return ceil(dco::passive_value(NAG_dco_9778)); }, "ceil",
                         NAG_dco_9778);
  }
}
using std::ceil;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
ceil(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return ceil(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return ceil(dco::passive_value(NAG_dco_9778)); }, "ceil",
                         NAG_dco_9778);
  }
}
using std::trunc;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto trunc(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return trunc(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return trunc(dco::passive_value(NAG_dco_9778)); }, "trunc",
                         NAG_dco_9778);
  }
}
using std::trunc;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
trunc(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return trunc(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return trunc(dco::passive_value(NAG_dco_9778)); }, "trunc",
                         NAG_dco_9778);
  }
}
using std::trunc;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
trunc(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return trunc(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return trunc(dco::passive_value(NAG_dco_9778)); }, "trunc",
                         NAG_dco_9778);
  }
}
using std::trunc;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
trunc(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return trunc(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return trunc(dco::passive_value(NAG_dco_9778)); }, "trunc",
                         NAG_dco_9778);
  }
}
using std::trunc;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
trunc(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return trunc(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return trunc(dco::passive_value(NAG_dco_9778)); }, "trunc",
                         NAG_dco_9778);
  }
}
using std::round;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto round(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return round(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return round(dco::passive_value(NAG_dco_9778)); }, "round",
                         NAG_dco_9778);
  }
}
using std::round;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
round(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return round(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return round(dco::passive_value(NAG_dco_9778)); }, "round",
                         NAG_dco_9778);
  }
}
using std::round;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
round(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return round(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return round(dco::passive_value(NAG_dco_9778)); }, "round",
                         NAG_dco_9778);
  }
}
using std::round;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
round(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return round(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return round(dco::passive_value(NAG_dco_9778)); }, "round",
                         NAG_dco_9778);
  }
}
using std::round;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
round(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return round(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return round(dco::passive_value(NAG_dco_9778)); }, "round",
                         NAG_dco_9778);
  }
}
using std::lround;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto lround(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lround(dco::passive_value(NAG_dco_9778)); }, "lround",
                         NAG_dco_9778);
  }
}
using std::lround;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
lround(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lround(dco::passive_value(NAG_dco_9778)); }, "lround",
                         NAG_dco_9778);
  }
}
using std::lround;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
lround(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lround(dco::passive_value(NAG_dco_9778)); }, "lround",
                         NAG_dco_9778);
  }
}
using std::lround;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
lround(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lround(dco::passive_value(NAG_dco_9778)); }, "lround",
                         NAG_dco_9778);
  }
}
using std::lround;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
lround(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lround(dco::passive_value(NAG_dco_9778)); }, "lround",
                         NAG_dco_9778);
  }
}
using std::llround;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto llround(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llround(dco::passive_value(NAG_dco_9778)); }, "llround",
                         NAG_dco_9778);
  }
}
using std::llround;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
llround(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llround(dco::passive_value(NAG_dco_9778)); }, "llround",
                         NAG_dco_9778);
  }
}
using std::llround;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
llround(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llround(dco::passive_value(NAG_dco_9778)); }, "llround",
                         NAG_dco_9778);
  }
}
using std::llround;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
llround(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llround(dco::passive_value(NAG_dco_9778)); }, "llround",
                         NAG_dco_9778);
  }
}
using std::llround;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
llround(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llround(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llround(dco::passive_value(NAG_dco_9778)); }, "llround",
                         NAG_dco_9778);
  }
}
using std::rint;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto rint(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return rint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return rint(dco::passive_value(NAG_dco_9778)); }, "rint",
                         NAG_dco_9778);
  }
}
using std::rint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
rint(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return rint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return rint(dco::passive_value(NAG_dco_9778)); }, "rint",
                         NAG_dco_9778);
  }
}
using std::rint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
rint(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return rint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return rint(dco::passive_value(NAG_dco_9778)); }, "rint",
                         NAG_dco_9778);
  }
}
using std::rint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
rint(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return rint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return rint(dco::passive_value(NAG_dco_9778)); }, "rint",
                         NAG_dco_9778);
  }
}
using std::rint;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
rint(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return rint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return rint(dco::passive_value(NAG_dco_9778)); }, "rint",
                         NAG_dco_9778);
  }
}
using std::lrint;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto lrint(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lrint(dco::passive_value(NAG_dco_9778)); }, "lrint",
                         NAG_dco_9778);
  }
}
using std::lrint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
lrint(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lrint(dco::passive_value(NAG_dco_9778)); }, "lrint",
                         NAG_dco_9778);
  }
}
using std::lrint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
lrint(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lrint(dco::passive_value(NAG_dco_9778)); }, "lrint",
                         NAG_dco_9778);
  }
}
using std::lrint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
lrint(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lrint(dco::passive_value(NAG_dco_9778)); }, "lrint",
                         NAG_dco_9778);
  }
}
using std::lrint;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
lrint(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return lrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return lrint(dco::passive_value(NAG_dco_9778)); }, "lrint",
                         NAG_dco_9778);
  }
}
using std::llrint;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto llrint(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llrint(dco::passive_value(NAG_dco_9778)); }, "llrint",
                         NAG_dco_9778);
  }
}
using std::llrint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
llrint(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llrint(dco::passive_value(NAG_dco_9778)); }, "llrint",
                         NAG_dco_9778);
  }
}
using std::llrint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
llrint(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llrint(dco::passive_value(NAG_dco_9778)); }, "llrint",
                         NAG_dco_9778);
  }
}
using std::llrint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
llrint(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llrint(dco::passive_value(NAG_dco_9778)); }, "llrint",
                         NAG_dco_9778);
  }
}
using std::llrint;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
llrint(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return llrint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return llrint(dco::passive_value(NAG_dco_9778)); }, "llrint",
                         NAG_dco_9778);
  }
}
using std::nearbyint;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto nearbyint(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return nearbyint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return nearbyint(dco::passive_value(NAG_dco_9778)); }, "nearbyint",
                         NAG_dco_9778);
  }
}
using std::nearbyint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
nearbyint(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return nearbyint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return nearbyint(dco::passive_value(NAG_dco_9778)); }, "nearbyint",
                         NAG_dco_9778);
  }
}
using std::nearbyint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
nearbyint(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return nearbyint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return nearbyint(dco::passive_value(NAG_dco_9778)); }, "nearbyint",
                         NAG_dco_9778);
  }
}
using std::nearbyint;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
nearbyint(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return nearbyint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return nearbyint(dco::passive_value(NAG_dco_9778)); }, "nearbyint",
                         NAG_dco_9778);
  }
}
using std::nearbyint;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
nearbyint(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return nearbyint(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return nearbyint(dco::passive_value(NAG_dco_9778)); }, "nearbyint",
                         NAG_dco_9778);
  }
}
using std::isnan;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto isnan(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnan(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnan(dco::passive_value(NAG_dco_9778)); }, "isnan",
                         NAG_dco_9778);
  }
}
using std::isnan;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isnan(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnan(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnan(dco::passive_value(NAG_dco_9778)); }, "isnan",
                         NAG_dco_9778);
  }
}
using std::isnan;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isnan(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnan(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnan(dco::passive_value(NAG_dco_9778)); }, "isnan",
                         NAG_dco_9778);
  }
}
using std::isnan;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isnan(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnan(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnan(dco::passive_value(NAG_dco_9778)); }, "isnan",
                         NAG_dco_9778);
  }
}
using std::isnan;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
isnan(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnan(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnan(dco::passive_value(NAG_dco_9778)); }, "isnan",
                         NAG_dco_9778);
  }
}
using std::isnormal;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto isnormal(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnormal(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnormal(dco::passive_value(NAG_dco_9778)); }, "isnormal",
                         NAG_dco_9778);
  }
}
using std::isnormal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isnormal(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnormal(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnormal(dco::passive_value(NAG_dco_9778)); }, "isnormal",
                         NAG_dco_9778);
  }
}
using std::isnormal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isnormal(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnormal(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnormal(dco::passive_value(NAG_dco_9778)); }, "isnormal",
                         NAG_dco_9778);
  }
}
using std::isnormal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isnormal(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnormal(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnormal(dco::passive_value(NAG_dco_9778)); }, "isnormal",
                         NAG_dco_9778);
  }
}
using std::isnormal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
isnormal(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isnormal(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isnormal(dco::passive_value(NAG_dco_9778)); }, "isnormal",
                         NAG_dco_9778);
  }
}
using std::isinf;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto isinf(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isinf(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isinf(dco::passive_value(NAG_dco_9778)); }, "isinf",
                         NAG_dco_9778);
  }
}
using std::isinf;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isinf(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isinf(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isinf(dco::passive_value(NAG_dco_9778)); }, "isinf",
                         NAG_dco_9778);
  }
}
using std::isinf;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isinf(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isinf(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isinf(dco::passive_value(NAG_dco_9778)); }, "isinf",
                         NAG_dco_9778);
  }
}
using std::isinf;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isinf(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isinf(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isinf(dco::passive_value(NAG_dco_9778)); }, "isinf",
                         NAG_dco_9778);
  }
}
using std::isinf;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
isinf(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isinf(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isinf(dco::passive_value(NAG_dco_9778)); }, "isinf",
                         NAG_dco_9778);
  }
}
using std::isfinite;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto isfinite(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isfinite(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isfinite(dco::passive_value(NAG_dco_9778)); }, "isfinite",
                         NAG_dco_9778);
  }
}
using std::isfinite;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isfinite(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isfinite(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isfinite(dco::passive_value(NAG_dco_9778)); }, "isfinite",
                         NAG_dco_9778);
  }
}
using std::isfinite;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isfinite(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isfinite(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isfinite(dco::passive_value(NAG_dco_9778)); }, "isfinite",
                         NAG_dco_9778);
  }
}
using std::isfinite;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
isfinite(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isfinite(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isfinite(dco::passive_value(NAG_dco_9778)); }, "isfinite",
                         NAG_dco_9778);
  }
}
using std::isfinite;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
isfinite(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return isfinite(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return isfinite(dco::passive_value(NAG_dco_9778)); }, "isfinite",
                         NAG_dco_9778);
  }
}
using std::fpclassify;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto fpclassify(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return fpclassify(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return fpclassify(dco::passive_value(NAG_dco_9778)); }, "fpclassify",
                         NAG_dco_9778);
  }
}
using std::fpclassify;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
fpclassify(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return fpclassify(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return fpclassify(dco::passive_value(NAG_dco_9778)); }, "fpclassify",
                         NAG_dco_9778);
  }
}
using std::fpclassify;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
fpclassify(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return fpclassify(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return fpclassify(dco::passive_value(NAG_dco_9778)); }, "fpclassify",
                         NAG_dco_9778);
  }
}
using std::fpclassify;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
fpclassify(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return fpclassify(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return fpclassify(dco::passive_value(NAG_dco_9778)); }, "fpclassify",
                         NAG_dco_9778);
  }
}
using std::fpclassify;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
fpclassify(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return fpclassify(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return fpclassify(dco::passive_value(NAG_dco_9778)); }, "fpclassify",
                         NAG_dco_9778);
  }
}
using std::signbit;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto signbit(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return signbit(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return signbit(dco::passive_value(NAG_dco_9778)); }, "signbit",
                         NAG_dco_9778);
  }
}
using std::signbit;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
signbit(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return signbit(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return signbit(dco::passive_value(NAG_dco_9778)); }, "signbit",
                         NAG_dco_9778);
  }
}
using std::signbit;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
signbit(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return signbit(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return signbit(dco::passive_value(NAG_dco_9778)); }, "signbit",
                         NAG_dco_9778);
  }
}
using std::signbit;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
constexpr static inline auto
signbit(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return signbit(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return signbit(dco::passive_value(NAG_dco_9778)); }, "signbit",
                         NAG_dco_9778);
  }
}
using std::signbit;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
constexpr static inline auto
signbit(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
  if constexpr (!NAG_dco_9906<decltype(NAG_dco_9778)>) {
    return signbit(dco::passive_value(NAG_dco_9778));
  } else {
    return NAG_dco_10136([](auto NAG_dco_9778) { return signbit(dco::passive_value(NAG_dco_9778)); }, "signbit",
                         NAG_dco_9778);
  }
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto isgreater(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
                                       const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isgreater(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
          const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto
isgreaterequal(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
               const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
isgreaterequal(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
               const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isgreaterequal(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
               const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
isgreaterequal(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
               const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isgreaterequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isgreaterequal(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isgreaterequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto isless(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
                                    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
       const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
       const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
       const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
       const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isless;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto
isless(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
       const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isless(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto islessequal(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
                                         const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
islessequal(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
islessequal(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
islessequal(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
islessequal(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
islessequal(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
islessequal(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
islessequal(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
islessequal(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
islessequal(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessequal;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessequal(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessequal(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto
islessgreater(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
              const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
islessgreater(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
              const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
islessgreater(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
              const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
islessgreater(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
              const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::islessgreater;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto islessgreater(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return islessgreater(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10147>
constexpr static inline auto isunordered(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
                                         const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
isunordered(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isunordered(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
constexpr static inline auto
isunordered(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isunordered(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isunordered(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isunordered(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isunordered(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
constexpr static inline auto
isunordered(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
constexpr static inline auto
isunordered(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
            const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
using std::isunordered;
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
constexpr static inline auto isunordered(
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_9779) {
  return isunordered(dco::passive_value(NAG_dco_9778), dco::passive_value(NAG_dco_9779));
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10625<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>
max(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>>
max(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>
max(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>>
max(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>>
max(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>
max(const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>>
max(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>>
max(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>
max(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>>
max(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>>
max(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>
max(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>>
max(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>
max(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>>
max(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10626<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>
max(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>>
max(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10627<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10625<typename dco::mode<NAG_dco_9918>::active_value_t>>>
max(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10625<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10625<typename dco::mode<NAG_dco_9791>::active_value_t>>>
max(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10625<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147, class NAG_dco_10633, class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10631, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<NAG_dco_9780,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                                     dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                                     dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151, class NAG_dco_10633, class NAG_dco_10634,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10635>
dco::internal::NAG_dco_9788<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10635>, dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10631,
          class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10631, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151, class NAG_dco_10633,
          class NAG_dco_10634, class NAG_dco_10632>
dco::internal::NAG_dco_9788<NAG_dco_9780,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
                            dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10633, NAG_dco_10634, NAG_dco_10632>,
      dco::NAG_dco_10567::NAG_dco_10628<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>
min(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                     typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                                     dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9789<NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                                typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
                                dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>>
min(const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10116,
    const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
      typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
dco::internal::NAG_dco_9790<NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                            dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>,
                            dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>
min(const typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10147>
std::enable_if_t<
    !std::is_same_v<typename dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>::VALUE_TYPE,
                    typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
        dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>>
min(const typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t& NAG_dco_10116,
    const dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>>::passive_t,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_10147>, dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(
      NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>>
min(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>
min(const typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE& NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780, typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10157, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<
        NAG_dco_9780,
        typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
        dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
        dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>>
min(const typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>>
min(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>
min(const typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9788<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>>
min(const typename dco::mode<dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>>
min(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>
min(const typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9789<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>>
min(const typename dco::mode<dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9789<
    NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>
min(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9789<
        NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
        dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>>
min(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10116,
    const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10117) {
  return dco::internal::NAG_dco_9789<
      NAG_dco_9780, dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::NAG_dco_10567::NAG_dco_10629<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
dco::internal::NAG_dco_9790<
    NAG_dco_9780,
    typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
    dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
    dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>
min(const typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE&
        NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
std::enable_if_t<
    !std::is_same_v<
        typename dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>::VALUE_TYPE,
        typename dco::mode<
            dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t>,
    dco::internal::NAG_dco_9790<NAG_dco_9780,
                                typename dco::mode<dco::internal::NAG_dco_9790<
                                    NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
                                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
                                dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>>
min(const typename dco::mode<dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150,
                                                         NAG_dco_10151>>::passive_t& NAG_dco_10116,
    const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_10117) {
  return dco::internal::NAG_dco_9790<
      NAG_dco_9780,
      typename dco::mode<
          dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::passive_t,
      dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>,
      dco::NAG_dco_10567::NAG_dco_10630<NAG_dco_9780>>(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9918>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9791>::value ||
      (dco::mode<NAG_dco_9791>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9791::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9791>::active_t, typename dco::mode<NAG_dco_9918>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9918>::active_value_t,
                                typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
                                dco::NAG_dco_10567::NAG_dco_10628<typename dco::mode<NAG_dco_9918>::active_value_t>>>
min(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9918>::active_value_t, typename dco::mode<NAG_dco_9918>::active_t, NAG_dco_9918,
      dco::NAG_dco_10567::NAG_dco_10628<typename dco::mode<NAG_dco_9918>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
template <typename NAG_dco_9791, typename NAG_dco_9918>
std::enable_if_t<
    (dco::mode<NAG_dco_9791>::order > 0 &&
     (dco::internal::is_gbcp_type<NAG_dco_9918>::value ||
      (dco::mode<NAG_dco_9918>::is_intermediate_type &&
       dco::internal::is_gbcp_type<typename NAG_dco_9918::data_t>::value)) &&
     std::is_same_v<typename dco::mode<NAG_dco_9918>::active_t, typename dco::mode<NAG_dco_9791>::active_t>),
    dco::internal::NAG_dco_9788<typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791,
                                typename dco::mode<NAG_dco_9791>::active_t,
                                dco::NAG_dco_10567::NAG_dco_10628<typename dco::mode<NAG_dco_9791>::active_value_t>>>
min(const NAG_dco_9791& NAG_dco_10116, const NAG_dco_9918& NAG_dco_10117) {
  return dco::internal::NAG_dco_9788<
      typename dco::mode<NAG_dco_9791>::active_value_t, NAG_dco_9791, typename dco::mode<NAG_dco_9791>::active_t,
      dco::NAG_dco_10567::NAG_dco_10628<typename dco::mode<NAG_dco_9791>::active_value_t>>(NAG_dco_10116,
                                                                                           NAG_dco_10117);
}
} // namespace internal
} // namespace dco

namespace dco {
namespace helper {
template <typename NAG_dco_9791> class complex_t {
private:
  NAG_dco_9791 NAG_dco_10637;
  NAG_dco_9791 NAG_dco_10638;

public:
  DCO_STRONG_INLINE complex_t(NAG_dco_9791 const& real = 0.0, NAG_dco_9791 const& imag = 0.0)
      : NAG_dco_10637(real), NAG_dco_10638(imag) {}
  template <typename NAG_dco_9918> complex_t(std::complex<NAG_dco_9918> const& NAG_dco_10639) {
    NAG_dco_10637 = NAG_dco_10639.real();
    NAG_dco_10638 = NAG_dco_10639.imag();
  }
  template <typename NAG_dco_9918> complex_t& operator=(NAG_dco_9918 const& NAG_dco_9963) {
    NAG_dco_10637 = NAG_dco_9963;
    NAG_dco_10638 = NAG_dco_9791();
    return *this;
  }
  template <typename NAG_dco_9918> complex_t& operator=(std::complex<NAG_dco_9918> const& NAG_dco_9963) {
    NAG_dco_10637 = NAG_dco_9963.real();
    NAG_dco_10638 = NAG_dco_9963.imag();
    return *this;
  }
  DCO_STRONG_INLINE NAG_dco_9791 real() const { return NAG_dco_10637; }
  DCO_STRONG_INLINE NAG_dco_9791 imag() const { return NAG_dco_10638; }
  DCO_STRONG_INLINE NAG_dco_9791& real() { return NAG_dco_10637; }
  DCO_STRONG_INLINE NAG_dco_9791& imag() { return NAG_dco_10638; }
  DCO_STRONG_INLINE void real(NAG_dco_9791 const& real) { NAG_dco_10637 = real; }
  DCO_STRONG_INLINE void imag(NAG_dco_9791 const& imag) { NAG_dco_10638 = imag; }
};
} // namespace helper
} // namespace dco
namespace std {
template <class NAG_dco_9780, typename NAG_dco_9959>
class complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
    : public dco::helper::complex_t<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> {
public:
  typedef dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> active_t;
  typedef dco::helper::complex_t<active_t> NAG_dco_10640;
  complex(active_t const& real = active_t(), active_t const& imag = active_t()) : NAG_dco_10640(real, imag) {}
  template <typename TYPE>
  complex(TYPE const& real, typename dco::dco_type_constructable_from<TYPE>::type* = 0) : NAG_dco_10640(real, TYPE()) {}
  template <typename TYPE>
  complex(TYPE const& real, std::enable_if_t<(dco::mode<TYPE>::is_dco_type &&
                                              dco::NAG_dco_9928<dco::mode<TYPE>, dco::mode<active_t>>::value) ||
                                                 std::is_same_v<TYPE, typename dco::mode<active_t>::passive_t>,
                                             void*> = NULL)
      : NAG_dco_10640(real, TYPE()) {}
  template <typename NAG_dco_9918> complex(complex<NAG_dco_9918> const& NAG_dco_10639) : NAG_dco_10640(NAG_dco_10639) {}
  complex& operator=(active_t const& NAG_dco_9963) {
    static_cast<NAG_dco_10640&>(*this) = NAG_dco_9963;
    return *this;
  }
  template <typename NAG_dco_9918> complex& operator=(complex<NAG_dco_9918> const& NAG_dco_9963) {
    static_cast<NAG_dco_10640&>(*this) = NAG_dco_9963;
    return *this;
  }
  template <typename TYPE>
  typename dco::dco_type_constructable_from<TYPE, complex>::type& operator=(const TYPE& NAG_dco_9963) {
    static_cast<NAG_dco_10640&>(*this) = NAG_dco_9963;
    return *this;
  }
  complex& operator=(typename dco::mode<active_t>::passive_t const& NAG_dco_9963) {
    static_cast<NAG_dco_10640&>(*this) = NAG_dco_9963;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE
  complex(const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778)
      : NAG_dco_10640(
            NAG_dco_9778,
            typename dco::mode<
                dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::active_t()) {}
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE complex& operator=(
      const dco::internal::NAG_dco_9788<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    static_cast<NAG_dco_10640&>(*this) = NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE
  complex(const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778)
      : NAG_dco_10640(
            NAG_dco_9778,
            typename dco::mode<
                dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::active_t()) {}
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE complex& operator=(
      const dco::internal::NAG_dco_9789<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    static_cast<NAG_dco_10640&>(*this) = NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE
  complex(const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778)
      : NAG_dco_10640(
            NAG_dco_9778,
            typename dco::mode<
                dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>>::active_t()) {}
  template <class NAG_dco_10149, class NAG_dco_10150, class NAG_dco_10151>
  DCO_ALWAYS_INLINE complex& operator=(
      const dco::internal::NAG_dco_9790<NAG_dco_9780, NAG_dco_10149, NAG_dco_10150, NAG_dco_10151>& NAG_dco_9778) {
    static_cast<NAG_dco_10640&>(*this) = NAG_dco_9778;
    return *this;
  }
  template <class NAG_dco_10157, class NAG_dco_10151>
  DCO_ALWAYS_INLINE complex(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778)
      : NAG_dco_10640(
            NAG_dco_9778,
            typename dco::mode<dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>>::active_t()) {}
  template <class NAG_dco_10157, class NAG_dco_10151>
  DCO_ALWAYS_INLINE complex&
  operator=(const dco::internal::NAG_dco_9785<NAG_dco_9780, NAG_dco_10157, NAG_dco_10151>& NAG_dco_9778) {
    static_cast<NAG_dco_10640&>(*this) = NAG_dco_9778;
    return *this;
  }
  DCO_STRONG_INLINE complex operator-() const { return complex(-this->real(), -this->imag()); }
};
template <typename NAG_dco_10569, typename NAG_dco_10180, bool NAG_dco_10641 = true> struct NAG_dco_10642 {
  typedef std::conditional_t<
      dco::mode<NAG_dco_10569>::is_dco_type && !dco::mode<NAG_dco_10569>::is_intermediate_type, NAG_dco_10569,
      std::conditional_t<dco::mode<NAG_dco_10180>::is_dco_type && !dco::mode<NAG_dco_10180>::is_intermediate_type,
                         NAG_dco_10180, void>>
      NAG_dco_10643;
  typedef std::conditional_t<std::is_same_v<NAG_dco_10643, NAG_dco_10569>, NAG_dco_10180, NAG_dco_10569> NAG_dco_10644;
  static constexpr bool NAG_dco_10645 =
      (NAG_dco_10641 || std::is_same_v<NAG_dco_10643, NAG_dco_10569>) && !std::is_same_v<NAG_dco_10643, void> &&
      (std::is_same_v<NAG_dco_10643, typename dco::mode<NAG_dco_10644>::active_t> ||
       (dco::mode<NAG_dco_10644>::is_dco_type &&
        dco::NAG_dco_9928<dco::mode<NAG_dco_10644>, dco::mode<NAG_dco_10643>>::value) ||
       std::is_same_v<NAG_dco_10644, typename dco::mode<NAG_dco_10643>::passive_t>);
};
template <typename NAG_dco_10569, typename NAG_dco_10180, bool NAG_dco_10497 = false> struct NAG_dco_10646 {};
template <typename NAG_dco_10569, typename NAG_dco_10180> struct NAG_dco_10646<NAG_dco_10569, NAG_dco_10180, true> {
  typedef typename NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10643 type;
  typedef complex<type> NAG_dco_10647;
};
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
cos(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
cosh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
exp(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
log(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
log10(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
sin(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
sinh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
sqrt(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
tan(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
tanh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
asin(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
asinh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
acos(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
acosh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
atan(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
atanh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
proj(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>
abs(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const&);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>
norm(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const&);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>
arg(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const&);
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
polar(dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const&,
      const dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>& = 0);
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10648(complex<NAG_dco_9791> const& NAG_dco_10116,
                                    complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = NAG_dco_10651 + NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116.real() + NAG_dco_10117.real());
    NAG_dco_10649.imag(NAG_dco_10116.imag() + NAG_dco_10117.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116.real() + NAG_dco_10117.real());
    NAG_dco_10649.imag(NAG_dco_10116.imag() + NAG_dco_10117.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10648(complex<NAG_dco_9791> const& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10650 = NAG_dco_10651 + NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116.real() + NAG_dco_10117);
    NAG_dco_10649.imag(NAG_dco_10116.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116.real() + NAG_dco_10117);
    NAG_dco_10649.imag(NAG_dco_10116.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10648(NAG_dco_9791 const& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    passive_t NAG_dco_10651(dco::passive_value(NAG_dco_10116));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = NAG_dco_10651 + NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116 + NAG_dco_10117.real());
    NAG_dco_10649.imag(NAG_dco_10117.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116 + NAG_dco_10117.real());
    NAG_dco_10649.imag(NAG_dco_10117.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10653(complex<NAG_dco_9791> const& NAG_dco_10116,
                                    complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = NAG_dco_10651 - NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116.real() - NAG_dco_10117.real());
    NAG_dco_10649.imag(NAG_dco_10116.imag() - NAG_dco_10117.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116.real() - NAG_dco_10117.real());
    NAG_dco_10649.imag(NAG_dco_10116.imag() - NAG_dco_10117.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10653(complex<NAG_dco_9791> const& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10650 = NAG_dco_10651 - NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116.real() - NAG_dco_10117);
    NAG_dco_10649.imag(NAG_dco_10116.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116.real() - NAG_dco_10117);
    NAG_dco_10649.imag(NAG_dco_10116.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10653(NAG_dco_9791 const& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    passive_t NAG_dco_10651(dco::passive_value(NAG_dco_10116));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = NAG_dco_10651 - NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116 - NAG_dco_10117.real());
    NAG_dco_10649.imag(-NAG_dco_10117.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116 - NAG_dco_10117.real());
    NAG_dco_10649.imag(-NAG_dco_10117.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10654(complex<NAG_dco_9791> const& NAG_dco_10116,
                                    complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = NAG_dco_10651 * NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116.real() * NAG_dco_10117.real() - NAG_dco_10116.imag() * NAG_dco_10117.imag());
    NAG_dco_10649.imag(NAG_dco_10116.real() * NAG_dco_10117.imag() + NAG_dco_10116.imag() * NAG_dco_10117.real());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116.real() * NAG_dco_10117.real() - NAG_dco_10116.imag() * NAG_dco_10117.imag());
    NAG_dco_10649.imag(NAG_dco_10116.real() * NAG_dco_10117.imag() + NAG_dco_10116.imag() * NAG_dco_10117.real());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10654(complex<NAG_dco_9791> const& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10650 = NAG_dco_10651 * NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116.real() * NAG_dco_10117);
    NAG_dco_10649.imag(NAG_dco_10116.imag() * NAG_dco_10117);
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116.real() * NAG_dco_10117);
    NAG_dco_10649.imag(NAG_dco_10116.imag() * NAG_dco_10117);
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10654(NAG_dco_9791 const& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    passive_t NAG_dco_10651(dco::passive_value(NAG_dco_10116));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = NAG_dco_10651 * NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10116 * NAG_dco_10117.real());
    NAG_dco_10649.imag(NAG_dco_10116 * NAG_dco_10117.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10116 * NAG_dco_10117.real());
    NAG_dco_10649.imag(NAG_dco_10116 * NAG_dco_10117.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10655(complex<NAG_dco_9791> const& NAG_dco_10116,
                                    complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10071 =
      NAG_dco_10116 * complex<NAG_dco_9791>(NAG_dco_10117.real(), -NAG_dco_10117.imag());
  NAG_dco_9791 NAG_dco_10107 =
      NAG_dco_10117.real() * NAG_dco_10117.real() + NAG_dco_10117.imag() * NAG_dco_10117.imag();
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = NAG_dco_10651 / NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10649.imag(NAG_dco_10071.imag() / NAG_dco_10107);
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10649.imag(NAG_dco_10071.imag() / NAG_dco_10107);
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10655(complex<NAG_dco_9791> const& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10071 = NAG_dco_10116 * NAG_dco_10117;
  NAG_dco_9791 NAG_dco_10107 = NAG_dco_10117 * NAG_dco_10117;
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10650 = NAG_dco_10651 / NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10649.imag(NAG_dco_10071.imag() / NAG_dco_10107);
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10649.imag(NAG_dco_10071.imag() / NAG_dco_10107);
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10655(NAG_dco_9791 const& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10071 =
      NAG_dco_10116 * complex<NAG_dco_9791>(NAG_dco_10117.real(), -NAG_dco_10117.imag());
  NAG_dco_9791 NAG_dco_10107 =
      NAG_dco_10117.real() * NAG_dco_10117.real() + NAG_dco_10117.imag() * NAG_dco_10117.imag();
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    passive_t NAG_dco_10651(dco::passive_value(NAG_dco_10116));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = NAG_dco_10651 / NAG_dco_10652;
    NAG_dco_10649.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10649.imag(NAG_dco_10071.imag() / NAG_dco_10107);
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10649.imag(NAG_dco_10071.imag() / NAG_dco_10107);
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10656(complex<NAG_dco_9791> const& NAG_dco_10116,
                                    complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10055;
  if (NAG_dco_10116 == NAG_dco_9791()) {
    NAG_dco_10055 = complex<NAG_dco_9791>();
  } else {
    NAG_dco_10055 = exp(NAG_dco_10117 * log(NAG_dco_10116));
  }
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = pow(NAG_dco_10651, NAG_dco_10652);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10656(complex<NAG_dco_9791> const& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10055;
  if (NAG_dco_10116.imag() == typename dco::mode<NAG_dco_9791>::active_t() &&
      NAG_dco_10116.real() > typename dco::mode<NAG_dco_9791>::active_t()) {
    NAG_dco_10055 = pow(NAG_dco_10116.real(), NAG_dco_10117);
  } else {
    complex<NAG_dco_9791> NAG_dco_10041 = log(NAG_dco_10116);
    NAG_dco_10055 = polar(static_cast<NAG_dco_9791>(exp(NAG_dco_10117 * NAG_dco_10041.real())),
                          static_cast<NAG_dco_9791>(NAG_dco_10117 * NAG_dco_10041.imag()));
  }
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10650 = pow(NAG_dco_10651, NAG_dco_10652);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791> NAG_dco_10656(NAG_dco_9791 const& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10055;
  if (NAG_dco_10116 > NAG_dco_9791()) {
    NAG_dco_10055 = polar(static_cast<NAG_dco_9791>(pow(NAG_dco_10116, NAG_dco_10117.real())),
                          static_cast<NAG_dco_9791>(NAG_dco_10117.imag() * log(NAG_dco_10116)));
  } else {
    NAG_dco_10055 = pow(complex<NAG_dco_9791>(NAG_dco_10116), NAG_dco_10117);
  }
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    passive_t NAG_dco_10651(dco::passive_value(NAG_dco_10116));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10650 = pow(NAG_dco_10651, NAG_dco_10652);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791>& NAG_dco_10657(complex<NAG_dco_9791>& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10651 += NAG_dco_10652;
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() + NAG_dco_10117.real());
    NAG_dco_10055.imag(NAG_dco_10116.imag() + NAG_dco_10117.imag());
    NAG_dco_10116 = NAG_dco_10055;
    dco::passive_value(NAG_dco_10116.real()) = NAG_dco_10651.real();
    dco::passive_value(NAG_dco_10116.imag()) = NAG_dco_10651.imag();
  } else {
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() + NAG_dco_10117.real());
    NAG_dco_10055.imag(NAG_dco_10116.imag() + NAG_dco_10117.imag());
    NAG_dco_10116 = NAG_dco_10055;
  }
  return NAG_dco_10116;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791>& NAG_dco_10657(complex<NAG_dco_9791>& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10651 += NAG_dco_10652;
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() + NAG_dco_10117);
    NAG_dco_10055.imag(NAG_dco_10116.imag());
    NAG_dco_10116 = NAG_dco_10055;
    dco::passive_value(NAG_dco_10116.real()) = NAG_dco_10651.real();
    dco::passive_value(NAG_dco_10116.imag()) = NAG_dco_10651.imag();
  } else {
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() + NAG_dco_10117);
    NAG_dco_10055.imag(NAG_dco_10116.imag());
    NAG_dco_10116 = NAG_dco_10055;
  }
  return NAG_dco_10116;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791>& NAG_dco_10658(complex<NAG_dco_9791>& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10651 -= NAG_dco_10652;
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() - NAG_dco_10117.real());
    NAG_dco_10055.imag(NAG_dco_10116.imag() - NAG_dco_10117.imag());
    NAG_dco_10116 = NAG_dco_10055;
    dco::passive_value(NAG_dco_10116.real()) = NAG_dco_10651.real();
    dco::passive_value(NAG_dco_10116.imag()) = NAG_dco_10651.imag();
  } else {
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() - NAG_dco_10117.real());
    NAG_dco_10055.imag(NAG_dco_10116.imag() - NAG_dco_10117.imag());
    NAG_dco_10116 = NAG_dco_10055;
  }
  return NAG_dco_10116;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791>& NAG_dco_10658(complex<NAG_dco_9791>& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10651 -= NAG_dco_10652;
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() - NAG_dco_10117);
    NAG_dco_10055.imag(NAG_dco_10116.imag());
    NAG_dco_10116 = NAG_dco_10055;
    dco::passive_value(NAG_dco_10116.real()) = NAG_dco_10651.real();
    dco::passive_value(NAG_dco_10116.imag()) = NAG_dco_10651.imag();
  } else {
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() - NAG_dco_10117);
    NAG_dco_10055.imag(NAG_dco_10116.imag());
    NAG_dco_10116 = NAG_dco_10055;
  }
  return NAG_dco_10116;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791>& NAG_dco_10659(complex<NAG_dco_9791>& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10651 *= NAG_dco_10652;
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() * NAG_dco_10117.real() - NAG_dco_10116.imag() * NAG_dco_10117.imag());
    NAG_dco_10055.imag(NAG_dco_10116.real() * NAG_dco_10117.imag() + NAG_dco_10116.imag() * NAG_dco_10117.real());
    NAG_dco_10116 = NAG_dco_10055;
    dco::passive_value(NAG_dco_10116.real()) = NAG_dco_10651.real();
    dco::passive_value(NAG_dco_10116.imag()) = NAG_dco_10651.imag();
  } else {
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() * NAG_dco_10117.real() - NAG_dco_10116.imag() * NAG_dco_10117.imag());
    NAG_dco_10055.imag(NAG_dco_10116.real() * NAG_dco_10117.imag() + NAG_dco_10116.imag() * NAG_dco_10117.real());
    NAG_dco_10116 = NAG_dco_10055;
  }
  return NAG_dco_10116;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791>& NAG_dco_10659(complex<NAG_dco_9791>& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10651 *= NAG_dco_10652;
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() * NAG_dco_10117);
    NAG_dco_10055.imag(NAG_dco_10116.imag() * NAG_dco_10117);
    NAG_dco_10116 = NAG_dco_10055;
    dco::passive_value(NAG_dco_10116.real()) = NAG_dco_10651.real();
    dco::passive_value(NAG_dco_10116.imag()) = NAG_dco_10651.imag();
  } else {
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10116.real() * NAG_dco_10117);
    NAG_dco_10055.imag(NAG_dco_10116.imag() * NAG_dco_10117);
    NAG_dco_10116 = NAG_dco_10055;
  }
  return NAG_dco_10116;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791>& NAG_dco_10660(complex<NAG_dco_9791>& NAG_dco_10116, complex<NAG_dco_9791> const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10071 =
      NAG_dco_10116 * complex<NAG_dco_9791>(NAG_dco_10117.real(), -NAG_dco_10117.imag());
  NAG_dco_9791 NAG_dco_10107 =
      NAG_dco_10117.real() * NAG_dco_10117.real() + NAG_dco_10117.imag() * NAG_dco_10117.imag();
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    complex<passive_t> NAG_dco_10652(dco::passive_value(NAG_dco_10117.real()),
                                     dco::passive_value(NAG_dco_10117.imag()));
    NAG_dco_10651 /= NAG_dco_10652;
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10055.imag(NAG_dco_10071.imag() / NAG_dco_10107);
    NAG_dco_10116 = NAG_dco_10055;
    dco::passive_value(NAG_dco_10116.real()) = NAG_dco_10651.real();
    dco::passive_value(NAG_dco_10116.imag()) = NAG_dco_10651.imag();
  } else {
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10055.imag(NAG_dco_10071.imag() / NAG_dco_10107);
    NAG_dco_10116 = NAG_dco_10055;
  }
  return NAG_dco_10116;
}
template <typename NAG_dco_9791>
complex<NAG_dco_9791>& NAG_dco_10660(complex<NAG_dco_9791>& NAG_dco_10116, NAG_dco_9791 const& NAG_dco_10117) {
  complex<NAG_dco_9791> NAG_dco_10071 = NAG_dco_10116 * NAG_dco_10117;
  NAG_dco_9791 NAG_dco_10107 = NAG_dco_10117 * NAG_dco_10117;
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    passive_t NAG_dco_10652(dco::passive_value(NAG_dco_10117));
    NAG_dco_10651 /= NAG_dco_10652;
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10055.imag(NAG_dco_10071.imag() / NAG_dco_10107);
    NAG_dco_10116 = NAG_dco_10055;
    dco::passive_value(NAG_dco_10116.real()) = NAG_dco_10651.real();
    dco::passive_value(NAG_dco_10116.imag()) = NAG_dco_10651.imag();
  } else {
    complex<NAG_dco_9791> NAG_dco_10055;
    NAG_dco_10055.real(NAG_dco_10071.real() / NAG_dco_10107);
    NAG_dco_10055.imag(NAG_dco_10071.imag() / NAG_dco_10107);
    NAG_dco_10116 = NAG_dco_10055;
  }
  return NAG_dco_10116;
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator+(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
          complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10648(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator+(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
          dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10648(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator+(dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10116,
          complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10648(static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10116),
                       static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator+(complex<NAG_dco_10569> const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10648(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator+(complex<NAG_dco_10569> const& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10648(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator+(NAG_dco_10569 const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10648(
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10116),
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator-(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
          complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10653(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator-(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
          dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10653(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator-(dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10116,
          complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10653(static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10116),
                       static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator-(complex<NAG_dco_10569> const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10653(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator-(complex<NAG_dco_10569> const& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10653(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator-(NAG_dco_10569 const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10653(
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10116),
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator*(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
          complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10654(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator*(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
          dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10654(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator*(dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10116,
          complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10654(static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10116),
                       static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator*(complex<NAG_dco_10569> const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10654(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator*(complex<NAG_dco_10569> const& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10654(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator*(NAG_dco_10569 const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10654(
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10116),
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator/(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
          complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10655(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator/(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
          dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10655(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
operator/(dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10116,
          complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10655(static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10116),
                       static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator/(complex<NAG_dco_10569> const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10655(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator/(complex<NAG_dco_10569> const& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10655(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
operator/(NAG_dco_10569 const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10655(
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10116),
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
pow(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
    complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10656(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
pow(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10116,
    dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10656(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
pow(dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10116,
    complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10656(static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10116),
                       static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
pow(complex<NAG_dco_10569> const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10656(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
pow(complex<NAG_dco_10569> const& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10656(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::NAG_dco_10647
pow(NAG_dco_10569 const& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10656(
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10116),
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>>(
          NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&
operator+=(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>& NAG_dco_10116,
           complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10657(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&
operator+=(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>& NAG_dco_10116,
           dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10657(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE
    typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                           NAG_dco_10642<NAG_dco_10569, NAG_dco_10180, false>::NAG_dco_10645>::NAG_dco_10647&
    operator+=(complex<NAG_dco_10569>& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10657(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE
    typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                           NAG_dco_10642<NAG_dco_10569, NAG_dco_10180, false>::NAG_dco_10645>::NAG_dco_10647&
    operator+=(complex<NAG_dco_10569>& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10657(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>&>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&
operator-=(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>& NAG_dco_10116,
           complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10658(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&
operator-=(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>& NAG_dco_10116,
           dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10658(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE
    typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                           NAG_dco_10642<NAG_dco_10569, NAG_dco_10180, false>::NAG_dco_10645>::NAG_dco_10647&
    operator-=(complex<NAG_dco_10569>& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10658(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE
    typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                           NAG_dco_10642<NAG_dco_10569, NAG_dco_10180, false>::NAG_dco_10645>::NAG_dco_10647&
    operator-=(complex<NAG_dco_10569>& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10658(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>&>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&
operator*=(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>& NAG_dco_10116,
           complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10659(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&
operator*=(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>& NAG_dco_10116,
           dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10659(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE
    typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                           NAG_dco_10642<NAG_dco_10569, NAG_dco_10180, false>::NAG_dco_10645>::NAG_dco_10647&
    operator*=(complex<NAG_dco_10569>& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10659(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE
    typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                           NAG_dco_10642<NAG_dco_10569, NAG_dco_10180, false>::NAG_dco_10645>::NAG_dco_10647&
    operator*=(complex<NAG_dco_10569>& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10659(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>&>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&
operator/=(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>& NAG_dco_10116,
           complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_10117) {
  return NAG_dco_10660(NAG_dco_10116, NAG_dco_10117);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&
operator/=(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>& NAG_dco_10116,
           dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10117) {
  return NAG_dco_10660(static_cast<complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>&>(NAG_dco_10116),
                       static_cast<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10117));
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE
    typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                           NAG_dco_10642<NAG_dco_10569, NAG_dco_10180, false>::NAG_dco_10645>::NAG_dco_10647&
    operator/=(complex<NAG_dco_10569>& NAG_dco_10116, complex<NAG_dco_10180> const& NAG_dco_10117) {
  return NAG_dco_10660(NAG_dco_10116, NAG_dco_10117);
}
template <typename NAG_dco_10569, typename NAG_dco_10180>
DCO_STRONG_INLINE
    typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                           NAG_dco_10642<NAG_dco_10569, NAG_dco_10180, false>::NAG_dco_10645>::NAG_dco_10647&
    operator/=(complex<NAG_dco_10569>& NAG_dco_10116, NAG_dco_10180 const& NAG_dco_10117) {
  return NAG_dco_10660(
      static_cast<complex<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                                 NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>&>(
          NAG_dco_10116),
      static_cast<typename NAG_dco_10646<NAG_dco_10569, NAG_dco_10180,
                                         NAG_dco_10642<NAG_dco_10569, NAG_dco_10180>::NAG_dco_10645>::type>(
          NAG_dco_10117));
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10661(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = sin(NAG_dco_10651);
    NAG_dco_10649.real(sin(NAG_dco_10116.real()) * cosh(NAG_dco_10116.imag()));
    NAG_dco_10649.imag(cos(NAG_dco_10116.real()) * sinh(NAG_dco_10116.imag()));
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(sin(NAG_dco_10116.real()) * cosh(NAG_dco_10116.imag()));
    NAG_dco_10649.imag(cos(NAG_dco_10116.real()) * sinh(NAG_dco_10116.imag()));
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10662(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = sinh(NAG_dco_10651);
    NAG_dco_10649.real(sinh(NAG_dco_10116.real()) * cos(NAG_dco_10116.imag()));
    NAG_dco_10649.imag(cosh(NAG_dco_10116.real()) * sin(NAG_dco_10116.imag()));
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(sinh(NAG_dco_10116.real()) * cos(NAG_dco_10116.imag()));
    NAG_dco_10649.imag(cosh(NAG_dco_10116.real()) * sin(NAG_dco_10116.imag()));
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10663(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = cos(NAG_dco_10651);
    NAG_dco_10649.real(cos(NAG_dco_10116.real()) * cosh(NAG_dco_10116.imag()));
    NAG_dco_10649.imag(-sin(NAG_dco_10116.real()) * sinh(NAG_dco_10116.imag()));
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(cos(NAG_dco_10116.real()) * cosh(NAG_dco_10116.imag()));
    NAG_dco_10649.imag(-sin(NAG_dco_10116.real()) * sinh(NAG_dco_10116.imag()));
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10664(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = cosh(NAG_dco_10651);
    NAG_dco_10649.real(cosh(NAG_dco_10116.real()) * cos(NAG_dco_10116.imag()));
    NAG_dco_10649.imag(sinh(NAG_dco_10116.real()) * sin(NAG_dco_10116.imag()));
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(cosh(NAG_dco_10116.real()) * cos(NAG_dco_10116.imag()));
    NAG_dco_10649.imag(sinh(NAG_dco_10116.real()) * sin(NAG_dco_10116.imag()));
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10665(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10055 = sin(NAG_dco_10116) / cos(NAG_dco_10116);
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = tan(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10666(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10055 = sinh(NAG_dco_10116) / cosh(NAG_dco_10116);
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = tanh(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10667(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10055 =
      polar(static_cast<NAG_dco_9791>(exp(NAG_dco_10116.real())), NAG_dco_10116.imag());
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = exp(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10668(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = log(NAG_dco_10651);
    NAG_dco_10649.real(log(abs(NAG_dco_10116)));
    NAG_dco_10649.imag(arg(NAG_dco_10116));
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(log(abs(NAG_dco_10116)));
    NAG_dco_10649.imag(arg(NAG_dco_10116));
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10669(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10055 = log(NAG_dco_10116) / log(typename dco::mode<NAG_dco_9791>::active_t(10.0));
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = log10(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10670(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10055;
  if (NAG_dco_10116.real() == typename dco::mode<NAG_dco_9791>::active_t()) {
    NAG_dco_9791 NAG_dco_10671 = sqrt(abs(NAG_dco_10116.imag()) / 2);
    NAG_dco_10055 =
        complex<NAG_dco_9791>(NAG_dco_10671, NAG_dco_10116.imag() < 0.0 ? NAG_dco_9791(-NAG_dco_10671) : NAG_dco_10671);
  } else {
    NAG_dco_9791 NAG_dco_10671 = sqrt(2 * (abs(NAG_dco_10116) + abs(NAG_dco_10116.real())));
    NAG_dco_9791 NAG_dco_10672 = NAG_dco_10671 / 2;
    NAG_dco_10055 = NAG_dco_10116.real() > typename dco::mode<NAG_dco_9791>::active_t()
                        ? complex<NAG_dco_9791>(NAG_dco_10672, NAG_dco_9791(NAG_dco_10116.imag() / NAG_dco_10671))
                        : complex<NAG_dco_9791>(abs(NAG_dco_10116.imag()) / NAG_dco_10671,
                                                NAG_dco_10116.imag() < NAG_dco_9791() ? NAG_dco_9791(-NAG_dco_10672)
                                                                                      : NAG_dco_10672);
  }
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = sqrt(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10673(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10055(-NAG_dco_10116.imag(), NAG_dco_10116.real());
  NAG_dco_10055 = asinh(NAG_dco_10055);
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = asin(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.imag());
    NAG_dco_10649.imag(-NAG_dco_10055.real());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.imag());
    NAG_dco_10649.imag(-NAG_dco_10055.real());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10674(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10055(
      (NAG_dco_10116.real() - NAG_dco_10116.imag()) * (NAG_dco_10116.real() + NAG_dco_10116.imag()) + NAG_dco_9791(1.0),
      NAG_dco_9791(2.0) * NAG_dco_10116.real() * NAG_dco_10116.imag());
  NAG_dco_10055 = sqrt(NAG_dco_10055);
  NAG_dco_10055 = log(NAG_dco_10055 + NAG_dco_10116);
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = asinh(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10675(complex<NAG_dco_9791> const& NAG_dco_10116) {
  using NAG_dco_10676 = typename dco::internal::passive_value_type_of<NAG_dco_9791>::TYPE;
  complex<NAG_dco_9791> NAG_dco_10055 = asin(NAG_dco_10116);
  const NAG_dco_9791 NAG_dco_10677 = static_cast<NAG_dco_10676>(1.5707963267948966192313216916397514L);
  NAG_dco_10055 = complex<NAG_dco_9791>(NAG_dco_10677 - NAG_dco_10055.real(), -NAG_dco_10055.imag());
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = acos(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10678(complex<NAG_dco_9791> const& NAG_dco_10116) {
  complex<NAG_dco_9791> NAG_dco_10055 =
      NAG_dco_9791(2.0) * log(sqrt(NAG_dco_9791(0.5) * (NAG_dco_10116 + NAG_dco_9791(1.0))) +
                              sqrt(NAG_dco_9791(0.5) * (NAG_dco_10116 - NAG_dco_9791(1.0))));
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = acosh(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10679(complex<NAG_dco_9791> const& NAG_dco_10116) {
  const NAG_dco_9791 NAG_dco_10680 = NAG_dco_10116.real() * NAG_dco_10116.real();
  const NAG_dco_9791 NAG_dco_10639 = NAG_dco_9791(1.0) - NAG_dco_10680 - NAG_dco_10116.imag() * NAG_dco_10116.imag();
  NAG_dco_9791 NAG_dco_10681 = NAG_dco_10116.imag() + NAG_dco_9791(1.0);
  NAG_dco_9791 NAG_dco_10682 = NAG_dco_10116.imag() - NAG_dco_9791(1.0);
  NAG_dco_10681 = NAG_dco_10680 + NAG_dco_10681 * NAG_dco_10681;
  NAG_dco_10682 = NAG_dco_10680 + NAG_dco_10682 * NAG_dco_10682;
  complex<NAG_dco_9791> NAG_dco_10055 =
      complex<NAG_dco_9791>(NAG_dco_9791(0.5) * atan2(NAG_dco_9791(2.0) * NAG_dco_10116.real(), NAG_dco_10639),
                            NAG_dco_9791(0.25) * log(NAG_dco_10681 / NAG_dco_10682));
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = atan(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10683(complex<NAG_dco_9791> const& NAG_dco_10116) {
  const NAG_dco_9791 NAG_dco_10684 = NAG_dco_10116.imag() * NAG_dco_10116.imag();
  const NAG_dco_9791 NAG_dco_10639 = NAG_dco_9791(1.0) - NAG_dco_10684 - NAG_dco_10116.real() * NAG_dco_10116.real();
  NAG_dco_9791 NAG_dco_10681 = NAG_dco_9791(1.0) + NAG_dco_10116.real();
  NAG_dco_9791 NAG_dco_10682 = NAG_dco_9791(1.0) - NAG_dco_10116.real();
  NAG_dco_10681 = NAG_dco_10684 + NAG_dco_10681 * NAG_dco_10681;
  NAG_dco_10682 = NAG_dco_10684 + NAG_dco_10682 * NAG_dco_10682;
  complex<NAG_dco_9791> NAG_dco_10055 =
      complex<NAG_dco_9791>(NAG_dco_9791(0.25) * (log(NAG_dco_10681) - log(NAG_dco_10682)),
                            NAG_dco_9791(0.5) * atan2(NAG_dco_9791(2.0) * NAG_dco_10116.imag(), NAG_dco_10639));
  complex<NAG_dco_9791> NAG_dco_10649;
  if (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<NAG_dco_9791>::passive_t passive_t;
    complex<passive_t> NAG_dco_10650;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_10116.real()),
                                     dco::passive_value(NAG_dco_10116.imag()));
    NAG_dco_10650 = atanh(NAG_dco_10651);
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  } else {
    NAG_dco_10649.real(NAG_dco_10055.real());
    NAG_dco_10649.imag(NAG_dco_10055.imag());
  }
  return NAG_dco_10649;
}
template <typename NAG_dco_9791> complex<NAG_dco_9791> NAG_dco_10685(complex<NAG_dco_9791> const& NAG_dco_10116) {
  if constexpr (dco::IS_DEBUG) {
    if (isinf(NAG_dco_10116.real()) || isinf(NAG_dco_10116.imag()))
      throw dco::exception::create<std::runtime_error>("std::proj(std::complex<T>): One value is inf; derivatives "
                                                       "undefined. Please contact NAG (support@nag.co.uk).");
  }
  return NAG_dco_10116;
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
cos(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10663(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
cosh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10664(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
exp(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10667(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
log(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10668(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
log10(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10669(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
sin(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10661(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
sinh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10662(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
sqrt(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10670(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
tan(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10665(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
tanh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10666(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
asin(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10673(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
asinh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10674(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
acos(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10675(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
acosh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10678(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
atan(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10679(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
atanh(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10683(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE std::complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
proj(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  return NAG_dco_10685(NAG_dco_9778);
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>
abs(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> NAG_dco_10649 =
      hypot(NAG_dco_9778.real(), NAG_dco_9778.imag());
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_9778.real()), dco::passive_value(NAG_dco_9778.imag()));
    passive_t NAG_dco_10650 = abs(NAG_dco_10651);
    dco::passive_value(NAG_dco_10649) = NAG_dco_10650;
  }
  return NAG_dco_10649;
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>
norm(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> NAG_dco_10649 =
      NAG_dco_9778.real() * NAG_dco_9778.real() + NAG_dco_9778.imag() * NAG_dco_9778.imag();
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_9778.real()), dco::passive_value(NAG_dco_9778.imag()));
    passive_t NAG_dco_10650 = norm(NAG_dco_10651);
    dco::passive_value(NAG_dco_10649) = NAG_dco_10650;
  }
  return NAG_dco_10649;
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>
arg(complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> const& NAG_dco_9778) {
  dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> NAG_dco_10649 =
      atan2(NAG_dco_9778.imag(), NAG_dco_9778.real());
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>::passive_t passive_t;
    complex<passive_t> NAG_dco_10651(dco::passive_value(NAG_dco_9778.real()), dco::passive_value(NAG_dco_9778.imag()));
    passive_t NAG_dco_10650 = arg(NAG_dco_10651);
    dco::passive_value(NAG_dco_10649) = NAG_dco_10650;
  }
  return NAG_dco_10649;
}
template <class NAG_dco_9780, typename NAG_dco_9959>
DCO_STRONG_INLINE complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>
polar(dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10686,
      dco::internal::active_type<NAG_dco_9780, NAG_dco_9959> const& NAG_dco_10687) {
  complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>> NAG_dco_10649 =
      complex<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>(NAG_dco_10686 * cos(NAG_dco_10687),
                                                                      NAG_dco_10686 * sin(NAG_dco_10687));
  if constexpr (dco::HAS_INTRINSIC_COMPLEX_PRIMALS) {
    typedef typename dco::mode<dco::internal::active_type<NAG_dco_9780, NAG_dco_9959>>::passive_t passive_t;
    passive_t NAG_dco_10651 = dco::passive_value(NAG_dco_10686);
    passive_t NAG_dco_10652 = dco::passive_value(NAG_dco_10687);
    std::complex<passive_t> NAG_dco_10650 = polar(NAG_dco_10651, NAG_dco_10652);
    dco::passive_value(NAG_dco_10649.real()) = NAG_dco_10650.real();
    dco::passive_value(NAG_dco_10649.imag()) = NAG_dco_10650.imag();
  }
  return NAG_dco_10649;
}
} // namespace std
namespace dco {
template <typename NAG_dco_9791>
using t1s_t = dco::internal::active_type<NAG_dco_9791, dco::internal::NAG_dco_10534<dco::gt1s<NAG_dco_9791>>>;
template <typename NAG_dco_9791>
using a1s_t = dco::internal::active_type<NAG_dco_9791, dco::internal::NAG_dco_10160<dco::ga1s<NAG_dco_9791>>>;
template <typename NAG_dco_9791, std::size_t NAG_dco_10688>
using t1v_t =
    dco::internal::active_type<NAG_dco_9791, dco::internal::NAG_dco_10537<dco::gt1v<NAG_dco_9791, NAG_dco_10688>>>;
template <typename NAG_dco_9791, std::size_t NAG_dco_10688>
using a1v_t =
    dco::internal::active_type<NAG_dco_9791, dco::internal::NAG_dco_10160<dco::ga1v<NAG_dco_9791, NAG_dco_10688>>>;
} // namespace dco
